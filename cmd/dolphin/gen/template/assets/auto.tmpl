// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package app

import (
	"time"
	"{{.PackageName}}/model"

	"github.com/spf13/viper"
)

// Name project
{{- $pName := .Name }}
var Name = "{{.Name}}"
var NopInterceptor = func(ctx *Context) { ctx.Next() }

// Controller defined
type Controller struct {
	Method       string
	RelativePath string
	Interceptor  HandlerFunc
	Handler      HandlerFunc
}

{{- range .Controllers}}
{{- $ctr := .}}
// {{.ToUpperCase .Name}} defined
type {{.ToUpperCase .Name}} struct {
	Name string
	{{- $APIS := .APIS}}
	{{- range $index, $api := .APIS}}
	{{.ToUpperCase $api.Name}}{{- if last $index $APIS}} Controller{{- else}},{{- end}}
	{{- end}}
}

// New{{.ToUpperCase .Name}} defined
func New{{.ToUpperCase .Name}}() *{{.ToUpperCase .Name}} {
	ctr := &{{.ToUpperCase .Name}}{Name: "{{.Name}}"}
	{{- range .APIS}}
	ctr.{{.ToUpperCase .Name}}.Method = "{{.ToUpper .Method}}"
	ctr.{{.ToUpperCase .Name}}.RelativePath = "{{.APIPrefix .Version}}{{.APIPath $ctr.Name .Name .Path}}"
    ctr.{{.ToUpperCase .Name}}.Interceptor = NopInterceptor
	ctr.{{.ToUpperCase .Name}}.Handler = {{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}
	{{- end}}
	return ctr
}

// {{.ToUpperCase .Name}}Routes defined
{{- $ctrName := .Name}}
func {{.ToUpperCase .Name}}Routes(dol *Dolphin) {
	group, instance := dol.Group({{- if ne .Prefix ""}}"{{.Prefix}}"{{- else}}viper.GetString("http.prefix"){{- end}}), {{.ToUpperCase $ctrName}}Instance
	{{- range .APIS}}
	group.Handle(instance.{{.ToUpperCase .Name}}.Method, instance.{{.ToUpperCase .Name}}.RelativePath{{- if gt (len .Auth) 0}}, Auth({{.FormatString .Auth ","}}){{- end}}{{- if gt (len .Roles) 0}}, Roles({{.FormatString .Roles ","}}){{- end}}{{- if gt .Cache 0}}, Cache({{.Cache}}*time.Second){{- end}}, instance.{{.ToUpperCase .Name}}.Interceptor, instance.{{.ToUpperCase .Name}}.Handler)
	{{- end}}
}

// {{.ToUpperCase .Name}}Instance defined
var {{.ToUpperCase .Name}}Instance = New{{.ToUpperCase .Name}}()
{{end}}


{{- range .Services}}
// {{.ToUpperCase .Name}} defined
func {{.ToUpperCase .Name}}Service(dol *Dolphin) {
	dol.RPC.RegisterServer(func(srv *grpc.Server) {proto.Register{{.ToUpperCase .Name}}Server(srv, &rpc.{{.ToUpperCase .Name}}{})})
}
{{- end}}

// SyncModel defined
func SyncModel(dol *Dolphin) error {
	{{- $tLen := len .Tables }}{{- if ne $tLen 0 }}
	mseti := dol.Manager.MSet()
	{{- range .Tables}}
	mseti.Add(new(model.{{.ToUpperCase .Name}}){{- if ne .Bind "" }}, "{{.Bind}}"{{- end}})
	{{- end}}
	{{- end}}
	return nil
}

// SyncController defined
func SyncController(dol *Dolphin) error {
	{{- range .Controllers}}
	{{.ToUpperCase .Name}}Routes(dol)
	{{- end}}
	return nil
}

// SyncService defined
func SyncService(dol *Dolphin) error {
	{{- range .Services}}
	{{.ToUpperCase .Name}}Service(dol)
	{{- end}}
	return nil
}
