// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

{{.Table.Import .Table.Packages "reflect,encoding/json,github.com/2637309949/dolphin/packages/xormplus/xorm,github.com/2637309949/dolphin/packages/xormplus/xorm/tags,github.com/2637309949/dolphin/packages/xormplus/xorm/caches,github.com/2637309949/dolphin/packages/xormplus/xorm"}}

// {{.Table.ToUpperCase .Table.Name}} defined {{.Table.Desc}} 
type {{.Table.ToUpperCase .Table.Name}} struct {
	{{- range .Table.Columns}}
	// {{.ToUpperCase .Name}} defined {{.Desc}}
	{{.ToUpperCase .Name}} {{.SRef .Type}} `xorm:"{{- if ne .Xorm ""}}{{.Xorm}} {{end}}{{- if ne .Desc ""}}comment('{{.Desc}}') {{end}}'{{.Name}}'" json:"{{- if ne .JSON ""}}{{.JSON}}{{- else}}{{.Name}}{{- end}}" form:"{{- if ne .Form ""}}{{.Form}}{{- else}}{{.Name}}{{- end}}" xml:"{{.Name}}"{{- if ne .Example ""}} example:"{{.Example}}"{{- end}}`
	{{- end}}
}

// Marshal defined
func (m *{{.Table.ToUpperCase .Table.Name}}) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *{{.Table.ToUpperCase .Table.Name}}) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *{{.Table.ToUpperCase .Table.Name}}) ToMap()(map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *{{.Table.ToUpperCase .Table.Name}}) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *{{.Table.ToUpperCase .Table.Name}}) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *{{.Table.ToUpperCase .Table.Name}}) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined {{.Table.ToUpperCase .Table.Name}}
func (m *{{.Table.ToUpperCase .Table.Name}}) TableName() string {
	return "{{.Table.Name}}"
}
