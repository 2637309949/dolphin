// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Service.ToUpperCase .Service.Name}}.cli.go

package rpc

import (
	"context"
	"time"

	"github.com/2637309949/dolphin/platform/plugin"
	"{{.PackageName}}/rpc/proto"

	"github.com/sirupsen/logrus"
    "github.com/spf13/viper"
	"google.golang.org/grpc"
)

// {{.Service.ToUpperCase .Service.Name}}Client defined
var {{.Service.ToUpperCase .Service.Name}}Client proto.{{.Service.ToUpperCase .Service.Name}}Client

func init() {
	options := []grpc.DialOption{
		grpc.WithInsecure(),
		grpc.WithBlock(),
		grpc.WithChainUnaryInterceptor(plugin.RpcSrvTrace),
	}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	conn, err := grpc.DialContext(ctx, viper.GetString("rpc.{{.Service.Name}}"), options...)
	if err != nil {
		logrus.Error("grpc dial failed: %v", err)
	}
	{{.Service.ToUpperCase .Service.Name}}Client = proto.New{{.Service.ToUpperCase .Service.Name}}Client(conn)
}
