// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Controller.Name}}.go

package app

import (
	"errors"
	"{{.PackageName}}/model"
	"{{.PackageName}}/srv"

	"github.com/2637309949/dolphin/packages/gin/binding"
	"github.com/2637309949/dolphin/packages/go-funk"
	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/time"
)
{{range .Controller.APIS}}
// {{$.Controller.ToUpperCase $.Controller.Name}}{{.ToUpperCase .Name}} api implementation
// @Summary {{.Desc}} 
// @Tags {{$.Controller.Desc}}
{{- if ne .Version "" }}
// @version {{.Version}}
{{- end}}
{{- if ne .Method "get"}}
// @Accept {{if gt (len .Params) 1}}multipart/form-data{{else}}application/json{{end}}
{{- end}}
{{- $api := .}}
{{- if .Auth}}
// @Param Authorization header string false "认证令牌"
{{- end}}
{{- range .Params}}
// @Param {{.Name}} {{if eq $api.Method "get"}} query {{else }} {{- if ne (len $api.Params) 1 }}formData{{- else}}body{{- end}}{{- end}} {{.Ref .Type}} false "{{.Desc}}"
{{- end}}
// @Failure 403 {object} model.Fail
{{- if ne .Return.Success.Type ""}}
// @Success 200 {object} {{.Ref .Return.Success.Type}}
{{- end}}
{{- if ne .Return.Failure.Type ""}}
// @Failure 500 {object} {{.Ref .Return.Failure.Type}}
{{- end}}
// @Router {{- if and (ne $.Controller.Prefix "") (ne $.Controller.Prefix "/")}}{{$.Controller.Prefix}}{{- else if ne $.Controller.Prefix "/"}}{{$.Viper.GetString "http.prefix"}}{{- end}}{{.APIPrefix .Version}}{{.APIPath $.Controller.Name .Name .Path}} [{{.Method}}]
func {{$.Controller.ToUpperCase $.Controller.Name}}{{.ToUpperCase .Name}}(ctx *Context) {
{{- if eq .Func "page"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	{{- if $api.Auth}}
	q.SetRule("{{$.Controller.Name}}_{{.Name}}")
	{{- end}}
	q.SetTags()
	ret, err := ctx.PageSearch(ctx.DB, "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "tree"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	{{- if $api.Auth}}
	q.SetRule("{{$.Controller.Name}}_{{.Name}}")
	{{- end}}
	q.SetTags()
	ret, err := ctx.TreeSearch(ctx.DB, "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "add"}}
	{{- $bp := index .Params 0}}
	{{- $ref := $bp.Ref $bp.Type}}
	var payload {{$bp.TypeWithPointer $ref}}
	if err := ctx.ShouldBindBodyWith(payload, binding.JSON); err != nil {
	    logrus.Error(err)
		ctx.Fail(err)
		return
	}
	{{- if .ISArray $bp.Type}}
	funk.ForEach(payload, func(form {{$bp.ORef $bp.Type}}) {
		form.ID = null.StringFromUUID()
		form.CreateTime = null.TimeFrom(time.Now().Value())
		form.CreateBy = null.StringFrom(ctx.GetToken().GetUserID())
		form.UpdateTime = null.TimeFrom(time.Now().Value())
		form.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
		form.DelFlag = null.IntFrom(0)
	})
	{{- else}}
	payload.ID = null.StringFromUUID()
	payload.CreateTime = null.TimeFrom(time.Now().Value())
	payload.CreateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now().Value())
	payload.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.DelFlag = null.IntFrom(0)
	{{- end}}
	ret, err := ctx.DB.Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "delete"}}
	{{- $bp := index .Params 0}}
	{{- $ref := $bp.Ref $bp.Type}}
	{{- $isArr := $bp.ISArray $bp.Type}}
	{{- if $isArr}}
	var payload {{$bp.TypeWithPointer $ref}}
	if err := ctx.ShouldBindBodyWith(payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	var ids = funk.Map(payload, func(form {{$bp.ORef $bp.Type}}) string { return form.ID.String }).([]string{})
	ret, err := ctx.DB.In("id", ids).Update(&{{$bp.ORef $bp.Type}}{
		UpdateTime: null.TimeFrom(time.Now().Value()),
		UpdateBy:   null.StringFrom(ctx.GetToken().GetUserID()),
		DelFlag:    null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else }}
	var payload {{$bp.Ref $bp.Type}}
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := ctx.DB.In("id", payload.ID.String).Update(&{{$bp.ORef $bp.Type}}{
		UpdateTime: null.TimeFrom(time.Now().Value()),
		UpdateBy:   null.StringFrom(ctx.GetToken().GetUserID()),
		DelFlag:    null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- else if eq .Func "update"}}
	{{- $bp := index .Params 0}}
	{{- $ref := $bp.Ref $bp.Type}}
	{{- $isArr := $bp.ISArray $bp.Type}}
	{{- if $isArr}}
	var payload {{$bp.TypeWithPointer $ref}}
	var err error
	var ret []int64
	var r int64
	if err = ctx.ShouldBindBodyWith(payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	s := ctx.DB.NewSession()
	funk.ForEach(payload, func(form {{$bp.ORef $bp.Type}}) {
		form.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
		form.UpdateTime = null.TimeFrom(time.Now().Value())
		r, err = s.ID(form.ID.String).Update(&form)
		ret = append(ret, r)
	})
	if err != nil {
		s.Rollback()
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	err = s.Commit()
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else }}
	var payload {{$bp.Ref $bp.Type}}
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	payload.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now().Value())
	ret, err := ctx.DB.ID(payload.ID.String).Update(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- else if eq .Func "one"}}
	var entity model.{{.ToUpperCase .Table}}
	err := ctx.ShouldBindQuery(&entity)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ext, err := ctx.DB.Get(&entity)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	if !ext {
		ctx.Fail(errors.New("not found"))
		return
	}
	ctx.Success(entity)
{{- else}}
	{{- if eq .Method "get"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	ret, err := srv.{{$.Controller.ToUpperCase $.Controller.Name}}Action(ctx.Raw(), ctx.DB, struct{}{})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else}}
	{{- if ne (len .Params) 0}}
	{{- $bp := index .Params 0}}
	var payload {{$bp.Ref $bp.Type}}
	{{- else}}
	var payload struct{}
	{{- end}}
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := srv.{{$.Controller.ToUpperCase $.Controller.Name}}Action(ctx.Raw(), ctx.DB, struct{}{})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- end}}
}
{{end}}