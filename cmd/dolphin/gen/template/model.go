// Copyright (c) 2018-2020 Double All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

package template

// TmplModel defined template
var TmplModel = `// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

{{.Table.Import .Table.Packages}}

// {{.Table.ToUpperCase .Table.Name}} defined {{.Table.Desc}} 
type {{.Table.ToUpperCase .Table.Name}} struct {
	{{- range .Table.Columns}}
	// {{.Desc}}
	{{.ToUpperCase .Name}} {{.SRef .Type}} ` + "`" + `xorm:"{{.Xorm}} '{{.Name}}'" json:"{{- if ne .JSON ""}}{{.JSON}}{{- else}}{{.Name}}{{- end}}" xml:"{{.Name}}"` + "`" + `
	{{- end}}
}

// OmitByZero defined
func (m *{{.Table.ToUpperCase .Table.Name}}) OmitByZero() interface{} {
	t, v, sv := reflect.TypeOf(*m), reflect.ValueOf(*m), []reflect.StructField{}
	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).CanInterface() {
			if zeroType, ok := v.Field(i).Interface().(xorm.ZeroType); !ok || !zeroType.IsZero() {
				sv = append(sv, reflect.StructField{
					Name: strings.Title(t.Field(i).Name),
					Type: t.Field(i).Type,
					Tag:  t.Field(i).Tag,
				})
			}
		}
	}
	target := reflect.New(reflect.StructOf(sv)).Interface()
	sbt, _ := json.Marshal(m)
	json.Unmarshal(sbt, &target)
	return target
}

// TableName table name of defined {{.Table.ToUpperCase .Table.Name}}
func (m *{{.Table.ToUpperCase .Table.Name}}) TableName() string {
	return "{{.Table.Name}}"
}
`
