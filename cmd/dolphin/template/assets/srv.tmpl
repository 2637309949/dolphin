// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Controller.Name}}.go

package {{$.Viper.GetString "dir.srv" }}

import (
	"context"
	"errors"
	"time"

	"{{.PackageName}}/{{$.Viper.GetString "dir.svc" }}"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
)


type {{$.Controller.ToUpperCase $.Controller.Name}} struct {
	*{{$.Viper.GetString "dir.svc" }}.ServiceContext
}

func New{{$.Controller.ToUpperCase $.Controller.Name}}() *{{$.Controller.ToUpperCase $.Controller.Name}} {
	return &{{$.Controller.ToUpperCase $.Controller.Name}}{}
}

// TODO defined srv
func (srv *{{$.Controller.ToUpperCase $.Controller.Name}})TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi {{.lt}}- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case {{.lt}}-cwt.Done():
			logrus.Infoln("child process interrupt...")
			return {{.lt}}-chi, cwt.Err()
		default:
			logrus.Infoln("awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}