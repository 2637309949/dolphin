// Code generated by dol build. DO NOT EDIT.
// source: x_test.go
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"time"

	"github.com/spf13/viper"
	"github.com/2637309949/dolphin/packages/xtest"

	"{{.PackageName}}/{{$.Viper.GetString "dir.util" }}/errors"
	"{{.PackageName}}/{{$.Viper.GetString "dir.api" }}"
	{{if ne $.Name "platform"}} appApi "github.com/2637309949/dolphin/platform/api"{{end}}
	{{if ne $.Name "platform"}} appSvc "github.com/2637309949/dolphin/platform/svc"{{end}}
)

var x *xtest.XTest

// TestMain defined
func TestMain(m *testing.M) {
	x = xtest.New({{if ne $.Name "platform"}}appApi{{end}}.App)
	{{- if ne $.Name "platform"}}
	api.SyncModel()
	api.SyncSrv(appSvc.NewServiceContext(appApi.CacheStore))
	api.SyncController()
	{{- else}}
	if err := api.App.Reflesh(); err != nil {
		panic(fmt.Errorf("%v\n%v", err, string(errors.Wrap(err, 2).Stack())))
	}
	{{- end}}
	TestSysUserLogin(nil)
	os.Exit(m.Run())
}

// TestSysUserLogin defined TODO
func TestSysUserLogin(t *testing.T) {
	x.Handle("POST", "/api/sys/user/login", XTestSysUserLogin, t, XTestSysUserLoginRequest)
}

{{- range .Controllers}}
{{- $ctr := .}}
{{- range $ctr.APIS}}
{{- $api := .}}
{{- if ne $api.Name "login" }}
// Test{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}} defined TODO
// go test -v -test.run Test{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}
func Test{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}(t *testing.T) {
	x.Handle("{{$ctr.ToUpper $api.Method}}", "{{if and (ne $ctr.Prefix "") (ne $ctr.Prefix "/")}}{{$ctr.Prefix}}{{- else if ne $ctr.Prefix "/"}}{{$.Viper.GetString "http.prefix"}}{{- end}}{{.APIPrefix .Version}}{{.APIPath $ctr.Name .Name .Path}}", XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}, t, XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}Request)
}
// Benchmark{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}} defined TODO
// go test -v -test.run=none -test.bench=^Benchmark{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}} -test.benchmem=true
func Benchmark{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("{{$ctr.ToUpper $api.Method}}", "{{if and (ne $ctr.Prefix "") (ne $ctr.Prefix "/")}}{{$ctr.Prefix}}{{- else if ne $ctr.Prefix "/"}}{{$.Viper.GetString "http.prefix"}}{{- end}}{{.APIPrefix .Version}}{{.APIPath $ctr.Name .Name .Path}}", XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}, t, XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}Request)
			}
	})
}
{{end}}
{{end }}
{{end }}
