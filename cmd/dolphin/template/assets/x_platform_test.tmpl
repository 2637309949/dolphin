// Code generated by dol build. Only Generate by tools if not existed.
// source: x_{{.Name}}_test.go

package main

import (
	"encoding/json"
	"github.com/2637309949/dolphin/packages/xtest"

	// "github.com/mattn/go-sqlite3"
	_ "github.com/mattn/go-sqlite3"
)

// XTestSysUserLogin defined TODO
var XTestSysUserLogin, XTestSysUserLoginRequest = func(ctx *xtest.Context) {
	rsp := struct {
		Code         int    `json:"code"`
		AccessToken  string `json:"access_token"`
		RefreshToken string `json:"refresh_token"`
	}{}
	err := ctx.Bind(&rsp)
	if err != nil {
		ctx.Error(err)
	}
	x.SetToken(rsp.AccessToken)
}, map[string]interface{}{"domain": "localhost", "name": "admin", "password": "admin"}

{{- range .Controllers}}
{{- $ctr := .}}
{{- range $ctr.APIS}}
{{- $api := .}}
{{- if ne $api.Name "login" }}
// XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}, XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}Request defined TODO
var XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}, XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}Request = func (ctx *xtest.Context) {
    if ctx.Code != 200 {
		ctx.Errorf("XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}} = %v want %v", ctx.Code, 200)
	}
	rsp, err := ctx.Body()
	if err != nil {
		ctx.Error(err)
	}
	if rsp.Code != 200 {
		ctx.Errorf("XTest{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}} = %v want %v", rsp.Code, 200)
	}
}, map[string]interface{}{}
{{end }}
{{end }}
{{end }}

