// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package {{$.Viper.GetString "dir.api" }}

import (
	"time"
	"{{.PackageName}}/{{$.Viper.GetString "dir.types" }}"
	"{{.PackageName}}/{{$.Viper.GetString "dir.srv" }}"
	"{{.PackageName}}/{{$.Viper.GetString "dir.svc" }}"

	"github.com/2637309949/dolphin/packages/web"
	"github.com/2637309949/dolphin/packages/web/core"
    "github.com/2637309949/dolphin/platform/api"
	"github.com/spf13/viper"
)

var (
	Name = "{{.Name}}"
	NopHandlerFunc = func(ctx *Context) { ctx.Next() }
{{- range .Controllers}}
    {{.ToUpperCase .Name}}Instance = New{{.ToUpperCase .Name}}()
{{- end}}
)

// Controller defined
type (
	Controller struct {
		Method       string
		RelativePath string
		Auth, Roles, Cache, Interceptor, Handler core.HandlerFunc
	}
{{- range .Controllers}}
	{{.ToUpperCase .Name}} struct {
		Name string
		Srv  *{{$.Viper.GetString "dir.srv" }}.{{.ToUpperCase .Name}}
		{{- $APIS := .APIS}}
		{{- range $index, $api := .APIS}}
		{{.ToUpperCase $api.Name}}{{- if last $index $APIS}} Controller{{- else}},{{- end}}
		{{- end}}
	}
{{- end}}
)

{{- range .Controllers}}
{{- $ctr := .}}
// New{{.ToUpperCase .Name}} defined
func New{{.ToUpperCase .Name}}() *{{.ToUpperCase .Name}} {
	ctr := &{{.ToUpperCase .Name}}{Name: "{{.Name}}", Srv: {{$.Viper.GetString "dir.srv" }}.New{{.ToUpperCase .Name}}()}
	{{- range .APIS}}
	ctr.{{.ToUpperCase .Name}}.Method = "{{.ToUpper .Method}}"
	ctr.{{.ToUpperCase .Name}}.RelativePath = "{{.APIPrefix .Version}}{{.APIPath $ctr.Name .Name .Path}}"
	ctr.{{.ToUpperCase .Name}}.Auth = {{- if gt (len .Auth) 0}} {{- if ne $.Name "platform"}}api.{{- end}}Auth({{.FormatString .Auth ","}}){{- else}} NopHandlerFunc{{- end}}
	ctr.{{.ToUpperCase .Name}}.Roles = {{- if gt (len .Roles) 0}} {{- if ne $.Name "platform"}}api.{{- end}}Roles({{.FormatString .Roles ","}}){{- else}} NopHandlerFunc{{- end}}
	ctr.{{.ToUpperCase .Name}}.Cache = {{- if gt .Cache 0}} {{- if ne $.Name "platform"}}api.{{- end}}Cache({{.Cache}}*time.Second){{- else}} NopHandlerFunc{{- end}}
    ctr.{{.ToUpperCase .Name}}.Interceptor = NopHandlerFunc
	ctr.{{.ToUpperCase .Name}}.Handler = ctr.{{$ctr.ToUpperCase $ctr.Name}}{{.ToUpperCase .Name}}
	{{- end}}
	return ctr
}

// {{.ToUpperCase .Name}}Routes defined
{{- $ctrName := .Name}}
func {{.ToUpperCase .Name}}Routes() {
	g, i := {{- if ne $.Name "platform"}}api.{{- end}}App.Group({{- if ne .Prefix ""}}"{{.Prefix}}"{{- else}}viper.GetString("http.prefix"){{- end}}), {{.ToUpperCase $ctrName}}Instance
	{{- range .APIS}}
	g.Handle(i.{{.ToUpperCase .Name}}.Method, i.{{.ToUpperCase .Name}}.RelativePath, i.{{.ToUpperCase .Name}}.Auth, i.{{.ToUpperCase .Name}}.Roles, i.{{.ToUpperCase .Name}}.Cache, i.{{.ToUpperCase .Name}}.Interceptor, i.{{.ToUpperCase .Name}}.Handler)
	{{- end}}
}
{{end}}

// SyncModel defined
func SyncModel() error {
	{{- $tLen := len .Tables }}{{- if ne $tLen 0 }}
	mseti := {{- if ne $.Name "platform"}}api.{{- end}}App.Manager.ModelSet()
	{{- range .Tables}}
	mseti.Add(new({{$.Viper.GetString "dir.types" }}.{{.ToUpperCase .Name}}){{- if ne .Bind "" }}, "{{.Bind}}"{{- end}})
	{{- end}}
	{{- end}}
	return nil
}

// SyncController defined
func SyncController() error {
	{{- range .Controllers}}
	{{.ToUpperCase .Name}}Routes()
	{{- end}}
	return nil
}

// SyncSrv defined
func SyncSrv(svc *{{$.Viper.GetString "dir.svc" }}.ServiceContext) error {
	{{- range .Controllers}}
	{{.ToUpperCase .Name}}Instance.Srv.SetServiceContext(svc)
	{{- end}}
	return nil
}
