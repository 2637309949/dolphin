// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Controller.Name}}.go

package {{$.Viper.GetString "dir.api" }}

import (
	"context"
	"{{.PackageName}}/{{$.Viper.GetString "dir.types" }}"
	"{{.PackageName}}/{{$.Viper.GetString "dir.srv" }}"

	"github.com/gin-gonic/gin/binding"
	"github.com/thoas/go-funk"
	"github.com/sirupsen/logrus"
	"github.com/2637309949/dolphin/packages/null"
	"{{.PackageName}}/util/errors"
	"time"
)
{{range .Controller.APIS}}
// {{$.Controller.ToUpperCase $.Controller.Name}}{{.ToUpperCase .Name}} api implementation
// @Summary {{.Desc}} 
// @Tags {{$.Controller.Desc}}
{{- if ne .Version "" }}
// @version {{.Version}}
{{- end}}
{{- if ne .Method "get"}}
// @Accept {{if gt (len .Params) 1}}multipart/form-data{{else}}application/json{{end}}
{{- end}}
// @Produce application/json
{{- $api := .}}
{{- if .Auth}}
// @Param Authorization header string false "认证令牌"
{{- end}}
{{- range .Params}}
// @Param {{.Name}} {{if eq $api.Method "get"}} query {{else }} {{- if ne (len $api.Params) 1 }}formData{{- else}}body{{- end}}{{- end}} {{.Ref .Type}} false "{{.Desc}}"
{{- end}}
// @Failure 403 {object} {{$.Viper.GetString "dir.types" }}.Fail
{{- if ne .Return.Success.Type ""}}
// @Success 200 {object} {{.Ref .Return.Success.Type}}
{{- end}}
{{- if ne .Return.Failure.Type ""}}
// @Failure 500 {object} {{.Ref .Return.Failure.Type}}
{{- end}}
// @Router {{if and (ne $.Controller.Prefix "") (ne $.Controller.Prefix "/")}}{{$.Controller.Prefix}}{{- else if ne $.Controller.Prefix "/"}}{{$.Viper.GetString "http.prefix"}}{{- end}}{{.APIPrefix .Version}}{{.APIPath $.Controller.Name .Name .Path}} [{{.Method}}]
func (ctr *{{$.Controller.ToUpperCase $.Controller.Name}}) {{$.Controller.ToUpperCase $.Controller.Name}}{{.ToUpperCase .Name}}(ctx *Context) {
{{- if eq .Func "page"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	{{- if .Contains $api.Auth "token"}}
	q.SetRule("{{$.Controller.Name}}_{{.Name}}")
	{{- end}}
	q.SetString("creater")
	q.SetString("updater")
	q.SetRange("create_time")
	q.SetRange("update_time")
	q.SetInt("is_delete", 0)()
	q.SetString("sort", "update_time desc")
	q.SetTags()
	ret, err := ctr.Srv.DB.PageSearch(ctx.MustDB(), "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "tree"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	{{- if .Contains $api.Auth "token"}}
	q.SetRule("{{$.Controller.Name}}_{{.Name}}")
	{{- end}}
	q.SetString("creater")
	q.SetString("updater")
	q.SetRange("create_time")
	q.SetRange("update_time")
	q.SetInt("is_delete", 0)()
	q.SetString("sort", "update_time desc")
	q.SetTags()
	ret, err := ctr.Srv.DB.TreeSearch(ctx.MustDB(), "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "add"}}
	{{- $bp := index .Params 0}}
	var payload {{$bp.Ref $bp.Type}}
	if err := ctx.ShouldBindWith(&payload); err != nil {
	    logrus.Error(err)
		ctx.Fail(err)
		return
	}
	{{- $tbName := .TableNameOfType $bp.Type }}
	{{- if .ISArray $bp.Type}}
	for i := range payload {
		{{- range $i, $v := $bp.AutoIncr $.Tables $tbName }}
		payload[i].{{- $v}} = null.StringFromUUID()
		{{- end }}
		payload[i].CreateTime = null.TimeFromNow()
		payload[i].Creater = null.IntFromStr(ctx.MustToken().GetUserID())
		payload[i].UpdateTime = null.TimeFromNow()
		payload[i].Updater = null.IntFromStr(ctx.MustToken().GetUserID())
		payload[i].IsDelete = null.IntFrom(0)
	}
	{{- else}}
	{{- range $i, $v := $bp.AutoIncr $.Tables $tbName }}
	payload.{{- $v}} = null.StringFromUUID()
	{{- end}}
	payload.CreateTime = null.TimeFromNow()
	payload.Creater = null.IntFromStr(ctx.MustToken().GetUserID())
	payload.UpdateTime = null.TimeFromNow()
	payload.Updater = null.IntFromStr(ctx.MustToken().GetUserID())
	payload.IsDelete = null.IntFrom(0)
	{{- end}}
	ret, err := ctx.MustDB().Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
{{- else if eq .Func "delete"}}
	{{- $bp := index .Params 0}}
	var payload {{$bp.Ref $bp.Type}}
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	{{- if .ISArray $bp.Type}}
	var ids = funk.Map(payload, func(form {{$bp.ORef $bp.Type}}) int64 { return form.ID.Int64 }).([]int64)
	ret, err := ctx.MustDB().In("id", ids).Update(&{{$bp.ORef $bp.Type}}{
		UpdateTime: null.TimeFromNow(),
		Updater:   null.IntFromStr(ctx.MustToken().GetUserID()),
		IsDelete:    null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else }}
	ret, err := ctx.MustDB().In("id", payload.ID.Int64).Update(&{{$bp.ORef $bp.Type}}{
		UpdateTime: null.TimeFromNow(),
		Updater:   null.IntFromStr(ctx.MustToken().GetUserID()),
		IsDelete:    null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- else if eq .Func "update"}}
	{{- $bp := index .Params 0}}
	var payload {{$bp.Ref $bp.Type}}
	{{- if .ISArray $bp.Type}}
	var err error
	var ret []int64
	var r int64
	{{- end}}
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	{{- if .ISArray $bp.Type}}
	s := ctx.MustDB().NewSession()
	s.Begin()
	defer s.Close()
	s.Begin()
	defer s.Close()
	for i := range payload {
		payload[i].UpdateTime = null.TimeFromNow()
		payload[i].Updater = null.IntFromStr(ctx.MustToken().GetUserID())
		r, err = s.ID(payload[i].ID.Int64).Update(&payload[i])
		if  err != nil {
			logrus.Error(err)
			s.Rollback()
			ctx.Fail(err)
			return
		}
		ret = append(ret, r)
	}
	if err != nil {
		logrus.Error(err)
		s.Rollback()
		ctx.Fail(err)
		return
	}
	err = s.Commit()
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else }}
	payload.Updater = null.IntFromStr(ctx.MustToken().GetUserID())
	payload.UpdateTime = null.TimeFromNow()
	ret, err := ctx.MustDB().ID(payload.ID.Int64).Update(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- else if eq .Func "one"}}
	var one {{$.Viper.GetString "dir.types" }}.{{.ToUpperCase .Table}}
	err := ctx.ShouldBindWith(&one)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	if ext, err := ctx.MustDB().Get(&one); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	} else if !ext {
		ctx.Fail(errors.ErrNotFound)
		return
	}
	ctx.Success(one)
{{- else}}
	{{- if eq .Method "get"}}
	q := ctx.TypeQuery()
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	q.Value()
	ret, err := ctr.Srv.TODO(ctx, ctx.MustDB(), struct{}{})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- else}}
	{{- if ne (len .Params) 0}}
	{{- $bp := index .Params 0}}
	var payload {{$bp.Ref $bp.Type}}
	{{- else}}
	var payload struct{}
	{{- end}}
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := ctr.Srv.TODO(ctx, ctx.MustDB(), struct{}{})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
	{{- end}}
{{- end}}
}
{{end}}