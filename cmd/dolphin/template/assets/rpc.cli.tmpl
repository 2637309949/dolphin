// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Service.ToUpperCase .Service.Name}}.cli.go

package {{$.Viper.GetString "dir.rpc" }}

import (
	"context"
	"time"

    "github.com/2637309949/dolphin/platform/util/trace"
	"{{.PackageName}}/{{$.Viper.GetString "dir.rpc" }}/proto"

	"github.com/sirupsen/logrus"
    "github.com/spf13/viper"
	"google.golang.org/grpc"
)

// {{.Service.ToUpperCase .Service.Name}}Client defined
var {{.Service.ToUpperCase .Service.Name}}Client proto.{{.Service.ToUpperCase .Service.Name}}Client

// New{{.Service.ToUpperCase .Service.Name}}Client defined TODO
func New{{.Service.ToUpperCase .Service.Name}}Client(target string, opts ...grpc.DialOption) (proto.{{.Service.ToUpperCase .Service.Name}}Client, error) {
	options := append(opts, []grpc.DialOption{
		grpc.WithInsecure(),
		grpc.WithBlock(),
		grpc.WithChainUnaryInterceptor(trace.RpcSrvTrace),
	}...)
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	conn, err := grpc.DialContext(ctx, target, options...)
	if err != nil {
		return nil, err
	}
	return proto.New{{.Service.ToUpperCase .Service.Name}}Client(conn), nil
}

func init() {
	var err error
	{{.Service.ToUpperCase .Service.Name}}Client, err = New{{.Service.ToUpperCase .Service.Name}}Client(viper.GetString("rpc.{{.Service.Name}}"))
	if err != nil {
		logrus.Errorf("grpc dial rpc.{{.Service.Name}} failed: %v", err)
	}
}
