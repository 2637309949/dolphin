// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"fmt"
	"strings"
	"time"

	"github.com/2637309949/dolphin/platform/util"
	"github.com/spf13/viper"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
)

// Ensure defined inital system data
func (m *SysDomain) Ensure(db *xorm.Engine) {
	if !util.EnsureLeft(db.IsTableExist(new(SysDomain))).(bool) {
		db.Sync2(new(SysDomain))
	}
}

// CreateDataBase defined
func (m *SysDomain) CreateDataBase(db *xorm.Engine, driverName, database string) {
	if driverName != "sqlite3" {
		util.EnsureLeft(db.SQL(fmt.Sprintf("create database if not exists %v default character set utf8mb4 default collate utf8mb4_general_ci", database)).Execute())
	}
}

// InitSysData defined inital system data
func (m *SysDomain) InitSysData(s *xorm.Session) {
	domains := []SysDomain{
		{
			ID:         null.StringFrom("5ba2b810-9dad-11d1-80b4-00c04fd430c1"),
			Name:       null.StringFrom("localhost"),
			FullName:   null.StringFrom("localhost"),
			AppName:    null.StringFrom(viper.GetString("app.name")),
			Theme:      null.StringFrom("default"),
			DriverName: null.StringFrom(viper.GetString("db.driver")),
			LoginUrl:   null.StringFrom("localhost"),
			Type:       null.IntFrom(0),
			Status:     null.IntFrom(1),
			IsSync:     null.IntFrom(0),
			AuthMode:   null.IntFrom(1),
			Domain:     null.StringFrom("localhost"),
			DomainUrl:  null.StringFrom("localhost"),
			ApiUrl:     null.StringFrom("http://localhost:8082"),
			Creater:    DefaultAdmin.ID,
			CreateTime: null.TimeFrom(time.Now()),
			Updater:    DefaultAdmin.ID,
			UpdateTime: null.TimeFrom(time.Now()),
			IsDelete:   null.IntFrom(0),
		},
	}
	for i := range domains {
		occ, occLoc := "?", "_localhost?"
		if ct, err := s.Where("id=?", domains[i].ID.String).Count(new(SysDomain)); ct == 0 || err != nil {
			if err != nil {
				s.Rollback()
				panic(err)
			}
			if domains[i].DriverName.String == "sqlite3" {
				occ = ".db"
				occLoc = "_localhost.db"
			}
			domains[i].DataSource = null.StringFrom(strings.Replace(viper.GetString("db.dataSource"), occ, occLoc, 1))
			if _, err := s.InsertOne(&domains[i]); err != nil {
				s.Rollback()
				panic(err)
			}
		}
	}

	if err := s.Commit(); err != nil {
		panic(err)
	}
}
