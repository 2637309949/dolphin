// Code generated by dol build. Only Generate by tools if not existed.
// source: DomainSrv.cli.go

package rpc

import (
	"context"
	"time"

	"github.com/2637309949/dolphin/platform/rpc/proto"
	"github.com/2637309949/dolphin/platform/util/trace"

	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
)

// DomainSrvClient defined
var DomainSrvClient proto.DomainSrvClient

// NewDomainSrvClient defined TODO
func NewDomainSrvClient(target string, opts ...grpc.DialOption) (proto.DomainSrvClient, error) {
	options := append(opts, []grpc.DialOption{
		grpc.WithInsecure(),
		grpc.WithBlock(),
		grpc.WithChainUnaryInterceptor(trace.RpcSrvTrace),
	}...)
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	conn, err := grpc.DialContext(ctx, target, options...)
	if err != nil {
		return nil, err
	}
	return proto.NewDomainSrvClient(conn), nil
}

func init() {
	go func() {
		time.Sleep(1 * time.Second)
		var err error
		DomainSrvClient, err = NewDomainSrvClient(viper.GetString("rpc.domain_srv"))
		if err != nil {
			logrus.Errorf("grpc rpc.domain_srv dial failed: %v", err)
		}
	}()
}
