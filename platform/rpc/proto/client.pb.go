// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ClientCond defined
type ClientCond struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientCond) Reset()         { *m = ClientCond{} }
func (m *ClientCond) String() string { return proto.CompactTextString(m) }
func (*ClientCond) ProtoMessage()    {}
func (*ClientCond) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}

func (m *ClientCond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientCond.Unmarshal(m, b)
}
func (m *ClientCond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientCond.Marshal(b, m, deterministic)
}
func (m *ClientCond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCond.Merge(m, src)
}
func (m *ClientCond) XXX_Size() int {
	return xxx_messageInfo_ClientCond.Size(m)
}
func (m *ClientCond) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCond.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCond proto.InternalMessageInfo

// ClientReply defined
type ClientReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientReply) Reset()         { *m = ClientReply{} }
func (m *ClientReply) String() string { return proto.CompactTextString(m) }
func (*ClientReply) ProtoMessage()    {}
func (*ClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}

func (m *ClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientReply.Unmarshal(m, b)
}
func (m *ClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientReply.Marshal(b, m, deterministic)
}
func (m *ClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientReply.Merge(m, src)
}
func (m *ClientReply) XXX_Size() int {
	return xxx_messageInfo_ClientReply.Size(m)
}
func (m *ClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClientReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientCond)(nil), "proto.ClientCond")
	proto.RegisterType((*ClientReply)(nil), "proto.ClientReply")
}

func init() { proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c) }

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x3c, 0x5c, 0x5c,
	0xce, 0x60, 0x61, 0xe7, 0xfc, 0xbc, 0x14, 0x25, 0x5e, 0x2e, 0x6e, 0x08, 0x2f, 0x28, 0xb5, 0x20,
	0xa7, 0xd2, 0xc8, 0x86, 0x8b, 0x13, 0xc2, 0x0d, 0x2e, 0x2a, 0x13, 0xd2, 0xe7, 0x62, 0xf1, 0xc9,
	0x2c, 0x2e, 0x11, 0x12, 0x84, 0x18, 0xa0, 0x87, 0xd0, 0x26, 0x25, 0x84, 0x22, 0x04, 0xd6, 0xab,
	0xc4, 0x90, 0xc4, 0x06, 0x16, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x24, 0x62, 0x37,
	0x78, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientSrvClient is the client API for ClientSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientSrvClient interface {
	List(ctx context.Context, in *ClientCond, opts ...grpc.CallOption) (*ClientReply, error)
}

type clientSrvClient struct {
	cc *grpc.ClientConn
}

func NewClientSrvClient(cc *grpc.ClientConn) ClientSrvClient {
	return &clientSrvClient{cc}
}

func (c *clientSrvClient) List(ctx context.Context, in *ClientCond, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := c.cc.Invoke(ctx, "/proto.ClientSrv/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientSrvServer is the server API for ClientSrv service.
type ClientSrvServer interface {
	List(context.Context, *ClientCond) (*ClientReply, error)
}

// UnimplementedClientSrvServer can be embedded to have forward compatible implementations.
type UnimplementedClientSrvServer struct {
}

func (*UnimplementedClientSrvServer) List(ctx context.Context, req *ClientCond) (*ClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterClientSrvServer(s *grpc.Server, srv ClientSrvServer) {
	s.RegisterService(&_ClientSrv_serviceDesc, srv)
}

func _ClientSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientSrv/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientSrvServer).List(ctx, req.(*ClientCond))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientSrv",
	HandlerType: (*ClientSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ClientSrv_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
