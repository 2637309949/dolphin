// Code generated by protoc-gen-go. DO NOT EDIT.
// source: domain.proto

package proto

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DomainCond defined
type DomainCond struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainCond) Reset()         { *m = DomainCond{} }
func (m *DomainCond) String() string { return proto.CompactTextString(m) }
func (*DomainCond) ProtoMessage()    {}
func (*DomainCond) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{0}
}

func (m *DomainCond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainCond.Unmarshal(m, b)
}
func (m *DomainCond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainCond.Marshal(b, m, deterministic)
}
func (m *DomainCond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainCond.Merge(m, src)
}
func (m *DomainCond) XXX_Size() int {
	return xxx_messageInfo_DomainCond.Size(m)
}
func (m *DomainCond) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainCond.DiscardUnknown(m)
}

var xxx_messageInfo_DomainCond proto.InternalMessageInfo

// DomainReply defined
type DomainReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainReply) Reset()         { *m = DomainReply{} }
func (m *DomainReply) String() string { return proto.CompactTextString(m) }
func (*DomainReply) ProtoMessage()    {}
func (*DomainReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73e6234e76dbdb84, []int{1}
}

func (m *DomainReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainReply.Unmarshal(m, b)
}
func (m *DomainReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainReply.Marshal(b, m, deterministic)
}
func (m *DomainReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainReply.Merge(m, src)
}
func (m *DomainReply) XXX_Size() int {
	return xxx_messageInfo_DomainReply.Size(m)
}
func (m *DomainReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainReply.DiscardUnknown(m)
}

var xxx_messageInfo_DomainReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DomainCond)(nil), "proto.DomainCond")
	proto.RegisterType((*DomainReply)(nil), "proto.DomainReply")
}

func init() { proto.RegisterFile("domain.proto", fileDescriptor_73e6234e76dbdb84) }

var fileDescriptor_73e6234e76dbdb84 = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xc9, 0xcf, 0x4d,
	0xcc, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x3c, 0x5c, 0x5c,
	0x2e, 0x60, 0x61, 0xe7, 0xfc, 0xbc, 0x14, 0x25, 0x5e, 0x2e, 0x6e, 0x08, 0x2f, 0x28, 0xb5, 0x20,
	0xa7, 0xd2, 0xc8, 0x86, 0x8b, 0x13, 0xc2, 0x0d, 0x2e, 0x2a, 0x13, 0xd2, 0xe7, 0x62, 0xf1, 0xc9,
	0x2c, 0x2e, 0x11, 0x12, 0x84, 0x18, 0xa0, 0x87, 0xd0, 0x26, 0x25, 0x84, 0x22, 0x04, 0xd6, 0xab,
	0xc4, 0x90, 0xc4, 0x06, 0x16, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x14, 0x0f, 0xd4, 0x7c,
	0x78, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DomainSrvClient is the client API for DomainSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainSrvClient interface {
	List(ctx context.Context, in *DomainCond, opts ...grpc.CallOption) (*DomainReply, error)
}

type domainSrvClient struct {
	cc *grpc.ClientConn
}

func NewDomainSrvClient(cc *grpc.ClientConn) DomainSrvClient {
	return &domainSrvClient{cc}
}

func (c *domainSrvClient) List(ctx context.Context, in *DomainCond, opts ...grpc.CallOption) (*DomainReply, error) {
	out := new(DomainReply)
	err := c.cc.Invoke(ctx, "/proto.DomainSrv/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainSrvServer is the server API for DomainSrv service.
type DomainSrvServer interface {
	List(context.Context, *DomainCond) (*DomainReply, error)
}

// UnimplementedDomainSrvServer can be embedded to have forward compatible implementations.
type UnimplementedDomainSrvServer struct {
}

func (*UnimplementedDomainSrvServer) List(ctx context.Context, req *DomainCond) (*DomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterDomainSrvServer(s *grpc.Server, srv DomainSrvServer) {
	s.RegisterService(&_DomainSrv_serviceDesc, srv)
}

func _DomainSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DomainSrv/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainSrvServer).List(ctx, req.(*DomainCond))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DomainSrv",
	HandlerType: (*DomainSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DomainSrv_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain.proto",
}
