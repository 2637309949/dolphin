// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package proto

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// UserCond defined
type UserCond struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCond) Reset()         { *m = UserCond{} }
func (m *UserCond) String() string { return proto.CompactTextString(m) }
func (*UserCond) ProtoMessage()    {}
func (*UserCond) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *UserCond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCond.Unmarshal(m, b)
}
func (m *UserCond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCond.Marshal(b, m, deterministic)
}
func (m *UserCond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCond.Merge(m, src)
}
func (m *UserCond) XXX_Size() int {
	return xxx_messageInfo_UserCond.Size(m)
}
func (m *UserCond) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCond.DiscardUnknown(m)
}

var xxx_messageInfo_UserCond proto.InternalMessageInfo

// UserReply defined
type UserReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReply) Reset()         { *m = UserReply{} }
func (m *UserReply) String() string { return proto.CompactTextString(m) }
func (*UserReply) ProtoMessage()    {}
func (*UserReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *UserReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReply.Unmarshal(m, b)
}
func (m *UserReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReply.Marshal(b, m, deterministic)
}
func (m *UserReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReply.Merge(m, src)
}
func (m *UserReply) XXX_Size() int {
	return xxx_messageInfo_UserReply.Size(m)
}
func (m *UserReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserCond)(nil), "proto.UserCond")
	proto.RegisterType((*UserReply)(nil), "proto.UserReply")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 99 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x5c, 0x5c, 0x1c, 0xa1, 0xc5,
	0xa9, 0x45, 0xce, 0xf9, 0x79, 0x29, 0x4a, 0xdc, 0x5c, 0x9c, 0x20, 0x76, 0x50, 0x6a, 0x41, 0x4e,
	0xa5, 0x91, 0x19, 0x17, 0x3b, 0x88, 0x13, 0x5c, 0x54, 0x26, 0xa4, 0xcd, 0xc5, 0xe2, 0x93, 0x59,
	0x5c, 0x22, 0xc4, 0x0f, 0xd1, 0xaa, 0x07, 0xd3, 0x20, 0x25, 0x80, 0x24, 0x00, 0xd6, 0xa5, 0xc4,
	0x90, 0xc4, 0x06, 0x16, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x76, 0x78, 0x26, 0xd8, 0x6c,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserSrvClient is the client API for UserSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSrvClient interface {
	List(ctx context.Context, in *UserCond, opts ...grpc.CallOption) (*UserReply, error)
}

type userSrvClient struct {
	cc *grpc.ClientConn
}

func NewUserSrvClient(cc *grpc.ClientConn) UserSrvClient {
	return &userSrvClient{cc}
}

func (c *userSrvClient) List(ctx context.Context, in *UserCond, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/proto.UserSrv/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSrvServer is the server API for UserSrv service.
type UserSrvServer interface {
	List(context.Context, *UserCond) (*UserReply, error)
}

// UnimplementedUserSrvServer can be embedded to have forward compatible implementations.
type UnimplementedUserSrvServer struct {
}

func (*UnimplementedUserSrvServer) List(ctx context.Context, req *UserCond) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterUserSrvServer(s *grpc.Server, srv UserSrvServer) {
	s.RegisterService(&_UserSrv_serviceDesc, srv)
}

func _UserSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserSrv/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).List(ctx, req.(*UserCond))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserSrv",
	HandlerType: (*UserSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserSrv_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
