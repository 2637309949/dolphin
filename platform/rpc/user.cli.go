// Code generated by dol build. Only Generate by tools if not existed.
// source: UserSrv.cli.go

package rpc

import (
	"context"
	"time"

	"github.com/2637309949/dolphin/platform/plugin"
	"github.com/2637309949/dolphin/platform/rpc/proto"

	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
)

// UserSrvClient defined
var UserSrvClient proto.UserSrvClient

func init() {
	go func() {
		time.Sleep(1 * time.Second)
		options := []grpc.DialOption{
			grpc.WithInsecure(),
			grpc.WithBlock(),
			grpc.WithChainUnaryInterceptor(plugin.RpcSrvTrace),
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		conn, err := grpc.DialContext(ctx, viper.GetString("rpc.user_srv"), options...)
		if err != nil {
			logrus.Errorf("rpc.user_srv dial %v fail %v", viper.GetString("rpc.user_srv"), err)
		} else {
			logrus.Infof("rpc.user_srv dial %v connected", viper.GetString("rpc.user_srv"))
		}
		UserSrvClient = proto.NewUserSrvClient(conn)
	}()
}
