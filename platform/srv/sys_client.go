// Code generated by dol build. Only Generate by tools if not existed.
// source: sys_client.go

package srv

import (
	"context"
	"errors"
	"time"

	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

// SysClientTODO defined srv
func SysClientTODO(ctx *gin.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	go func(ctx context.Context) {
		ticker := time.NewTicker(1 * time.Second)
		for range ticker.C {
			select {
			case <-ctx.Done():
				logrus.Infoln("child process interrupt...")
				return
			default:
				logrus.Infoln("child job...")
			}
		}
	}(cwt)
	defer cancel()
	<-cwt.Done()
	logrus.Infoln("main process exit!")
	return nil, errors.New("no implementation found")
}
