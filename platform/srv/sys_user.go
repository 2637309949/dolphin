// Code generated by dol build. Only Generate by tools if not existed.
// source: sys_user.go

package srv

import (
	"context"
	"errors"
	"fmt"
	"html/template"
	"strings"
	"time"

	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/platform/svc"
	"github.com/sirupsen/logrus"
)

type SysUser struct {
	svc.Svc
}

func NewSysUser() *SysUser {
	return &SysUser{}
}

// TODO defined srv
func (srv *SysUser) TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi <- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case <-cwt.Done():
			logrus.Infoln("child process interrupt...")
			return <-chi, cwt.Err()
		default:
			logrus.Infoln("awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}

// GetOrgsFromInheritance defined srv
func (srv *SysUser) GetOrgsFromInheritance(db *xorm.Engine, cn string) ([]string, error) {
	idst := struct {
		IDS string `xorm:"ids"`
	}{}
	_, err := db.SQL(fmt.Sprintf(`select IFNULL(GROUP_CONCAT(id), '') ids, is_delete from sys_org where is_delete=0 and inheritance like "%v" group by is_delete`, "%"+cn+"%")).Get(&idst)
	if err != nil {
		return nil, err
	}
	// if id type...
	ids := []string{}
	for _, v := range strings.Split(idst.IDS, ",") {
		ids = append(ids, fmt.Sprintf("'%v'", v))
	}
	return ids, nil
}

// GetUserRolesByUID defined
func (srv *SysUser) GetUserRolesByUID(db *xorm.Engine, ids string) ([]map[string]interface{}, error) {
	roles, err := db.SqlTemplateClient("sys_role_user.tpl", &map[string]interface{}{"uids": template.HTML(ids)}).Query().List()
	if err != nil {
		return nil, err
	}
	return roles, err
}

// GetUserOrgsByUID defined
func (srv *SysUser) GetUserOrgsByUID(db *xorm.Engine, ids string) ([]map[string]interface{}, error) {
	orgs, err := db.SqlTemplateClient("sys_user_org.tpl", &map[string]interface{}{"ne": template.HTML("<>"), "oids": template.HTML(ids)}).Query().List()
	if err != nil {
		return nil, err
	}
	return orgs, err
}
