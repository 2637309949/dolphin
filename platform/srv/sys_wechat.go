// Code generated by dol build. Only Generate by tools if not existed.
// source: sys_wechat.go

package srv

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/platform/svc"
	"github.com/2637309949/dolphin/platform/types"
	"github.com/spf13/viper"
)

// SysWechat defined TODO
type SysWechat struct {
	*svc.ServiceContext
}

// WeiXinToken defined TODO
type WeiXinToken struct {
	Errcode      int64  `json:"errcode"`
	Errmsg       string `json:"errmsg"`
	AccessToken  string `json:"access_token"`
	ExpiresIn    int64  `json:"expires_in"`
	RefreshToken string `json:"refresh_token"`
	Openid       string `json:"openid"`
	Scope        string `json:"scope"`
}

func NewSysWechat() *SysWechat {
	return &SysWechat{}
}

// SetServiceContext defined TODO
func (srv *SysWechat) SetServiceContext(svc *svc.ServiceContext) {
	srv.ServiceContext = svc
}

// WinXinBindCheck defined TODO
func (srv *SysWechat) WinXinBindCheck(ctx context.Context, platformDB *xorm.Engine, db *xorm.Engine, domain string, code string) (*types.SysUser, error) {
	wcToken := WeiXinToken{}
	userInfo := types.SysUser{}
	req := srv.Client.Get(fmt.Sprintf("https://api.weixin.qq.com/sns/oauth2/access_token?appid=%v&secret=%v&code=%v&grant_type=authorization_code", viper.GetString("wc.appid"), viper.GetString("wc.appsecret"), code))
	err := req.ToJSON(&wcToken)
	if err != nil {
		return nil, err
	}
	if wcToken.Errcode != 0 {
		return nil, errors.New(wcToken.Errmsg)
	}

	uid := []int{}
	err = db.SQL(`select user_id from sys_user_binding where is_delete !=1 and type=0 and open_id=?`, wcToken.Openid).Find(&uid)
	if err != nil {
		return nil, err
	}
	if len(uid) == 0 {
		return nil, errors.New("用户未绑定微信")
	}

	ext, err := platformDB.In("id", uid).Where("domain=? and is_delete !=1", domain).Get(&userInfo)
	if err != nil {
		return nil, err
	}
	if !ext {
		return nil, errors.New("用户未绑定微信")
	}
	return &userInfo, nil
}

// TODO defined srv
func (srv *SysWechat) TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi <- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case <-cwt.Done():
			logrus.Infoln(ctx, "child process interrupt...")
			return <-chi, cwt.Err()
		default:
			logrus.Infoln(ctx, "awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}
