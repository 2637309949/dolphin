// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package app

import (
	"github.com/2637309949/dolphin/platform/model"
	"github.com/2637309949/dolphin/platform/rpc"
	"github.com/2637309949/dolphin/platform/rpc/proto"

	"github.com/2637309949/dolphin/packages/viper"
)

// Name project
var Name = "platform"

// SysAppFun defined
type SysAppFun struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysAppFun defined
func NewSysAppFun() *SysAppFun {
	ctr := &SysAppFun{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/app/fun/add"
	ctr.Add.Handler = SysAppFunAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/app/fun/batch_add"
	ctr.BatchAdd.Handler = SysAppFunBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/app/fun/del"
	ctr.Del.Handler = SysAppFunDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/app/fun/batch_del"
	ctr.BatchDel.Handler = SysAppFunBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/app/fun/update"
	ctr.Update.Handler = SysAppFunUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/app/fun/batch_update"
	ctr.BatchUpdate.Handler = SysAppFunBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/app/fun/page"
	ctr.Page.Handler = SysAppFunPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/app/fun/tree"
	ctr.Tree.Handler = SysAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/app/fun/get"
	ctr.Get.Handler = SysAppFunGet
	return ctr
}

// SysAppFunRoutes defined
func SysAppFunRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysAppFunInstance.Add.Method, SysAppFunInstance.Add.RelativePath, Auth("token"), SysAppFunInstance.Add)
	group.Handle(SysAppFunInstance.BatchAdd.Method, SysAppFunInstance.BatchAdd.RelativePath, Auth("token"), SysAppFunInstance.BatchAdd)
	group.Handle(SysAppFunInstance.Del.Method, SysAppFunInstance.Del.RelativePath, Auth("token"), SysAppFunInstance.Del)
	group.Handle(SysAppFunInstance.BatchDel.Method, SysAppFunInstance.BatchDel.RelativePath, Auth("token"), SysAppFunInstance.BatchDel)
	group.Handle(SysAppFunInstance.Update.Method, SysAppFunInstance.Update.RelativePath, Auth("token"), SysAppFunInstance.Update)
	group.Handle(SysAppFunInstance.BatchUpdate.Method, SysAppFunInstance.BatchUpdate.RelativePath, Auth("token"), SysAppFunInstance.BatchUpdate)
	group.Handle(SysAppFunInstance.Page.Method, SysAppFunInstance.Page.RelativePath, Auth("token"), SysAppFunInstance.Page)
	group.Handle(SysAppFunInstance.Tree.Method, SysAppFunInstance.Tree.RelativePath, Auth("token"), SysAppFunInstance.Tree)
	group.Handle(SysAppFunInstance.Get.Method, SysAppFunInstance.Get.RelativePath, Auth("token"), SysAppFunInstance.Get)
}

// SysAppFunInstance defined
var SysAppFunInstance = NewSysAppFun()

// SysArea defined
type SysArea struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysArea defined
func NewSysArea() *SysArea {
	ctr := &SysArea{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/area/add"
	ctr.Add.Handler = SysAreaAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/area/batch_add"
	ctr.BatchAdd.Handler = SysAreaBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/area/del"
	ctr.Del.Handler = SysAreaDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/area/batch_del"
	ctr.BatchDel.Handler = SysAreaBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/area/update"
	ctr.Update.Handler = SysAreaUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/area/batch_update"
	ctr.BatchUpdate.Handler = SysAreaBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/area/page"
	ctr.Page.Handler = SysAreaPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/area/get"
	ctr.Get.Handler = SysAreaGet
	return ctr
}

// SysAreaRoutes defined
func SysAreaRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysAreaInstance.Add.Method, SysAreaInstance.Add.RelativePath, Auth("token"), SysAreaInstance.Add)
	group.Handle(SysAreaInstance.BatchAdd.Method, SysAreaInstance.BatchAdd.RelativePath, Auth("token"), SysAreaInstance.BatchAdd)
	group.Handle(SysAreaInstance.Del.Method, SysAreaInstance.Del.RelativePath, Auth("token"), SysAreaInstance.Del)
	group.Handle(SysAreaInstance.BatchDel.Method, SysAreaInstance.BatchDel.RelativePath, Auth("token"), SysAreaInstance.BatchDel)
	group.Handle(SysAreaInstance.Update.Method, SysAreaInstance.Update.RelativePath, Auth("token"), SysAreaInstance.Update)
	group.Handle(SysAreaInstance.BatchUpdate.Method, SysAreaInstance.BatchUpdate.RelativePath, Auth("token"), SysAreaInstance.BatchUpdate)
	group.Handle(SysAreaInstance.Page.Method, SysAreaInstance.Page.RelativePath, Auth("token"), SysAreaInstance.Page)
	group.Handle(SysAreaInstance.Get.Method, SysAreaInstance.Get.RelativePath, Auth("token"), SysAreaInstance.Get)
}

// SysAreaInstance defined
var SysAreaInstance = NewSysArea()

// SysAttachment defined
type SysAttachment struct {
	Add,
	BatchAdd,
	Upload,
	Export,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysAttachment defined
func NewSysAttachment() *SysAttachment {
	ctr := &SysAttachment{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/attachment/add"
	ctr.Add.Handler = SysAttachmentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/attachment/batch_add"
	ctr.BatchAdd.Handler = SysAttachmentBatchAdd
	ctr.Upload.Method = "POST"
	ctr.Upload.RelativePath = "/sys/attachment/upload"
	ctr.Upload.Handler = SysAttachmentUpload
	ctr.Export.Method = "GET"
	ctr.Export.RelativePath = "/sys/attachment/export"
	ctr.Export.Handler = SysAttachmentExport
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/attachment/del"
	ctr.Del.Handler = SysAttachmentDel
	ctr.BatchDel.Method = "POST"
	ctr.BatchDel.RelativePath = "/sys/attachment/batch_del"
	ctr.BatchDel.Handler = SysAttachmentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/attachment/update"
	ctr.Update.Handler = SysAttachmentUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/attachment/batch_update"
	ctr.BatchUpdate.Handler = SysAttachmentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/attachment/page"
	ctr.Page.Handler = SysAttachmentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/attachment/get"
	ctr.Get.Handler = SysAttachmentGet
	return ctr
}

// SysAttachmentRoutes defined
func SysAttachmentRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysAttachmentInstance.Add.Method, SysAttachmentInstance.Add.RelativePath, Auth("token"), SysAttachmentInstance.Add)
	group.Handle(SysAttachmentInstance.BatchAdd.Method, SysAttachmentInstance.BatchAdd.RelativePath, Auth("token"), SysAttachmentInstance.BatchAdd)
	group.Handle(SysAttachmentInstance.Upload.Method, SysAttachmentInstance.Upload.RelativePath, Auth("token"), SysAttachmentInstance.Upload)
	group.Handle(SysAttachmentInstance.Export.Method, SysAttachmentInstance.Export.RelativePath, SysAttachmentInstance.Export)
	group.Handle(SysAttachmentInstance.Del.Method, SysAttachmentInstance.Del.RelativePath, Auth("token"), SysAttachmentInstance.Del)
	group.Handle(SysAttachmentInstance.BatchDel.Method, SysAttachmentInstance.BatchDel.RelativePath, Auth("token"), SysAttachmentInstance.BatchDel)
	group.Handle(SysAttachmentInstance.Update.Method, SysAttachmentInstance.Update.RelativePath, Auth("token"), SysAttachmentInstance.Update)
	group.Handle(SysAttachmentInstance.BatchUpdate.Method, SysAttachmentInstance.BatchUpdate.RelativePath, Auth("token"), SysAttachmentInstance.BatchUpdate)
	group.Handle(SysAttachmentInstance.Page.Method, SysAttachmentInstance.Page.RelativePath, Auth("token"), SysAttachmentInstance.Page)
	group.Handle(SysAttachmentInstance.Get.Method, SysAttachmentInstance.Get.RelativePath, Auth("token"), SysAttachmentInstance.Get)
}

// SysAttachmentInstance defined
var SysAttachmentInstance = NewSysAttachment()

// SysCas defined
type SysCas struct {
	Login,
	Logout,
	Affirm,
	Authorize,
	Token,
	URL,
	Oauth2,
	Refresh,
	Check,
	Profile,
	Qrcode HandlerFunc
}

// NewSysCas defined
func NewSysCas() *SysCas {
	ctr := &SysCas{}
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/cas/login"
	ctr.Login.Handler = SysCasLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/cas/logout"
	ctr.Logout.Handler = SysCasLogout
	ctr.Affirm.Method = "POST"
	ctr.Affirm.RelativePath = "/sys/cas/affirm"
	ctr.Affirm.Handler = SysCasAffirm
	ctr.Authorize.Method = "GET"
	ctr.Authorize.RelativePath = "/sys/cas/authorize"
	ctr.Authorize.Handler = SysCasAuthorize
	ctr.Token.Method = "POST"
	ctr.Token.RelativePath = "/sys/cas/token"
	ctr.Token.Handler = SysCasToken
	ctr.URL.Method = "GET"
	ctr.URL.RelativePath = "/sys/cas/url"
	ctr.URL.Handler = SysCasURL
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/cas/oauth2"
	ctr.Oauth2.Handler = SysCasOauth2
	ctr.Refresh.Method = "GET"
	ctr.Refresh.RelativePath = "/sys/cas/refresh"
	ctr.Refresh.Handler = SysCasRefresh
	ctr.Check.Method = "GET"
	ctr.Check.RelativePath = "/sys/cas/check"
	ctr.Check.Handler = SysCasCheck
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/sys/cas/profile"
	ctr.Profile.Handler = SysCasProfile
	ctr.Qrcode.Method = "GET"
	ctr.Qrcode.RelativePath = "/sys/cas/qrcode"
	ctr.Qrcode.Handler = SysCasQrcode
	return ctr
}

// SysCasRoutes defined
func SysCasRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysCasInstance.Login.Method, SysCasInstance.Login.RelativePath, SysCasInstance.Login)
	group.Handle(SysCasInstance.Logout.Method, SysCasInstance.Logout.RelativePath, SysCasInstance.Logout)
	group.Handle(SysCasInstance.Affirm.Method, SysCasInstance.Affirm.RelativePath, SysCasInstance.Affirm)
	group.Handle(SysCasInstance.Authorize.Method, SysCasInstance.Authorize.RelativePath, SysCasInstance.Authorize)
	group.Handle(SysCasInstance.Token.Method, SysCasInstance.Token.RelativePath, SysCasInstance.Token)
	group.Handle(SysCasInstance.URL.Method, SysCasInstance.URL.RelativePath, SysCasInstance.URL)
	group.Handle(SysCasInstance.Oauth2.Method, SysCasInstance.Oauth2.RelativePath, SysCasInstance.Oauth2)
	group.Handle(SysCasInstance.Refresh.Method, SysCasInstance.Refresh.RelativePath, SysCasInstance.Refresh)
	group.Handle(SysCasInstance.Check.Method, SysCasInstance.Check.RelativePath, SysCasInstance.Check)
	group.Handle(SysCasInstance.Profile.Method, SysCasInstance.Profile.RelativePath, Auth("token"), SysCasInstance.Profile)
	group.Handle(SysCasInstance.Qrcode.Method, SysCasInstance.Qrcode.RelativePath, SysCasInstance.Qrcode)
}

// SysCasInstance defined
var SysCasInstance = NewSysCas()

// SysClient defined
type SysClient struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysClient defined
func NewSysClient() *SysClient {
	ctr := &SysClient{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/client/add"
	ctr.Add.Handler = SysClientAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/client/batch_add"
	ctr.BatchAdd.Handler = SysClientBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/client/del"
	ctr.Del.Handler = SysClientDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/client/batch_del"
	ctr.BatchDel.Handler = SysClientBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/client/update"
	ctr.Update.Handler = SysClientUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/client/batch_update"
	ctr.BatchUpdate.Handler = SysClientBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/client/page"
	ctr.Page.Handler = SysClientPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/client/get"
	ctr.Get.Handler = SysClientGet
	return ctr
}

// SysClientRoutes defined
func SysClientRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysClientInstance.Add.Method, SysClientInstance.Add.RelativePath, Auth("token"), SysClientInstance.Add)
	group.Handle(SysClientInstance.BatchAdd.Method, SysClientInstance.BatchAdd.RelativePath, Auth("token"), SysClientInstance.BatchAdd)
	group.Handle(SysClientInstance.Del.Method, SysClientInstance.Del.RelativePath, Auth("token"), SysClientInstance.Del)
	group.Handle(SysClientInstance.BatchDel.Method, SysClientInstance.BatchDel.RelativePath, Auth("token"), SysClientInstance.BatchDel)
	group.Handle(SysClientInstance.Update.Method, SysClientInstance.Update.RelativePath, Auth("token"), SysClientInstance.Update)
	group.Handle(SysClientInstance.BatchUpdate.Method, SysClientInstance.BatchUpdate.RelativePath, Auth("token"), SysClientInstance.BatchUpdate)
	group.Handle(SysClientInstance.Page.Method, SysClientInstance.Page.RelativePath, Auth("token"), SysClientInstance.Page)
	group.Handle(SysClientInstance.Get.Method, SysClientInstance.Get.RelativePath, Auth("token"), SysClientInstance.Get)
}

// SysClientInstance defined
var SysClientInstance = NewSysClient()

// SysComment defined
type SysComment struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysComment defined
func NewSysComment() *SysComment {
	ctr := &SysComment{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/comment/add"
	ctr.Add.Handler = SysCommentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/comment/batch_add"
	ctr.BatchAdd.Handler = SysCommentBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/comment/del"
	ctr.Del.Handler = SysCommentDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/comment/batch_del"
	ctr.BatchDel.Handler = SysCommentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/comment/update"
	ctr.Update.Handler = SysCommentUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/comment/batch_update"
	ctr.BatchUpdate.Handler = SysCommentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/comment/page"
	ctr.Page.Handler = SysCommentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/comment/get"
	ctr.Get.Handler = SysCommentGet
	return ctr
}

// SysCommentRoutes defined
func SysCommentRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysCommentInstance.Add.Method, SysCommentInstance.Add.RelativePath, Auth("token"), SysCommentInstance.Add)
	group.Handle(SysCommentInstance.BatchAdd.Method, SysCommentInstance.BatchAdd.RelativePath, Auth("token"), SysCommentInstance.BatchAdd)
	group.Handle(SysCommentInstance.Del.Method, SysCommentInstance.Del.RelativePath, Auth("token"), SysCommentInstance.Del)
	group.Handle(SysCommentInstance.BatchDel.Method, SysCommentInstance.BatchDel.RelativePath, Auth("token"), SysCommentInstance.BatchDel)
	group.Handle(SysCommentInstance.Update.Method, SysCommentInstance.Update.RelativePath, Auth("token"), SysCommentInstance.Update)
	group.Handle(SysCommentInstance.BatchUpdate.Method, SysCommentInstance.BatchUpdate.RelativePath, Auth("token"), SysCommentInstance.BatchUpdate)
	group.Handle(SysCommentInstance.Page.Method, SysCommentInstance.Page.RelativePath, Auth("token"), SysCommentInstance.Page)
	group.Handle(SysCommentInstance.Get.Method, SysCommentInstance.Get.RelativePath, Auth("token"), SysCommentInstance.Get)
}

// SysCommentInstance defined
var SysCommentInstance = NewSysComment()

// SysDataPermission defined
type SysDataPermission struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysDataPermission defined
func NewSysDataPermission() *SysDataPermission {
	ctr := &SysDataPermission{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/data/permission/add"
	ctr.Add.Handler = SysDataPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/data/permission/batch_add"
	ctr.BatchAdd.Handler = SysDataPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/data/permission/del"
	ctr.Del.Handler = SysDataPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/data/permission/batch_del"
	ctr.BatchDel.Handler = SysDataPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/data/permission/update"
	ctr.Update.Handler = SysDataPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/data/permission/batch_update"
	ctr.BatchUpdate.Handler = SysDataPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/data/permission/page"
	ctr.Page.Handler = SysDataPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/data/permission/get"
	ctr.Get.Handler = SysDataPermissionGet
	return ctr
}

// SysDataPermissionRoutes defined
func SysDataPermissionRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysDataPermissionInstance.Add.Method, SysDataPermissionInstance.Add.RelativePath, Auth("token"), SysDataPermissionInstance.Add)
	group.Handle(SysDataPermissionInstance.BatchAdd.Method, SysDataPermissionInstance.BatchAdd.RelativePath, Auth("token"), SysDataPermissionInstance.BatchAdd)
	group.Handle(SysDataPermissionInstance.Del.Method, SysDataPermissionInstance.Del.RelativePath, Auth("token"), SysDataPermissionInstance.Del)
	group.Handle(SysDataPermissionInstance.BatchDel.Method, SysDataPermissionInstance.BatchDel.RelativePath, Auth("token"), SysDataPermissionInstance.BatchDel)
	group.Handle(SysDataPermissionInstance.Update.Method, SysDataPermissionInstance.Update.RelativePath, Auth("token"), SysDataPermissionInstance.Update)
	group.Handle(SysDataPermissionInstance.BatchUpdate.Method, SysDataPermissionInstance.BatchUpdate.RelativePath, Auth("token"), SysDataPermissionInstance.BatchUpdate)
	group.Handle(SysDataPermissionInstance.Page.Method, SysDataPermissionInstance.Page.RelativePath, Auth("token"), SysDataPermissionInstance.Page)
	group.Handle(SysDataPermissionInstance.Get.Method, SysDataPermissionInstance.Get.RelativePath, Auth("token"), SysDataPermissionInstance.Get)
}

// SysDataPermissionInstance defined
var SysDataPermissionInstance = NewSysDataPermission()

// Debug defined
type Debug struct {
	Pprof,
	Heap,
	Goroutine,
	Allocs,
	Block,
	Threadcreate,
	Cmdline,
	Profile,
	Symbol,
	Trace,
	Mutex HandlerFunc
}

// NewDebug defined
func NewDebug() *Debug {
	ctr := &Debug{}
	ctr.Pprof.Method = "GET"
	ctr.Pprof.RelativePath = "/pprof/"
	ctr.Pprof.Handler = DebugPprof
	ctr.Heap.Method = "GET"
	ctr.Heap.RelativePath = "/pprof/heap"
	ctr.Heap.Handler = DebugHeap
	ctr.Goroutine.Method = "GET"
	ctr.Goroutine.RelativePath = "/pprof/goroutine"
	ctr.Goroutine.Handler = DebugGoroutine
	ctr.Allocs.Method = "GET"
	ctr.Allocs.RelativePath = "/pprof/allocs"
	ctr.Allocs.Handler = DebugAllocs
	ctr.Block.Method = "GET"
	ctr.Block.RelativePath = "/pprof/block"
	ctr.Block.Handler = DebugBlock
	ctr.Threadcreate.Method = "GET"
	ctr.Threadcreate.RelativePath = "/pprof/threadcreate"
	ctr.Threadcreate.Handler = DebugThreadcreate
	ctr.Cmdline.Method = "GET"
	ctr.Cmdline.RelativePath = "/pprof/cmdline"
	ctr.Cmdline.Handler = DebugCmdline
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/pprof/profile"
	ctr.Profile.Handler = DebugProfile
	ctr.Symbol.Method = "GET,POST"
	ctr.Symbol.RelativePath = "/pprof/symbol"
	ctr.Symbol.Handler = DebugSymbol
	ctr.Trace.Method = "GET"
	ctr.Trace.RelativePath = "/pprof/trace"
	ctr.Trace.Handler = DebugTrace
	ctr.Mutex.Method = "GET"
	ctr.Mutex.RelativePath = "/pprof/mutex"
	ctr.Mutex.Handler = DebugMutex
	return ctr
}

// DebugRoutes defined
func DebugRoutes(engine *Engine) {
	group := engine.Group("/debug")
	group.Handle(DebugInstance.Pprof.Method, DebugInstance.Pprof.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Pprof)
	group.Handle(DebugInstance.Heap.Method, DebugInstance.Heap.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Heap)
	group.Handle(DebugInstance.Goroutine.Method, DebugInstance.Goroutine.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Goroutine)
	group.Handle(DebugInstance.Allocs.Method, DebugInstance.Allocs.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Allocs)
	group.Handle(DebugInstance.Block.Method, DebugInstance.Block.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Block)
	group.Handle(DebugInstance.Threadcreate.Method, DebugInstance.Threadcreate.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Threadcreate)
	group.Handle(DebugInstance.Cmdline.Method, DebugInstance.Cmdline.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Cmdline)
	group.Handle(DebugInstance.Profile.Method, DebugInstance.Profile.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Profile)
	group.Handle(DebugInstance.Symbol.Method, DebugInstance.Symbol.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Symbol)
	group.Handle(DebugInstance.Trace.Method, DebugInstance.Trace.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Trace)
	group.Handle(DebugInstance.Mutex.Method, DebugInstance.Mutex.RelativePath, Auth("token"), Roles("X8e6D3y60K"), DebugInstance.Mutex)
}

// DebugInstance defined
var DebugInstance = NewDebug()

// SysDingtalk defined
type SysDingtalk struct {
	Oauth2 HandlerFunc
}

// NewSysDingtalk defined
func NewSysDingtalk() *SysDingtalk {
	ctr := &SysDingtalk{}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/dingtalk/oauth2"
	ctr.Oauth2.Handler = SysDingtalkOauth2
	return ctr
}

// SysDingtalkRoutes defined
func SysDingtalkRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysDingtalkInstance.Oauth2.Method, SysDingtalkInstance.Oauth2.RelativePath, SysDingtalkInstance.Oauth2)
}

// SysDingtalkInstance defined
var SysDingtalkInstance = NewSysDingtalk()

// SysDomain defined
type SysDomain struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysDomain defined
func NewSysDomain() *SysDomain {
	ctr := &SysDomain{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/domain/add"
	ctr.Add.Handler = SysDomainAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/domain/batch_add"
	ctr.BatchAdd.Handler = SysDomainBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/domain/del"
	ctr.Del.Handler = SysDomainDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/domain/batch_del"
	ctr.BatchDel.Handler = SysDomainBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/domain/update"
	ctr.Update.Handler = SysDomainUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/domain/batch_update"
	ctr.BatchUpdate.Handler = SysDomainBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/domain/page"
	ctr.Page.Handler = SysDomainPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/domain/get"
	ctr.Get.Handler = SysDomainGet
	return ctr
}

// SysDomainRoutes defined
func SysDomainRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysDomainInstance.Add.Method, SysDomainInstance.Add.RelativePath, Auth("token"), SysDomainInstance.Add)
	group.Handle(SysDomainInstance.BatchAdd.Method, SysDomainInstance.BatchAdd.RelativePath, Auth("token"), SysDomainInstance.BatchAdd)
	group.Handle(SysDomainInstance.Del.Method, SysDomainInstance.Del.RelativePath, Auth("token"), SysDomainInstance.Del)
	group.Handle(SysDomainInstance.BatchDel.Method, SysDomainInstance.BatchDel.RelativePath, Auth("token"), SysDomainInstance.BatchDel)
	group.Handle(SysDomainInstance.Update.Method, SysDomainInstance.Update.RelativePath, Auth("token"), SysDomainInstance.Update)
	group.Handle(SysDomainInstance.BatchUpdate.Method, SysDomainInstance.BatchUpdate.RelativePath, Auth("token"), SysDomainInstance.BatchUpdate)
	group.Handle(SysDomainInstance.Page.Method, SysDomainInstance.Page.RelativePath, Auth("token"), SysDomainInstance.Page)
	group.Handle(SysDomainInstance.Get.Method, SysDomainInstance.Get.RelativePath, Auth("token"), SysDomainInstance.Get)
}

// SysDomainInstance defined
var SysDomainInstance = NewSysDomain()

// SysMenu defined
type SysMenu struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Sidebar,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysMenu defined
func NewSysMenu() *SysMenu {
	ctr := &SysMenu{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/menu/add"
	ctr.Add.Handler = SysMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/menu/batch_add"
	ctr.BatchAdd.Handler = SysMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/menu/del"
	ctr.Del.Handler = SysMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/menu/batch_del"
	ctr.BatchDel.Handler = SysMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/menu/update"
	ctr.Update.Handler = SysMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/menu/batch_update"
	ctr.BatchUpdate.Handler = SysMenuBatchUpdate
	ctr.Sidebar.Method = "GET"
	ctr.Sidebar.RelativePath = "/sys/menu/sidebar"
	ctr.Sidebar.Handler = SysMenuSidebar
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/menu/page"
	ctr.Page.Handler = SysMenuPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/menu/tree"
	ctr.Tree.Handler = SysMenuTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/menu/get"
	ctr.Get.Handler = SysMenuGet
	return ctr
}

// SysMenuRoutes defined
func SysMenuRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysMenuInstance.Add.Method, SysMenuInstance.Add.RelativePath, Auth("token"), SysMenuInstance.Add)
	group.Handle(SysMenuInstance.BatchAdd.Method, SysMenuInstance.BatchAdd.RelativePath, Auth("token"), SysMenuInstance.BatchAdd)
	group.Handle(SysMenuInstance.Del.Method, SysMenuInstance.Del.RelativePath, Auth("token"), SysMenuInstance.Del)
	group.Handle(SysMenuInstance.BatchDel.Method, SysMenuInstance.BatchDel.RelativePath, Auth("token"), SysMenuInstance.BatchDel)
	group.Handle(SysMenuInstance.Update.Method, SysMenuInstance.Update.RelativePath, Auth("token"), SysMenuInstance.Update)
	group.Handle(SysMenuInstance.BatchUpdate.Method, SysMenuInstance.BatchUpdate.RelativePath, Auth("token"), SysMenuInstance.BatchUpdate)
	group.Handle(SysMenuInstance.Sidebar.Method, SysMenuInstance.Sidebar.RelativePath, Auth("token"), SysMenuInstance.Sidebar)
	group.Handle(SysMenuInstance.Page.Method, SysMenuInstance.Page.RelativePath, Auth("token"), SysMenuInstance.Page)
	group.Handle(SysMenuInstance.Tree.Method, SysMenuInstance.Tree.RelativePath, Auth("token"), SysMenuInstance.Tree)
	group.Handle(SysMenuInstance.Get.Method, SysMenuInstance.Get.RelativePath, Auth("token"), SysMenuInstance.Get)
}

// SysMenuInstance defined
var SysMenuInstance = NewSysMenu()

// SysNotification defined
type SysNotification struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysNotification defined
func NewSysNotification() *SysNotification {
	ctr := &SysNotification{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/notification/add"
	ctr.Add.Handler = SysNotificationAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/notification/batch_add"
	ctr.BatchAdd.Handler = SysNotificationBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/notification/del"
	ctr.Del.Handler = SysNotificationDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/notification/batch_del"
	ctr.BatchDel.Handler = SysNotificationBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/notification/update"
	ctr.Update.Handler = SysNotificationUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/notification/batch_update"
	ctr.BatchUpdate.Handler = SysNotificationBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/notification/page"
	ctr.Page.Handler = SysNotificationPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/notification/get"
	ctr.Get.Handler = SysNotificationGet
	return ctr
}

// SysNotificationRoutes defined
func SysNotificationRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysNotificationInstance.Add.Method, SysNotificationInstance.Add.RelativePath, Auth("token"), SysNotificationInstance.Add)
	group.Handle(SysNotificationInstance.BatchAdd.Method, SysNotificationInstance.BatchAdd.RelativePath, Auth("token"), SysNotificationInstance.BatchAdd)
	group.Handle(SysNotificationInstance.Del.Method, SysNotificationInstance.Del.RelativePath, Auth("token"), SysNotificationInstance.Del)
	group.Handle(SysNotificationInstance.BatchDel.Method, SysNotificationInstance.BatchDel.RelativePath, Auth("token"), SysNotificationInstance.BatchDel)
	group.Handle(SysNotificationInstance.Update.Method, SysNotificationInstance.Update.RelativePath, Auth("token"), SysNotificationInstance.Update)
	group.Handle(SysNotificationInstance.BatchUpdate.Method, SysNotificationInstance.BatchUpdate.RelativePath, Auth("token"), SysNotificationInstance.BatchUpdate)
	group.Handle(SysNotificationInstance.Page.Method, SysNotificationInstance.Page.RelativePath, Auth("token"), SysNotificationInstance.Page)
	group.Handle(SysNotificationInstance.Get.Method, SysNotificationInstance.Get.RelativePath, Auth("token"), SysNotificationInstance.Get)
}

// SysNotificationInstance defined
var SysNotificationInstance = NewSysNotification()

// SysOptionset defined
type SysOptionset struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysOptionset defined
func NewSysOptionset() *SysOptionset {
	ctr := &SysOptionset{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/optionset/add"
	ctr.Add.Handler = SysOptionsetAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/optionset/batch_add"
	ctr.BatchAdd.Handler = SysOptionsetBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/optionset/del"
	ctr.Del.Handler = SysOptionsetDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/optionset/batch_del"
	ctr.BatchDel.Handler = SysOptionsetBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/optionset/update"
	ctr.Update.Handler = SysOptionsetUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/optionset/batch_update"
	ctr.BatchUpdate.Handler = SysOptionsetBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/optionset/page"
	ctr.Page.Handler = SysOptionsetPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/optionset/get"
	ctr.Get.Handler = SysOptionsetGet
	return ctr
}

// SysOptionsetRoutes defined
func SysOptionsetRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysOptionsetInstance.Add.Method, SysOptionsetInstance.Add.RelativePath, Auth("token"), SysOptionsetInstance.Add)
	group.Handle(SysOptionsetInstance.BatchAdd.Method, SysOptionsetInstance.BatchAdd.RelativePath, Auth("token"), SysOptionsetInstance.BatchAdd)
	group.Handle(SysOptionsetInstance.Del.Method, SysOptionsetInstance.Del.RelativePath, Auth("token"), SysOptionsetInstance.Del)
	group.Handle(SysOptionsetInstance.BatchDel.Method, SysOptionsetInstance.BatchDel.RelativePath, Auth("token"), SysOptionsetInstance.BatchDel)
	group.Handle(SysOptionsetInstance.Update.Method, SysOptionsetInstance.Update.RelativePath, Auth("token"), SysOptionsetInstance.Update)
	group.Handle(SysOptionsetInstance.BatchUpdate.Method, SysOptionsetInstance.BatchUpdate.RelativePath, Auth("token"), SysOptionsetInstance.BatchUpdate)
	group.Handle(SysOptionsetInstance.Page.Method, SysOptionsetInstance.Page.RelativePath, Auth("token"), SysOptionsetInstance.Page)
	group.Handle(SysOptionsetInstance.Get.Method, SysOptionsetInstance.Get.RelativePath, Auth("token"), SysOptionsetInstance.Get)
}

// SysOptionsetInstance defined
var SysOptionsetInstance = NewSysOptionset()

// SysOrg defined
type SysOrg struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysOrg defined
func NewSysOrg() *SysOrg {
	ctr := &SysOrg{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/org/add"
	ctr.Add.Handler = SysOrgAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/org/batch_add"
	ctr.BatchAdd.Handler = SysOrgBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/org/del"
	ctr.Del.Handler = SysOrgDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/org/batch_del"
	ctr.BatchDel.Handler = SysOrgBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/org/update"
	ctr.Update.Handler = SysOrgUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/org/batch_update"
	ctr.BatchUpdate.Handler = SysOrgBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/org/page"
	ctr.Page.Handler = SysOrgPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/org/tree"
	ctr.Tree.Handler = SysOrgTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/org/get"
	ctr.Get.Handler = SysOrgGet
	return ctr
}

// SysOrgRoutes defined
func SysOrgRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysOrgInstance.Add.Method, SysOrgInstance.Add.RelativePath, Auth("token"), SysOrgInstance.Add)
	group.Handle(SysOrgInstance.BatchAdd.Method, SysOrgInstance.BatchAdd.RelativePath, Auth("token"), SysOrgInstance.BatchAdd)
	group.Handle(SysOrgInstance.Del.Method, SysOrgInstance.Del.RelativePath, Auth("token"), SysOrgInstance.Del)
	group.Handle(SysOrgInstance.BatchDel.Method, SysOrgInstance.BatchDel.RelativePath, Auth("token"), SysOrgInstance.BatchDel)
	group.Handle(SysOrgInstance.Update.Method, SysOrgInstance.Update.RelativePath, Auth("token"), SysOrgInstance.Update)
	group.Handle(SysOrgInstance.BatchUpdate.Method, SysOrgInstance.BatchUpdate.RelativePath, Auth("token"), SysOrgInstance.BatchUpdate)
	group.Handle(SysOrgInstance.Page.Method, SysOrgInstance.Page.RelativePath, Auth("token"), SysOrgInstance.Page)
	group.Handle(SysOrgInstance.Tree.Method, SysOrgInstance.Tree.RelativePath, Auth("token"), SysOrgInstance.Tree)
	group.Handle(SysOrgInstance.Get.Method, SysOrgInstance.Get.RelativePath, Auth("token"), SysOrgInstance.Get)
}

// SysOrgInstance defined
var SysOrgInstance = NewSysOrg()

// SysPermission defined
type SysPermission struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysPermission defined
func NewSysPermission() *SysPermission {
	ctr := &SysPermission{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/permission/add"
	ctr.Add.Handler = SysPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/permission/batch_add"
	ctr.BatchAdd.Handler = SysPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/permission/del"
	ctr.Del.Handler = SysPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/permission/batch_del"
	ctr.BatchDel.Handler = SysPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/permission/update"
	ctr.Update.Handler = SysPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/permission/batch_update"
	ctr.BatchUpdate.Handler = SysPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/permission/page"
	ctr.Page.Handler = SysPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/permission/get"
	ctr.Get.Handler = SysPermissionGet
	return ctr
}

// SysPermissionRoutes defined
func SysPermissionRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysPermissionInstance.Add.Method, SysPermissionInstance.Add.RelativePath, Auth("token"), SysPermissionInstance.Add)
	group.Handle(SysPermissionInstance.BatchAdd.Method, SysPermissionInstance.BatchAdd.RelativePath, Auth("token"), SysPermissionInstance.BatchAdd)
	group.Handle(SysPermissionInstance.Del.Method, SysPermissionInstance.Del.RelativePath, Auth("token"), SysPermissionInstance.Del)
	group.Handle(SysPermissionInstance.BatchDel.Method, SysPermissionInstance.BatchDel.RelativePath, Auth("token"), SysPermissionInstance.BatchDel)
	group.Handle(SysPermissionInstance.Update.Method, SysPermissionInstance.Update.RelativePath, Auth("token"), SysPermissionInstance.Update)
	group.Handle(SysPermissionInstance.BatchUpdate.Method, SysPermissionInstance.BatchUpdate.RelativePath, Auth("token"), SysPermissionInstance.BatchUpdate)
	group.Handle(SysPermissionInstance.Page.Method, SysPermissionInstance.Page.RelativePath, Auth("token"), SysPermissionInstance.Page)
	group.Handle(SysPermissionInstance.Get.Method, SysPermissionInstance.Get.RelativePath, Auth("token"), SysPermissionInstance.Get)
}

// SysPermissionInstance defined
var SysPermissionInstance = NewSysPermission()

// SysRole defined
type SysRole struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	RoleMenuTree,
	RoleAppFunTree,
	Get HandlerFunc
}

// NewSysRole defined
func NewSysRole() *SysRole {
	ctr := &SysRole{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/add"
	ctr.Add.Handler = SysRoleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/batch_add"
	ctr.BatchAdd.Handler = SysRoleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/del"
	ctr.Del.Handler = SysRoleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/batch_del"
	ctr.BatchDel.Handler = SysRoleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/update"
	ctr.Update.Handler = SysRoleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/role/batch_update"
	ctr.BatchUpdate.Handler = SysRoleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/page"
	ctr.Page.Handler = SysRolePage
	ctr.RoleMenuTree.Method = "GET"
	ctr.RoleMenuTree.RelativePath = "/sys/role/role_menu_tree"
	ctr.RoleMenuTree.Handler = SysRoleRoleMenuTree
	ctr.RoleAppFunTree.Method = "GET"
	ctr.RoleAppFunTree.RelativePath = "/sys/role/role_app_fun_tree"
	ctr.RoleAppFunTree.Handler = SysRoleRoleAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/get"
	ctr.Get.Handler = SysRoleGet
	return ctr
}

// SysRoleRoutes defined
func SysRoleRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysRoleInstance.Add.Method, SysRoleInstance.Add.RelativePath, Auth("token"), SysRoleInstance.Add)
	group.Handle(SysRoleInstance.BatchAdd.Method, SysRoleInstance.BatchAdd.RelativePath, Auth("token"), SysRoleInstance.BatchAdd)
	group.Handle(SysRoleInstance.Del.Method, SysRoleInstance.Del.RelativePath, Auth("token"), SysRoleInstance.Del)
	group.Handle(SysRoleInstance.BatchDel.Method, SysRoleInstance.BatchDel.RelativePath, Auth("token"), SysRoleInstance.BatchDel)
	group.Handle(SysRoleInstance.Update.Method, SysRoleInstance.Update.RelativePath, Auth("token"), SysRoleInstance.Update)
	group.Handle(SysRoleInstance.BatchUpdate.Method, SysRoleInstance.BatchUpdate.RelativePath, Auth("token"), SysRoleInstance.BatchUpdate)
	group.Handle(SysRoleInstance.Page.Method, SysRoleInstance.Page.RelativePath, Auth("token"), SysRoleInstance.Page)
	group.Handle(SysRoleInstance.RoleMenuTree.Method, SysRoleInstance.RoleMenuTree.RelativePath, Auth("token"), SysRoleInstance.RoleMenuTree)
	group.Handle(SysRoleInstance.RoleAppFunTree.Method, SysRoleInstance.RoleAppFunTree.RelativePath, Auth("token"), SysRoleInstance.RoleAppFunTree)
	group.Handle(SysRoleInstance.Get.Method, SysRoleInstance.Get.RelativePath, Auth("token"), SysRoleInstance.Get)
}

// SysRoleInstance defined
var SysRoleInstance = NewSysRole()

// SysRoleMenu defined
type SysRoleMenu struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysRoleMenu defined
func NewSysRoleMenu() *SysRoleMenu {
	ctr := &SysRoleMenu{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/menu/add"
	ctr.Add.Handler = SysRoleMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/menu/batch_add"
	ctr.BatchAdd.Handler = SysRoleMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/menu/del"
	ctr.Del.Handler = SysRoleMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/menu/batch_del"
	ctr.BatchDel.Handler = SysRoleMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/menu/update"
	ctr.Update.Handler = SysRoleMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/role/menu/batch_update"
	ctr.BatchUpdate.Handler = SysRoleMenuBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/menu/page"
	ctr.Page.Handler = SysRoleMenuPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/menu/get"
	ctr.Get.Handler = SysRoleMenuGet
	return ctr
}

// SysRoleMenuRoutes defined
func SysRoleMenuRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysRoleMenuInstance.Add.Method, SysRoleMenuInstance.Add.RelativePath, Auth("token"), SysRoleMenuInstance.Add)
	group.Handle(SysRoleMenuInstance.BatchAdd.Method, SysRoleMenuInstance.BatchAdd.RelativePath, Auth("token"), SysRoleMenuInstance.BatchAdd)
	group.Handle(SysRoleMenuInstance.Del.Method, SysRoleMenuInstance.Del.RelativePath, Auth("token"), SysRoleMenuInstance.Del)
	group.Handle(SysRoleMenuInstance.BatchDel.Method, SysRoleMenuInstance.BatchDel.RelativePath, Auth("token"), SysRoleMenuInstance.BatchDel)
	group.Handle(SysRoleMenuInstance.Update.Method, SysRoleMenuInstance.Update.RelativePath, Auth("token"), SysRoleMenuInstance.Update)
	group.Handle(SysRoleMenuInstance.BatchUpdate.Method, SysRoleMenuInstance.BatchUpdate.RelativePath, Auth("token"), SysRoleMenuInstance.BatchUpdate)
	group.Handle(SysRoleMenuInstance.Page.Method, SysRoleMenuInstance.Page.RelativePath, Auth("token"), SysRoleMenuInstance.Page)
	group.Handle(SysRoleMenuInstance.Get.Method, SysRoleMenuInstance.Get.RelativePath, Auth("token"), SysRoleMenuInstance.Get)
}

// SysRoleMenuInstance defined
var SysRoleMenuInstance = NewSysRoleMenu()

// SysSchedule defined
type SysSchedule struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysSchedule defined
func NewSysSchedule() *SysSchedule {
	ctr := &SysSchedule{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/schedule/add"
	ctr.Add.Handler = SysScheduleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/schedule/batch_add"
	ctr.BatchAdd.Handler = SysScheduleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/schedule/del"
	ctr.Del.Handler = SysScheduleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/schedule/batch_del"
	ctr.BatchDel.Handler = SysScheduleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/schedule/update"
	ctr.Update.Handler = SysScheduleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/schedule/batch_update"
	ctr.BatchUpdate.Handler = SysScheduleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/page"
	ctr.Page.Handler = SysSchedulePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/schedule/get"
	ctr.Get.Handler = SysScheduleGet
	return ctr
}

// SysScheduleRoutes defined
func SysScheduleRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysScheduleInstance.Add.Method, SysScheduleInstance.Add.RelativePath, Auth("token"), SysScheduleInstance.Add)
	group.Handle(SysScheduleInstance.BatchAdd.Method, SysScheduleInstance.BatchAdd.RelativePath, Auth("token"), SysScheduleInstance.BatchAdd)
	group.Handle(SysScheduleInstance.Del.Method, SysScheduleInstance.Del.RelativePath, Auth("token"), SysScheduleInstance.Del)
	group.Handle(SysScheduleInstance.BatchDel.Method, SysScheduleInstance.BatchDel.RelativePath, Auth("token"), SysScheduleInstance.BatchDel)
	group.Handle(SysScheduleInstance.Update.Method, SysScheduleInstance.Update.RelativePath, Auth("token"), SysScheduleInstance.Update)
	group.Handle(SysScheduleInstance.BatchUpdate.Method, SysScheduleInstance.BatchUpdate.RelativePath, Auth("token"), SysScheduleInstance.BatchUpdate)
	group.Handle(SysScheduleInstance.Page.Method, SysScheduleInstance.Page.RelativePath, Auth("token"), SysScheduleInstance.Page)
	group.Handle(SysScheduleInstance.Get.Method, SysScheduleInstance.Get.RelativePath, Auth("token"), SysScheduleInstance.Get)
}

// SysScheduleInstance defined
var SysScheduleInstance = NewSysSchedule()

// SysScheduleHistory defined
type SysScheduleHistory struct {
	Page HandlerFunc
}

// NewSysScheduleHistory defined
func NewSysScheduleHistory() *SysScheduleHistory {
	ctr := &SysScheduleHistory{}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/history/page"
	ctr.Page.Handler = SysScheduleHistoryPage
	return ctr
}

// SysScheduleHistoryRoutes defined
func SysScheduleHistoryRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysScheduleHistoryInstance.Page.Method, SysScheduleHistoryInstance.Page.RelativePath, Auth("token"), SysScheduleHistoryInstance.Page)
}

// SysScheduleHistoryInstance defined
var SysScheduleHistoryInstance = NewSysScheduleHistory()

// SysScheduling defined
type SysScheduling struct {
	Add,
	Del,
	Update,
	Page,
	Get HandlerFunc
}

// NewSysScheduling defined
func NewSysScheduling() *SysScheduling {
	ctr := &SysScheduling{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/scheduling/add"
	ctr.Add.Handler = SysSchedulingAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/scheduling/del"
	ctr.Del.Handler = SysSchedulingDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/scheduling/update"
	ctr.Update.Handler = SysSchedulingUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/scheduling/page"
	ctr.Page.Handler = SysSchedulingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/scheduling/get"
	ctr.Get.Handler = SysSchedulingGet
	return ctr
}

// SysSchedulingRoutes defined
func SysSchedulingRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysSchedulingInstance.Add.Method, SysSchedulingInstance.Add.RelativePath, Auth("token"), SysSchedulingInstance.Add)
	group.Handle(SysSchedulingInstance.Del.Method, SysSchedulingInstance.Del.RelativePath, Auth("token"), SysSchedulingInstance.Del)
	group.Handle(SysSchedulingInstance.Update.Method, SysSchedulingInstance.Update.RelativePath, Auth("token"), SysSchedulingInstance.Update)
	group.Handle(SysSchedulingInstance.Page.Method, SysSchedulingInstance.Page.RelativePath, Auth("token"), SysSchedulingInstance.Page)
	group.Handle(SysSchedulingInstance.Get.Method, SysSchedulingInstance.Get.RelativePath, Auth("token"), SysSchedulingInstance.Get)
}

// SysSchedulingInstance defined
var SysSchedulingInstance = NewSysScheduling()

// SysSetting defined
type SysSetting struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysSetting defined
func NewSysSetting() *SysSetting {
	ctr := &SysSetting{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/setting/add"
	ctr.Add.Handler = SysSettingAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/setting/batch_add"
	ctr.BatchAdd.Handler = SysSettingBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/setting/del"
	ctr.Del.Handler = SysSettingDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/setting/batch_del"
	ctr.BatchDel.Handler = SysSettingBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/setting/update"
	ctr.Update.Handler = SysSettingUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/setting/batch_update"
	ctr.BatchUpdate.Handler = SysSettingBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/setting/page"
	ctr.Page.Handler = SysSettingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/setting/get"
	ctr.Get.Handler = SysSettingGet
	return ctr
}

// SysSettingRoutes defined
func SysSettingRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysSettingInstance.Add.Method, SysSettingInstance.Add.RelativePath, Auth("token"), SysSettingInstance.Add)
	group.Handle(SysSettingInstance.BatchAdd.Method, SysSettingInstance.BatchAdd.RelativePath, Auth("token"), SysSettingInstance.BatchAdd)
	group.Handle(SysSettingInstance.Del.Method, SysSettingInstance.Del.RelativePath, Auth("token"), SysSettingInstance.Del)
	group.Handle(SysSettingInstance.BatchDel.Method, SysSettingInstance.BatchDel.RelativePath, Auth("token"), SysSettingInstance.BatchDel)
	group.Handle(SysSettingInstance.Update.Method, SysSettingInstance.Update.RelativePath, Auth("token"), SysSettingInstance.Update)
	group.Handle(SysSettingInstance.BatchUpdate.Method, SysSettingInstance.BatchUpdate.RelativePath, Auth("token"), SysSettingInstance.BatchUpdate)
	group.Handle(SysSettingInstance.Page.Method, SysSettingInstance.Page.RelativePath, Auth("token"), SysSettingInstance.Page)
	group.Handle(SysSettingInstance.Get.Method, SysSettingInstance.Get.RelativePath, Auth("token"), SysSettingInstance.Get)
}

// SysSettingInstance defined
var SysSettingInstance = NewSysSetting()

// SysTable defined
type SysTable struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTable defined
func NewSysTable() *SysTable {
	ctr := &SysTable{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/add"
	ctr.Add.Handler = SysTableAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/batch_add"
	ctr.BatchAdd.Handler = SysTableBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/del"
	ctr.Del.Handler = SysTableDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/batch_del"
	ctr.BatchDel.Handler = SysTableBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/update"
	ctr.Update.Handler = SysTableUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/batch_update"
	ctr.BatchUpdate.Handler = SysTableBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/page"
	ctr.Page.Handler = SysTablePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/get"
	ctr.Get.Handler = SysTableGet
	return ctr
}

// SysTableRoutes defined
func SysTableRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysTableInstance.Add.Method, SysTableInstance.Add.RelativePath, Auth("token"), SysTableInstance.Add)
	group.Handle(SysTableInstance.BatchAdd.Method, SysTableInstance.BatchAdd.RelativePath, Auth("token"), SysTableInstance.BatchAdd)
	group.Handle(SysTableInstance.Del.Method, SysTableInstance.Del.RelativePath, Auth("token"), SysTableInstance.Del)
	group.Handle(SysTableInstance.BatchDel.Method, SysTableInstance.BatchDel.RelativePath, Auth("token"), SysTableInstance.BatchDel)
	group.Handle(SysTableInstance.Update.Method, SysTableInstance.Update.RelativePath, Auth("token"), SysTableInstance.Update)
	group.Handle(SysTableInstance.BatchUpdate.Method, SysTableInstance.BatchUpdate.RelativePath, Auth("token"), SysTableInstance.BatchUpdate)
	group.Handle(SysTableInstance.Page.Method, SysTableInstance.Page.RelativePath, Auth("token"), SysTableInstance.Page)
	group.Handle(SysTableInstance.Get.Method, SysTableInstance.Get.RelativePath, Auth("token"), SysTableInstance.Get)
}

// SysTableInstance defined
var SysTableInstance = NewSysTable()

// SysTableColumn defined
type SysTableColumn struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTableColumn defined
func NewSysTableColumn() *SysTableColumn {
	ctr := &SysTableColumn{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/column/add"
	ctr.Add.Handler = SysTableColumnAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/column/batch_add"
	ctr.BatchAdd.Handler = SysTableColumnBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/column/del"
	ctr.Del.Handler = SysTableColumnDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/column/batch_del"
	ctr.BatchDel.Handler = SysTableColumnBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/column/update"
	ctr.Update.Handler = SysTableColumnUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/column/batch_update"
	ctr.BatchUpdate.Handler = SysTableColumnBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/column/page"
	ctr.Page.Handler = SysTableColumnPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/column/get"
	ctr.Get.Handler = SysTableColumnGet
	return ctr
}

// SysTableColumnRoutes defined
func SysTableColumnRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysTableColumnInstance.Add.Method, SysTableColumnInstance.Add.RelativePath, Auth("token"), SysTableColumnInstance.Add)
	group.Handle(SysTableColumnInstance.BatchAdd.Method, SysTableColumnInstance.BatchAdd.RelativePath, Auth("token"), SysTableColumnInstance.BatchAdd)
	group.Handle(SysTableColumnInstance.Del.Method, SysTableColumnInstance.Del.RelativePath, Auth("token"), SysTableColumnInstance.Del)
	group.Handle(SysTableColumnInstance.BatchDel.Method, SysTableColumnInstance.BatchDel.RelativePath, Auth("token"), SysTableColumnInstance.BatchDel)
	group.Handle(SysTableColumnInstance.Update.Method, SysTableColumnInstance.Update.RelativePath, Auth("token"), SysTableColumnInstance.Update)
	group.Handle(SysTableColumnInstance.BatchUpdate.Method, SysTableColumnInstance.BatchUpdate.RelativePath, Auth("token"), SysTableColumnInstance.BatchUpdate)
	group.Handle(SysTableColumnInstance.Page.Method, SysTableColumnInstance.Page.RelativePath, Auth("token"), SysTableColumnInstance.Page)
	group.Handle(SysTableColumnInstance.Get.Method, SysTableColumnInstance.Get.RelativePath, Auth("token"), SysTableColumnInstance.Get)
}

// SysTableColumnInstance defined
var SysTableColumnInstance = NewSysTableColumn()

// SysTag defined
type SysTag struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTag defined
func NewSysTag() *SysTag {
	ctr := &SysTag{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/add"
	ctr.Add.Handler = SysTagAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/batch_add"
	ctr.BatchAdd.Handler = SysTagBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/del"
	ctr.Del.Handler = SysTagDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/batch_del"
	ctr.BatchDel.Handler = SysTagBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/update"
	ctr.Update.Handler = SysTagUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/batch_update"
	ctr.BatchUpdate.Handler = SysTagBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/page"
	ctr.Page.Handler = SysTagPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/get"
	ctr.Get.Handler = SysTagGet
	return ctr
}

// SysTagRoutes defined
func SysTagRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysTagInstance.Add.Method, SysTagInstance.Add.RelativePath, Auth("token"), SysTagInstance.Add)
	group.Handle(SysTagInstance.BatchAdd.Method, SysTagInstance.BatchAdd.RelativePath, Auth("token"), SysTagInstance.BatchAdd)
	group.Handle(SysTagInstance.Del.Method, SysTagInstance.Del.RelativePath, Auth("token"), SysTagInstance.Del)
	group.Handle(SysTagInstance.BatchDel.Method, SysTagInstance.BatchDel.RelativePath, Auth("token"), SysTagInstance.BatchDel)
	group.Handle(SysTagInstance.Update.Method, SysTagInstance.Update.RelativePath, Auth("token"), SysTagInstance.Update)
	group.Handle(SysTagInstance.BatchUpdate.Method, SysTagInstance.BatchUpdate.RelativePath, Auth("token"), SysTagInstance.BatchUpdate)
	group.Handle(SysTagInstance.Page.Method, SysTagInstance.Page.RelativePath, Auth("token"), SysTagInstance.Page)
	group.Handle(SysTagInstance.Get.Method, SysTagInstance.Get.RelativePath, Auth("token"), SysTagInstance.Get)
}

// SysTagInstance defined
var SysTagInstance = NewSysTag()

// SysTagGroup defined
type SysTagGroup struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTagGroup defined
func NewSysTagGroup() *SysTagGroup {
	ctr := &SysTagGroup{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/group/add"
	ctr.Add.Handler = SysTagGroupAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/group/batch_add"
	ctr.BatchAdd.Handler = SysTagGroupBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/group/del"
	ctr.Del.Handler = SysTagGroupDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/group/batch_del"
	ctr.BatchDel.Handler = SysTagGroupBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/group/update"
	ctr.Update.Handler = SysTagGroupUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/group/batch_update"
	ctr.BatchUpdate.Handler = SysTagGroupBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/group/page"
	ctr.Page.Handler = SysTagGroupPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/group/get"
	ctr.Get.Handler = SysTagGroupGet
	return ctr
}

// SysTagGroupRoutes defined
func SysTagGroupRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysTagGroupInstance.Add.Method, SysTagGroupInstance.Add.RelativePath, Auth("token"), SysTagGroupInstance.Add)
	group.Handle(SysTagGroupInstance.BatchAdd.Method, SysTagGroupInstance.BatchAdd.RelativePath, Auth("token"), SysTagGroupInstance.BatchAdd)
	group.Handle(SysTagGroupInstance.Del.Method, SysTagGroupInstance.Del.RelativePath, Auth("token"), SysTagGroupInstance.Del)
	group.Handle(SysTagGroupInstance.BatchDel.Method, SysTagGroupInstance.BatchDel.RelativePath, Auth("token"), SysTagGroupInstance.BatchDel)
	group.Handle(SysTagGroupInstance.Update.Method, SysTagGroupInstance.Update.RelativePath, Auth("token"), SysTagGroupInstance.Update)
	group.Handle(SysTagGroupInstance.BatchUpdate.Method, SysTagGroupInstance.BatchUpdate.RelativePath, Auth("token"), SysTagGroupInstance.BatchUpdate)
	group.Handle(SysTagGroupInstance.Page.Method, SysTagGroupInstance.Page.RelativePath, Auth("token"), SysTagGroupInstance.Page)
	group.Handle(SysTagGroupInstance.Get.Method, SysTagGroupInstance.Get.RelativePath, Auth("token"), SysTagGroupInstance.Get)
}

// SysTagGroupInstance defined
var SysTagGroupInstance = NewSysTagGroup()

// SysTracker defined
type SysTracker struct {
	Page,
	Get HandlerFunc
}

// NewSysTracker defined
func NewSysTracker() *SysTracker {
	ctr := &SysTracker{}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tracker/page"
	ctr.Page.Handler = SysTrackerPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tracker/get"
	ctr.Get.Handler = SysTrackerGet
	return ctr
}

// SysTrackerRoutes defined
func SysTrackerRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysTrackerInstance.Page.Method, SysTrackerInstance.Page.RelativePath, Auth("token"), SysTrackerInstance.Page)
	group.Handle(SysTrackerInstance.Get.Method, SysTrackerInstance.Get.RelativePath, Auth("token"), SysTrackerInstance.Get)
}

// SysTrackerInstance defined
var SysTrackerInstance = NewSysTracker()

// SysUser defined
type SysUser struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get,
	Login,
	Logout HandlerFunc
}

// NewSysUser defined
func NewSysUser() *SysUser {
	ctr := &SysUser{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/add"
	ctr.Add.Handler = SysUserAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/batch_add"
	ctr.BatchAdd.Handler = SysUserBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/del"
	ctr.Del.Handler = SysUserDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/batch_del"
	ctr.BatchDel.Handler = SysUserBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/update"
	ctr.Update.Handler = SysUserUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/batch_update"
	ctr.BatchUpdate.Handler = SysUserBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/page"
	ctr.Page.Handler = SysUserPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/get"
	ctr.Get.Handler = SysUserGet
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/user/login"
	ctr.Login.Handler = SysUserLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/user/logout"
	ctr.Logout.Handler = SysUserLogout
	return ctr
}

// SysUserRoutes defined
func SysUserRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysUserInstance.Add.Method, SysUserInstance.Add.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.Add)
	group.Handle(SysUserInstance.BatchAdd.Method, SysUserInstance.BatchAdd.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.BatchAdd)
	group.Handle(SysUserInstance.Del.Method, SysUserInstance.Del.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.Del)
	group.Handle(SysUserInstance.BatchDel.Method, SysUserInstance.BatchDel.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.BatchDel)
	group.Handle(SysUserInstance.Update.Method, SysUserInstance.Update.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.Update)
	group.Handle(SysUserInstance.BatchUpdate.Method, SysUserInstance.BatchUpdate.RelativePath, Auth("token"), Roles("X8e6D3y60K"), SysUserInstance.BatchUpdate)
	group.Handle(SysUserInstance.Page.Method, SysUserInstance.Page.RelativePath, Auth("token"), SysUserInstance.Page)
	group.Handle(SysUserInstance.Get.Method, SysUserInstance.Get.RelativePath, Auth("token"), SysUserInstance.Get)
	group.Handle(SysUserInstance.Login.Method, SysUserInstance.Login.RelativePath, SysUserInstance.Login)
	group.Handle(SysUserInstance.Logout.Method, SysUserInstance.Logout.RelativePath, Auth("token"), SysUserInstance.Logout)
}

// SysUserInstance defined
var SysUserInstance = NewSysUser()

// SysUserTemplate defined
type SysUserTemplate struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysUserTemplate defined
func NewSysUserTemplate() *SysUserTemplate {
	ctr := &SysUserTemplate{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/add"
	ctr.Add.Handler = SysUserTemplateAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/batch_add"
	ctr.BatchAdd.Handler = SysUserTemplateBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/del"
	ctr.Del.Handler = SysUserTemplateDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/batch_del"
	ctr.BatchDel.Handler = SysUserTemplateBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/update"
	ctr.Update.Handler = SysUserTemplateUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/batch_update"
	ctr.BatchUpdate.Handler = SysUserTemplateBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/page"
	ctr.Page.Handler = SysUserTemplatePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/get"
	ctr.Get.Handler = SysUserTemplateGet
	return ctr
}

// SysUserTemplateRoutes defined
func SysUserTemplateRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysUserTemplateInstance.Add.Method, SysUserTemplateInstance.Add.RelativePath, Auth("token"), SysUserTemplateInstance.Add)
	group.Handle(SysUserTemplateInstance.BatchAdd.Method, SysUserTemplateInstance.BatchAdd.RelativePath, Auth("token"), SysUserTemplateInstance.BatchAdd)
	group.Handle(SysUserTemplateInstance.Del.Method, SysUserTemplateInstance.Del.RelativePath, Auth("token"), SysUserTemplateInstance.Del)
	group.Handle(SysUserTemplateInstance.BatchDel.Method, SysUserTemplateInstance.BatchDel.RelativePath, Auth("token"), SysUserTemplateInstance.BatchDel)
	group.Handle(SysUserTemplateInstance.Update.Method, SysUserTemplateInstance.Update.RelativePath, Auth("token"), SysUserTemplateInstance.Update)
	group.Handle(SysUserTemplateInstance.BatchUpdate.Method, SysUserTemplateInstance.BatchUpdate.RelativePath, Auth("token"), SysUserTemplateInstance.BatchUpdate)
	group.Handle(SysUserTemplateInstance.Page.Method, SysUserTemplateInstance.Page.RelativePath, Auth("token"), SysUserTemplateInstance.Page)
	group.Handle(SysUserTemplateInstance.Get.Method, SysUserTemplateInstance.Get.RelativePath, Auth("token"), SysUserTemplateInstance.Get)
}

// SysUserTemplateInstance defined
var SysUserTemplateInstance = NewSysUserTemplate()

// SysUserTemplateDetail defined
type SysUserTemplateDetail struct {
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysUserTemplateDetail defined
func NewSysUserTemplateDetail() *SysUserTemplateDetail {
	ctr := &SysUserTemplateDetail{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/detail/add"
	ctr.Add.Handler = SysUserTemplateDetailAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/detail/batch_add"
	ctr.BatchAdd.Handler = SysUserTemplateDetailBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/detail/del"
	ctr.Del.Handler = SysUserTemplateDetailDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/detail/batch_del"
	ctr.BatchDel.Handler = SysUserTemplateDetailBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/detail/update"
	ctr.Update.Handler = SysUserTemplateDetailUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/detail/batch_update"
	ctr.BatchUpdate.Handler = SysUserTemplateDetailBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/detail/page"
	ctr.Page.Handler = SysUserTemplateDetailPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/detail/get"
	ctr.Get.Handler = SysUserTemplateDetailGet
	return ctr
}

// SysUserTemplateDetailRoutes defined
func SysUserTemplateDetailRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysUserTemplateDetailInstance.Add.Method, SysUserTemplateDetailInstance.Add.RelativePath, Auth("token"), SysUserTemplateDetailInstance.Add)
	group.Handle(SysUserTemplateDetailInstance.BatchAdd.Method, SysUserTemplateDetailInstance.BatchAdd.RelativePath, Auth("token"), SysUserTemplateDetailInstance.BatchAdd)
	group.Handle(SysUserTemplateDetailInstance.Del.Method, SysUserTemplateDetailInstance.Del.RelativePath, Auth("token"), SysUserTemplateDetailInstance.Del)
	group.Handle(SysUserTemplateDetailInstance.BatchDel.Method, SysUserTemplateDetailInstance.BatchDel.RelativePath, Auth("token"), SysUserTemplateDetailInstance.BatchDel)
	group.Handle(SysUserTemplateDetailInstance.Update.Method, SysUserTemplateDetailInstance.Update.RelativePath, Auth("token"), SysUserTemplateDetailInstance.Update)
	group.Handle(SysUserTemplateDetailInstance.BatchUpdate.Method, SysUserTemplateDetailInstance.BatchUpdate.RelativePath, Auth("token"), SysUserTemplateDetailInstance.BatchUpdate)
	group.Handle(SysUserTemplateDetailInstance.Page.Method, SysUserTemplateDetailInstance.Page.RelativePath, Auth("token"), SysUserTemplateDetailInstance.Page)
	group.Handle(SysUserTemplateDetailInstance.Get.Method, SysUserTemplateDetailInstance.Get.RelativePath, Auth("token"), SysUserTemplateDetailInstance.Get)
}

// SysUserTemplateDetailInstance defined
var SysUserTemplateDetailInstance = NewSysUserTemplateDetail()

// SysWechat defined
type SysWechat struct {
	Oauth2 HandlerFunc
}

// NewSysWechat defined
func NewSysWechat() *SysWechat {
	ctr := &SysWechat{}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/wechat/oauth2"
	ctr.Oauth2.Handler = SysWechatOauth2
	return ctr
}

// SysWechatRoutes defined
func SysWechatRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysWechatInstance.Oauth2.Method, SysWechatInstance.Oauth2.RelativePath, SysWechatInstance.Oauth2)
}

// SysWechatInstance defined
var SysWechatInstance = NewSysWechat()

// SysWorker defined
type SysWorker struct {
	Add,
	Get HandlerFunc
}

// NewSysWorker defined
func NewSysWorker() *SysWorker {
	ctr := &SysWorker{}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/worker/add"
	ctr.Add.Handler = SysWorkerAdd
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/worker/get"
	ctr.Get.Handler = SysWorkerGet
	return ctr
}

// SysWorkerRoutes defined
func SysWorkerRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle(SysWorkerInstance.Add.Method, SysWorkerInstance.Add.RelativePath, Auth("token"), SysWorkerInstance.Add)
	group.Handle(SysWorkerInstance.Get.Method, SysWorkerInstance.Get.RelativePath, Auth("token"), SysWorkerInstance.Get)
}

// SysWorkerInstance defined
var SysWorkerInstance = NewSysWorker()

// ClientSrv defined
func ClientSrvService(engine *Engine) {
	proto.RegisterClientSrvServer(engine.GRPC, &rpc.ClientSrv{})
}

// DomainSrv defined
func DomainSrvService(engine *Engine) {
	proto.RegisterDomainSrvServer(engine.GRPC, &rpc.DomainSrv{})
}

// UserSrv defined
func UserSrvService(engine *Engine) {
	proto.RegisterUserSrvServer(engine.GRPC, &rpc.UserSrv{})
}

// SyncModel defined
func SyncModel() error {
	mseti := App.Manager.MSet()
	mseti.Add(new(model.SysAppFun))
	mseti.Add(new(model.SysArea))
	mseti.Add(new(model.SysAreaTemplate))
	mseti.Add(new(model.SysAreaTemplateDetail))
	mseti.Add(new(model.SysAttachment))
	mseti.Add(new(model.SysClient), "platform")
	mseti.Add(new(model.SysComment))
	mseti.Add(new(model.SysCommentReply))
	mseti.Add(new(model.SysDataPermission))
	mseti.Add(new(model.SysDataPermissionDetail))
	mseti.Add(new(model.SysDomain), "platform")
	mseti.Add(new(model.SysEmailToken))
	mseti.Add(new(model.SysMenu))
	mseti.Add(new(model.SysNotification))
	mseti.Add(new(model.SysOptionset))
	mseti.Add(new(model.SysOrg))
	mseti.Add(new(model.SysPermission))
	mseti.Add(new(model.SysRole))
	mseti.Add(new(model.SysRoleAppFun))
	mseti.Add(new(model.SysRoleDataPermission))
	mseti.Add(new(model.SysRoleMenu))
	mseti.Add(new(model.SysRolePermission))
	mseti.Add(new(model.SysRoleUser))
	mseti.Add(new(model.SysSchedule))
	mseti.Add(new(model.SysScheduleHistory))
	mseti.Add(new(model.SysSetting))
	mseti.Add(new(model.SysTable))
	mseti.Add(new(model.SysTableColUser))
	mseti.Add(new(model.SysTableColumn))
	mseti.Add(new(model.SysTag))
	mseti.Add(new(model.SysTagGroup))
	mseti.Add(new(model.SysTracker))
	mseti.Add(new(model.SysUser), "platform")
	mseti.Add(new(model.SysUserBinding))
	mseti.Add(new(model.SysUserTag))
	mseti.Add(new(model.SysUserTemplate))
	mseti.Add(new(model.SysUserTemplateDetail))
	return nil
}

// SyncController defined
func SyncController() error {
	SysAppFunRoutes(App)
	SysAreaRoutes(App)
	SysAttachmentRoutes(App)
	SysCasRoutes(App)
	SysClientRoutes(App)
	SysCommentRoutes(App)
	SysDataPermissionRoutes(App)
	DebugRoutes(App)
	SysDingtalkRoutes(App)
	SysDomainRoutes(App)
	SysMenuRoutes(App)
	SysNotificationRoutes(App)
	SysOptionsetRoutes(App)
	SysOrgRoutes(App)
	SysPermissionRoutes(App)
	SysRoleRoutes(App)
	SysRoleMenuRoutes(App)
	SysScheduleRoutes(App)
	SysScheduleHistoryRoutes(App)
	SysSchedulingRoutes(App)
	SysSettingRoutes(App)
	SysTableRoutes(App)
	SysTableColumnRoutes(App)
	SysTagRoutes(App)
	SysTagGroupRoutes(App)
	SysTrackerRoutes(App)
	SysUserRoutes(App)
	SysUserTemplateRoutes(App)
	SysUserTemplateDetailRoutes(App)
	SysWechatRoutes(App)
	SysWorkerRoutes(App)
	return nil
}

// SyncService defined
func SyncService() error {
	ClientSrvService(App)
	DomainSrvService(App)
	UserSrvService(App)
	return nil
}
