// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package app

import (
	"github.com/2637309949/dolphin/platform/model"
	"github.com/2637309949/dolphin/platform/rpc"
	"github.com/2637309949/dolphin/platform/rpc/proto"

	"github.com/spf13/viper"
)

// Name project
var Name = "platform"

// SysAppFun defined
type SysAppFun struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysAppFun defined
func NewSysAppFun() *SysAppFun {
	ctr := &SysAppFun{Name: "sys_app_fun"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/app/fun/add"
	ctr.Add.Handler = SysAppFunAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/app/fun/batch_add"
	ctr.BatchAdd.Handler = SysAppFunBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/app/fun/del"
	ctr.Del.Handler = SysAppFunDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/app/fun/batch_del"
	ctr.BatchDel.Handler = SysAppFunBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/app/fun/update"
	ctr.Update.Handler = SysAppFunUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/app/fun/batch_update"
	ctr.BatchUpdate.Handler = SysAppFunBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/app/fun/page"
	ctr.Page.Handler = SysAppFunPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/app/fun/tree"
	ctr.Tree.Handler = SysAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/app/fun/get"
	ctr.Get.Handler = SysAppFunGet
	return ctr
}

// SysAppFunRoutes defined
func SysAppFunRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysAppFunInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Tree.Method, instance.Tree.RelativePath, Auth("token"), instance.Tree)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysAppFunInstance defined
var SysAppFunInstance = NewSysAppFun()

// SysArea defined
type SysArea struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysArea defined
func NewSysArea() *SysArea {
	ctr := &SysArea{Name: "sys_area"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/area/add"
	ctr.Add.Handler = SysAreaAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/area/batch_add"
	ctr.BatchAdd.Handler = SysAreaBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/area/del"
	ctr.Del.Handler = SysAreaDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/area/batch_del"
	ctr.BatchDel.Handler = SysAreaBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/area/update"
	ctr.Update.Handler = SysAreaUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/area/batch_update"
	ctr.BatchUpdate.Handler = SysAreaBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/area/page"
	ctr.Page.Handler = SysAreaPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/area/get"
	ctr.Get.Handler = SysAreaGet
	return ctr
}

// SysAreaRoutes defined
func SysAreaRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysAreaInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysAreaInstance defined
var SysAreaInstance = NewSysArea()

// SysAttachment defined
type SysAttachment struct {
	Name string
	Add,
	BatchAdd,
	Upload,
	Export,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysAttachment defined
func NewSysAttachment() *SysAttachment {
	ctr := &SysAttachment{Name: "sys_attachment"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/attachment/add"
	ctr.Add.Handler = SysAttachmentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/attachment/batch_add"
	ctr.BatchAdd.Handler = SysAttachmentBatchAdd
	ctr.Upload.Method = "POST"
	ctr.Upload.RelativePath = "/sys/attachment/upload"
	ctr.Upload.Handler = SysAttachmentUpload
	ctr.Export.Method = "GET"
	ctr.Export.RelativePath = "/sys/attachment/export"
	ctr.Export.Handler = SysAttachmentExport
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/attachment/del"
	ctr.Del.Handler = SysAttachmentDel
	ctr.BatchDel.Method = "POST"
	ctr.BatchDel.RelativePath = "/sys/attachment/batch_del"
	ctr.BatchDel.Handler = SysAttachmentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/attachment/update"
	ctr.Update.Handler = SysAttachmentUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/attachment/batch_update"
	ctr.BatchUpdate.Handler = SysAttachmentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/attachment/page"
	ctr.Page.Handler = SysAttachmentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/attachment/get"
	ctr.Get.Handler = SysAttachmentGet
	return ctr
}

// SysAttachmentRoutes defined
func SysAttachmentRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysAttachmentInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Upload.Method, instance.Upload.RelativePath, Auth("token"), instance.Upload)
	group.Handle(instance.Export.Method, instance.Export.RelativePath, instance.Export)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysAttachmentInstance defined
var SysAttachmentInstance = NewSysAttachment()

// SysCas defined
type SysCas struct {
	Name string
	Login,
	Logout,
	Affirm,
	Authorize,
	Token,
	URL,
	Oauth2,
	Refresh,
	Check,
	Profile,
	Qrcode HandlerFunc
}

// NewSysCas defined
func NewSysCas() *SysCas {
	ctr := &SysCas{Name: "sys_cas"}
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/cas/login"
	ctr.Login.Handler = SysCasLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/cas/logout"
	ctr.Logout.Handler = SysCasLogout
	ctr.Affirm.Method = "POST"
	ctr.Affirm.RelativePath = "/sys/cas/affirm"
	ctr.Affirm.Handler = SysCasAffirm
	ctr.Authorize.Method = "GET"
	ctr.Authorize.RelativePath = "/sys/cas/authorize"
	ctr.Authorize.Handler = SysCasAuthorize
	ctr.Token.Method = "POST"
	ctr.Token.RelativePath = "/sys/cas/token"
	ctr.Token.Handler = SysCasToken
	ctr.URL.Method = "GET"
	ctr.URL.RelativePath = "/sys/cas/url"
	ctr.URL.Handler = SysCasURL
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/cas/oauth2"
	ctr.Oauth2.Handler = SysCasOauth2
	ctr.Refresh.Method = "GET"
	ctr.Refresh.RelativePath = "/sys/cas/refresh"
	ctr.Refresh.Handler = SysCasRefresh
	ctr.Check.Method = "GET"
	ctr.Check.RelativePath = "/sys/cas/check"
	ctr.Check.Handler = SysCasCheck
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/sys/cas/profile"
	ctr.Profile.Handler = SysCasProfile
	ctr.Qrcode.Method = "GET"
	ctr.Qrcode.RelativePath = "/sys/cas/qrcode"
	ctr.Qrcode.Handler = SysCasQrcode
	return ctr
}

// SysCasRoutes defined
func SysCasRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysCasInstance
	group.Handle(instance.Login.Method, instance.Login.RelativePath, instance.Login)
	group.Handle(instance.Logout.Method, instance.Logout.RelativePath, instance.Logout)
	group.Handle(instance.Affirm.Method, instance.Affirm.RelativePath, instance.Affirm)
	group.Handle(instance.Authorize.Method, instance.Authorize.RelativePath, instance.Authorize)
	group.Handle(instance.Token.Method, instance.Token.RelativePath, instance.Token)
	group.Handle(instance.URL.Method, instance.URL.RelativePath, instance.URL)
	group.Handle(instance.Oauth2.Method, instance.Oauth2.RelativePath, instance.Oauth2)
	group.Handle(instance.Refresh.Method, instance.Refresh.RelativePath, instance.Refresh)
	group.Handle(instance.Check.Method, instance.Check.RelativePath, instance.Check)
	group.Handle(instance.Profile.Method, instance.Profile.RelativePath, Auth("token"), instance.Profile)
	group.Handle(instance.Qrcode.Method, instance.Qrcode.RelativePath, instance.Qrcode)
}

// SysCasInstance defined
var SysCasInstance = NewSysCas()

// SysClient defined
type SysClient struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysClient defined
func NewSysClient() *SysClient {
	ctr := &SysClient{Name: "sys_client"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/client/add"
	ctr.Add.Handler = SysClientAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/client/batch_add"
	ctr.BatchAdd.Handler = SysClientBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/client/del"
	ctr.Del.Handler = SysClientDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/client/batch_del"
	ctr.BatchDel.Handler = SysClientBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/client/update"
	ctr.Update.Handler = SysClientUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/client/batch_update"
	ctr.BatchUpdate.Handler = SysClientBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/client/page"
	ctr.Page.Handler = SysClientPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/client/get"
	ctr.Get.Handler = SysClientGet
	return ctr
}

// SysClientRoutes defined
func SysClientRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysClientInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysClientInstance defined
var SysClientInstance = NewSysClient()

// SysComment defined
type SysComment struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysComment defined
func NewSysComment() *SysComment {
	ctr := &SysComment{Name: "sys_comment"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/comment/add"
	ctr.Add.Handler = SysCommentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/comment/batch_add"
	ctr.BatchAdd.Handler = SysCommentBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/comment/del"
	ctr.Del.Handler = SysCommentDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/comment/batch_del"
	ctr.BatchDel.Handler = SysCommentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/comment/update"
	ctr.Update.Handler = SysCommentUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/comment/batch_update"
	ctr.BatchUpdate.Handler = SysCommentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/comment/page"
	ctr.Page.Handler = SysCommentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/comment/get"
	ctr.Get.Handler = SysCommentGet
	return ctr
}

// SysCommentRoutes defined
func SysCommentRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysCommentInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysCommentInstance defined
var SysCommentInstance = NewSysComment()

// SysDataPermission defined
type SysDataPermission struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysDataPermission defined
func NewSysDataPermission() *SysDataPermission {
	ctr := &SysDataPermission{Name: "sys_data_permission"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/data/permission/add"
	ctr.Add.Handler = SysDataPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/data/permission/batch_add"
	ctr.BatchAdd.Handler = SysDataPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/data/permission/del"
	ctr.Del.Handler = SysDataPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/data/permission/batch_del"
	ctr.BatchDel.Handler = SysDataPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/data/permission/update"
	ctr.Update.Handler = SysDataPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/data/permission/batch_update"
	ctr.BatchUpdate.Handler = SysDataPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/data/permission/page"
	ctr.Page.Handler = SysDataPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/data/permission/get"
	ctr.Get.Handler = SysDataPermissionGet
	return ctr
}

// SysDataPermissionRoutes defined
func SysDataPermissionRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysDataPermissionInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysDataPermissionInstance defined
var SysDataPermissionInstance = NewSysDataPermission()

// Debug defined
type Debug struct {
	Name string
	Pprof,
	Heap,
	Goroutine,
	Allocs,
	Block,
	Threadcreate,
	Cmdline,
	Profile,
	Symbol,
	Trace,
	Mutex HandlerFunc
}

// NewDebug defined
func NewDebug() *Debug {
	ctr := &Debug{Name: "debug"}
	ctr.Pprof.Method = "GET"
	ctr.Pprof.RelativePath = "/pprof/"
	ctr.Pprof.Handler = DebugPprof
	ctr.Heap.Method = "GET"
	ctr.Heap.RelativePath = "/pprof/heap"
	ctr.Heap.Handler = DebugHeap
	ctr.Goroutine.Method = "GET"
	ctr.Goroutine.RelativePath = "/pprof/goroutine"
	ctr.Goroutine.Handler = DebugGoroutine
	ctr.Allocs.Method = "GET"
	ctr.Allocs.RelativePath = "/pprof/allocs"
	ctr.Allocs.Handler = DebugAllocs
	ctr.Block.Method = "GET"
	ctr.Block.RelativePath = "/pprof/block"
	ctr.Block.Handler = DebugBlock
	ctr.Threadcreate.Method = "GET"
	ctr.Threadcreate.RelativePath = "/pprof/threadcreate"
	ctr.Threadcreate.Handler = DebugThreadcreate
	ctr.Cmdline.Method = "GET"
	ctr.Cmdline.RelativePath = "/pprof/cmdline"
	ctr.Cmdline.Handler = DebugCmdline
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/pprof/profile"
	ctr.Profile.Handler = DebugProfile
	ctr.Symbol.Method = "GET,POST"
	ctr.Symbol.RelativePath = "/pprof/symbol"
	ctr.Symbol.Handler = DebugSymbol
	ctr.Trace.Method = "GET"
	ctr.Trace.RelativePath = "/pprof/trace"
	ctr.Trace.Handler = DebugTrace
	ctr.Mutex.Method = "GET"
	ctr.Mutex.RelativePath = "/pprof/mutex"
	ctr.Mutex.Handler = DebugMutex
	return ctr
}

// DebugRoutes defined
func DebugRoutes(engine *Engine) {
	group, instance := engine.Group("/debug"), DebugInstance
	group.Handle(instance.Pprof.Method, instance.Pprof.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Pprof)
	group.Handle(instance.Heap.Method, instance.Heap.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Heap)
	group.Handle(instance.Goroutine.Method, instance.Goroutine.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Goroutine)
	group.Handle(instance.Allocs.Method, instance.Allocs.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Allocs)
	group.Handle(instance.Block.Method, instance.Block.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Block)
	group.Handle(instance.Threadcreate.Method, instance.Threadcreate.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Threadcreate)
	group.Handle(instance.Cmdline.Method, instance.Cmdline.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Cmdline)
	group.Handle(instance.Profile.Method, instance.Profile.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Profile)
	group.Handle(instance.Symbol.Method, instance.Symbol.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Symbol)
	group.Handle(instance.Trace.Method, instance.Trace.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Trace)
	group.Handle(instance.Mutex.Method, instance.Mutex.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Mutex)
}

// DebugInstance defined
var DebugInstance = NewDebug()

// SysDingtalk defined
type SysDingtalk struct {
	Name   string
	Oauth2 HandlerFunc
}

// NewSysDingtalk defined
func NewSysDingtalk() *SysDingtalk {
	ctr := &SysDingtalk{Name: "sys_dingtalk"}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/dingtalk/oauth2"
	ctr.Oauth2.Handler = SysDingtalkOauth2
	return ctr
}

// SysDingtalkRoutes defined
func SysDingtalkRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysDingtalkInstance
	group.Handle(instance.Oauth2.Method, instance.Oauth2.RelativePath, instance.Oauth2)
}

// SysDingtalkInstance defined
var SysDingtalkInstance = NewSysDingtalk()

// SysDomain defined
type SysDomain struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysDomain defined
func NewSysDomain() *SysDomain {
	ctr := &SysDomain{Name: "sys_domain"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/domain/add"
	ctr.Add.Handler = SysDomainAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/domain/batch_add"
	ctr.BatchAdd.Handler = SysDomainBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/domain/del"
	ctr.Del.Handler = SysDomainDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/domain/batch_del"
	ctr.BatchDel.Handler = SysDomainBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/domain/update"
	ctr.Update.Handler = SysDomainUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/domain/batch_update"
	ctr.BatchUpdate.Handler = SysDomainBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/domain/page"
	ctr.Page.Handler = SysDomainPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/domain/get"
	ctr.Get.Handler = SysDomainGet
	return ctr
}

// SysDomainRoutes defined
func SysDomainRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysDomainInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysDomainInstance defined
var SysDomainInstance = NewSysDomain()

// SysMenu defined
type SysMenu struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Sidebar,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysMenu defined
func NewSysMenu() *SysMenu {
	ctr := &SysMenu{Name: "sys_menu"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/menu/add"
	ctr.Add.Handler = SysMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/menu/batch_add"
	ctr.BatchAdd.Handler = SysMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/menu/del"
	ctr.Del.Handler = SysMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/menu/batch_del"
	ctr.BatchDel.Handler = SysMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/menu/update"
	ctr.Update.Handler = SysMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/menu/batch_update"
	ctr.BatchUpdate.Handler = SysMenuBatchUpdate
	ctr.Sidebar.Method = "GET"
	ctr.Sidebar.RelativePath = "/sys/menu/sidebar"
	ctr.Sidebar.Handler = SysMenuSidebar
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/menu/page"
	ctr.Page.Handler = SysMenuPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/menu/tree"
	ctr.Tree.Handler = SysMenuTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/menu/get"
	ctr.Get.Handler = SysMenuGet
	return ctr
}

// SysMenuRoutes defined
func SysMenuRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysMenuInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Sidebar.Method, instance.Sidebar.RelativePath, Auth("token"), instance.Sidebar)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Tree.Method, instance.Tree.RelativePath, Auth("token"), instance.Tree)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysMenuInstance defined
var SysMenuInstance = NewSysMenu()

// SysNotification defined
type SysNotification struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysNotification defined
func NewSysNotification() *SysNotification {
	ctr := &SysNotification{Name: "sys_notification"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/notification/add"
	ctr.Add.Handler = SysNotificationAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/notification/batch_add"
	ctr.BatchAdd.Handler = SysNotificationBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/notification/del"
	ctr.Del.Handler = SysNotificationDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/notification/batch_del"
	ctr.BatchDel.Handler = SysNotificationBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/notification/update"
	ctr.Update.Handler = SysNotificationUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/notification/batch_update"
	ctr.BatchUpdate.Handler = SysNotificationBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/notification/page"
	ctr.Page.Handler = SysNotificationPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/notification/get"
	ctr.Get.Handler = SysNotificationGet
	return ctr
}

// SysNotificationRoutes defined
func SysNotificationRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysNotificationInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysNotificationInstance defined
var SysNotificationInstance = NewSysNotification()

// SysOptionset defined
type SysOptionset struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysOptionset defined
func NewSysOptionset() *SysOptionset {
	ctr := &SysOptionset{Name: "sys_optionset"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/optionset/add"
	ctr.Add.Handler = SysOptionsetAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/optionset/batch_add"
	ctr.BatchAdd.Handler = SysOptionsetBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/optionset/del"
	ctr.Del.Handler = SysOptionsetDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/optionset/batch_del"
	ctr.BatchDel.Handler = SysOptionsetBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/optionset/update"
	ctr.Update.Handler = SysOptionsetUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/optionset/batch_update"
	ctr.BatchUpdate.Handler = SysOptionsetBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/optionset/page"
	ctr.Page.Handler = SysOptionsetPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/optionset/get"
	ctr.Get.Handler = SysOptionsetGet
	return ctr
}

// SysOptionsetRoutes defined
func SysOptionsetRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysOptionsetInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysOptionsetInstance defined
var SysOptionsetInstance = NewSysOptionset()

// SysOrg defined
type SysOrg struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Tree,
	Get HandlerFunc
}

// NewSysOrg defined
func NewSysOrg() *SysOrg {
	ctr := &SysOrg{Name: "sys_org"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/org/add"
	ctr.Add.Handler = SysOrgAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/org/batch_add"
	ctr.BatchAdd.Handler = SysOrgBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/org/del"
	ctr.Del.Handler = SysOrgDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/org/batch_del"
	ctr.BatchDel.Handler = SysOrgBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/org/update"
	ctr.Update.Handler = SysOrgUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/org/batch_update"
	ctr.BatchUpdate.Handler = SysOrgBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/org/page"
	ctr.Page.Handler = SysOrgPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/org/tree"
	ctr.Tree.Handler = SysOrgTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/org/get"
	ctr.Get.Handler = SysOrgGet
	return ctr
}

// SysOrgRoutes defined
func SysOrgRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysOrgInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Tree.Method, instance.Tree.RelativePath, Auth("token"), instance.Tree)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysOrgInstance defined
var SysOrgInstance = NewSysOrg()

// SysPermission defined
type SysPermission struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysPermission defined
func NewSysPermission() *SysPermission {
	ctr := &SysPermission{Name: "sys_permission"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/permission/add"
	ctr.Add.Handler = SysPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/permission/batch_add"
	ctr.BatchAdd.Handler = SysPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/permission/del"
	ctr.Del.Handler = SysPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/permission/batch_del"
	ctr.BatchDel.Handler = SysPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/permission/update"
	ctr.Update.Handler = SysPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/permission/batch_update"
	ctr.BatchUpdate.Handler = SysPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/permission/page"
	ctr.Page.Handler = SysPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/permission/get"
	ctr.Get.Handler = SysPermissionGet
	return ctr
}

// SysPermissionRoutes defined
func SysPermissionRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysPermissionInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysPermissionInstance defined
var SysPermissionInstance = NewSysPermission()

// SysRole defined
type SysRole struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	RoleMenuTree,
	RoleAppFunTree,
	Get HandlerFunc
}

// NewSysRole defined
func NewSysRole() *SysRole {
	ctr := &SysRole{Name: "sys_role"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/add"
	ctr.Add.Handler = SysRoleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/batch_add"
	ctr.BatchAdd.Handler = SysRoleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/del"
	ctr.Del.Handler = SysRoleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/batch_del"
	ctr.BatchDel.Handler = SysRoleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/update"
	ctr.Update.Handler = SysRoleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/role/batch_update"
	ctr.BatchUpdate.Handler = SysRoleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/page"
	ctr.Page.Handler = SysRolePage
	ctr.RoleMenuTree.Method = "GET"
	ctr.RoleMenuTree.RelativePath = "/sys/role/role_menu_tree"
	ctr.RoleMenuTree.Handler = SysRoleRoleMenuTree
	ctr.RoleAppFunTree.Method = "GET"
	ctr.RoleAppFunTree.RelativePath = "/sys/role/role_app_fun_tree"
	ctr.RoleAppFunTree.Handler = SysRoleRoleAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/get"
	ctr.Get.Handler = SysRoleGet
	return ctr
}

// SysRoleRoutes defined
func SysRoleRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysRoleInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.RoleMenuTree.Method, instance.RoleMenuTree.RelativePath, Auth("token"), instance.RoleMenuTree)
	group.Handle(instance.RoleAppFunTree.Method, instance.RoleAppFunTree.RelativePath, Auth("token"), instance.RoleAppFunTree)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysRoleInstance defined
var SysRoleInstance = NewSysRole()

// SysRoleMenu defined
type SysRoleMenu struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysRoleMenu defined
func NewSysRoleMenu() *SysRoleMenu {
	ctr := &SysRoleMenu{Name: "sys_role_menu"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/menu/add"
	ctr.Add.Handler = SysRoleMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/menu/batch_add"
	ctr.BatchAdd.Handler = SysRoleMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/menu/del"
	ctr.Del.Handler = SysRoleMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/menu/batch_del"
	ctr.BatchDel.Handler = SysRoleMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/menu/update"
	ctr.Update.Handler = SysRoleMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/role/menu/batch_update"
	ctr.BatchUpdate.Handler = SysRoleMenuBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/menu/page"
	ctr.Page.Handler = SysRoleMenuPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/menu/get"
	ctr.Get.Handler = SysRoleMenuGet
	return ctr
}

// SysRoleMenuRoutes defined
func SysRoleMenuRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysRoleMenuInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysRoleMenuInstance defined
var SysRoleMenuInstance = NewSysRoleMenu()

// SysSchedule defined
type SysSchedule struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysSchedule defined
func NewSysSchedule() *SysSchedule {
	ctr := &SysSchedule{Name: "sys_schedule"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/schedule/add"
	ctr.Add.Handler = SysScheduleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/schedule/batch_add"
	ctr.BatchAdd.Handler = SysScheduleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/schedule/del"
	ctr.Del.Handler = SysScheduleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/schedule/batch_del"
	ctr.BatchDel.Handler = SysScheduleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/schedule/update"
	ctr.Update.Handler = SysScheduleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/schedule/batch_update"
	ctr.BatchUpdate.Handler = SysScheduleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/page"
	ctr.Page.Handler = SysSchedulePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/schedule/get"
	ctr.Get.Handler = SysScheduleGet
	return ctr
}

// SysScheduleRoutes defined
func SysScheduleRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysScheduleInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysScheduleInstance defined
var SysScheduleInstance = NewSysSchedule()

// SysScheduleHistory defined
type SysScheduleHistory struct {
	Name string
	Page HandlerFunc
}

// NewSysScheduleHistory defined
func NewSysScheduleHistory() *SysScheduleHistory {
	ctr := &SysScheduleHistory{Name: "sys_schedule_history"}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/history/page"
	ctr.Page.Handler = SysScheduleHistoryPage
	return ctr
}

// SysScheduleHistoryRoutes defined
func SysScheduleHistoryRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysScheduleHistoryInstance
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
}

// SysScheduleHistoryInstance defined
var SysScheduleHistoryInstance = NewSysScheduleHistory()

// SysScheduling defined
type SysScheduling struct {
	Name string
	Add,
	Del,
	Update,
	Page,
	Get HandlerFunc
}

// NewSysScheduling defined
func NewSysScheduling() *SysScheduling {
	ctr := &SysScheduling{Name: "sys_scheduling"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/scheduling/add"
	ctr.Add.Handler = SysSchedulingAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/scheduling/del"
	ctr.Del.Handler = SysSchedulingDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/scheduling/update"
	ctr.Update.Handler = SysSchedulingUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/scheduling/page"
	ctr.Page.Handler = SysSchedulingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/scheduling/get"
	ctr.Get.Handler = SysSchedulingGet
	return ctr
}

// SysSchedulingRoutes defined
func SysSchedulingRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysSchedulingInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysSchedulingInstance defined
var SysSchedulingInstance = NewSysScheduling()

// SysSetting defined
type SysSetting struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysSetting defined
func NewSysSetting() *SysSetting {
	ctr := &SysSetting{Name: "sys_setting"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/setting/add"
	ctr.Add.Handler = SysSettingAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/setting/batch_add"
	ctr.BatchAdd.Handler = SysSettingBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/setting/del"
	ctr.Del.Handler = SysSettingDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/setting/batch_del"
	ctr.BatchDel.Handler = SysSettingBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/setting/update"
	ctr.Update.Handler = SysSettingUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/setting/batch_update"
	ctr.BatchUpdate.Handler = SysSettingBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/setting/page"
	ctr.Page.Handler = SysSettingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/setting/get"
	ctr.Get.Handler = SysSettingGet
	return ctr
}

// SysSettingRoutes defined
func SysSettingRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysSettingInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysSettingInstance defined
var SysSettingInstance = NewSysSetting()

// SysTable defined
type SysTable struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTable defined
func NewSysTable() *SysTable {
	ctr := &SysTable{Name: "sys_table"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/add"
	ctr.Add.Handler = SysTableAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/batch_add"
	ctr.BatchAdd.Handler = SysTableBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/del"
	ctr.Del.Handler = SysTableDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/batch_del"
	ctr.BatchDel.Handler = SysTableBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/update"
	ctr.Update.Handler = SysTableUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/batch_update"
	ctr.BatchUpdate.Handler = SysTableBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/page"
	ctr.Page.Handler = SysTablePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/get"
	ctr.Get.Handler = SysTableGet
	return ctr
}

// SysTableRoutes defined
func SysTableRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysTableInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysTableInstance defined
var SysTableInstance = NewSysTable()

// SysTableColumn defined
type SysTableColumn struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTableColumn defined
func NewSysTableColumn() *SysTableColumn {
	ctr := &SysTableColumn{Name: "sys_table_column"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/column/add"
	ctr.Add.Handler = SysTableColumnAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/column/batch_add"
	ctr.BatchAdd.Handler = SysTableColumnBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/column/del"
	ctr.Del.Handler = SysTableColumnDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/column/batch_del"
	ctr.BatchDel.Handler = SysTableColumnBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/column/update"
	ctr.Update.Handler = SysTableColumnUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/column/batch_update"
	ctr.BatchUpdate.Handler = SysTableColumnBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/column/page"
	ctr.Page.Handler = SysTableColumnPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/column/get"
	ctr.Get.Handler = SysTableColumnGet
	return ctr
}

// SysTableColumnRoutes defined
func SysTableColumnRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysTableColumnInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysTableColumnInstance defined
var SysTableColumnInstance = NewSysTableColumn()

// SysTag defined
type SysTag struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTag defined
func NewSysTag() *SysTag {
	ctr := &SysTag{Name: "sys_tag"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/add"
	ctr.Add.Handler = SysTagAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/batch_add"
	ctr.BatchAdd.Handler = SysTagBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/del"
	ctr.Del.Handler = SysTagDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/batch_del"
	ctr.BatchDel.Handler = SysTagBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/update"
	ctr.Update.Handler = SysTagUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/batch_update"
	ctr.BatchUpdate.Handler = SysTagBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/page"
	ctr.Page.Handler = SysTagPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/get"
	ctr.Get.Handler = SysTagGet
	return ctr
}

// SysTagRoutes defined
func SysTagRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysTagInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysTagInstance defined
var SysTagInstance = NewSysTag()

// SysTagGroup defined
type SysTagGroup struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysTagGroup defined
func NewSysTagGroup() *SysTagGroup {
	ctr := &SysTagGroup{Name: "sys_tag_group"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/group/add"
	ctr.Add.Handler = SysTagGroupAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/group/batch_add"
	ctr.BatchAdd.Handler = SysTagGroupBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/group/del"
	ctr.Del.Handler = SysTagGroupDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/group/batch_del"
	ctr.BatchDel.Handler = SysTagGroupBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/group/update"
	ctr.Update.Handler = SysTagGroupUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/group/batch_update"
	ctr.BatchUpdate.Handler = SysTagGroupBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/group/page"
	ctr.Page.Handler = SysTagGroupPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/group/get"
	ctr.Get.Handler = SysTagGroupGet
	return ctr
}

// SysTagGroupRoutes defined
func SysTagGroupRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysTagGroupInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysTagGroupInstance defined
var SysTagGroupInstance = NewSysTagGroup()

// SysTracker defined
type SysTracker struct {
	Name string
	Page,
	Get HandlerFunc
}

// NewSysTracker defined
func NewSysTracker() *SysTracker {
	ctr := &SysTracker{Name: "sys_tracker"}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tracker/page"
	ctr.Page.Handler = SysTrackerPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tracker/get"
	ctr.Get.Handler = SysTrackerGet
	return ctr
}

// SysTrackerRoutes defined
func SysTrackerRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysTrackerInstance
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysTrackerInstance defined
var SysTrackerInstance = NewSysTracker()

// SysUser defined
type SysUser struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get,
	Login,
	Logout HandlerFunc
}

// NewSysUser defined
func NewSysUser() *SysUser {
	ctr := &SysUser{Name: "sys_user"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/add"
	ctr.Add.Handler = SysUserAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/batch_add"
	ctr.BatchAdd.Handler = SysUserBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/del"
	ctr.Del.Handler = SysUserDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/batch_del"
	ctr.BatchDel.Handler = SysUserBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/update"
	ctr.Update.Handler = SysUserUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/batch_update"
	ctr.BatchUpdate.Handler = SysUserBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/page"
	ctr.Page.Handler = SysUserPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/get"
	ctr.Get.Handler = SysUserGet
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/user/login"
	ctr.Login.Handler = SysUserLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/user/logout"
	ctr.Logout.Handler = SysUserLogout
	return ctr
}

// SysUserRoutes defined
func SysUserRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysUserInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), Roles("X8e6D3y60K"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
	group.Handle(instance.Login.Method, instance.Login.RelativePath, instance.Login)
	group.Handle(instance.Logout.Method, instance.Logout.RelativePath, Auth("token"), instance.Logout)
}

// SysUserInstance defined
var SysUserInstance = NewSysUser()

// SysUserTemplate defined
type SysUserTemplate struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysUserTemplate defined
func NewSysUserTemplate() *SysUserTemplate {
	ctr := &SysUserTemplate{Name: "sys_user_template"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/add"
	ctr.Add.Handler = SysUserTemplateAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/batch_add"
	ctr.BatchAdd.Handler = SysUserTemplateBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/del"
	ctr.Del.Handler = SysUserTemplateDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/batch_del"
	ctr.BatchDel.Handler = SysUserTemplateBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/update"
	ctr.Update.Handler = SysUserTemplateUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/batch_update"
	ctr.BatchUpdate.Handler = SysUserTemplateBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/page"
	ctr.Page.Handler = SysUserTemplatePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/get"
	ctr.Get.Handler = SysUserTemplateGet
	return ctr
}

// SysUserTemplateRoutes defined
func SysUserTemplateRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysUserTemplateInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysUserTemplateInstance defined
var SysUserTemplateInstance = NewSysUserTemplate()

// SysUserTemplateDetail defined
type SysUserTemplateDetail struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get HandlerFunc
}

// NewSysUserTemplateDetail defined
func NewSysUserTemplateDetail() *SysUserTemplateDetail {
	ctr := &SysUserTemplateDetail{Name: "sys_user_template_detail"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/detail/add"
	ctr.Add.Handler = SysUserTemplateDetailAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/detail/batch_add"
	ctr.BatchAdd.Handler = SysUserTemplateDetailBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/detail/del"
	ctr.Del.Handler = SysUserTemplateDetailDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/detail/batch_del"
	ctr.BatchDel.Handler = SysUserTemplateDetailBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/detail/update"
	ctr.Update.Handler = SysUserTemplateDetailUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/detail/batch_update"
	ctr.BatchUpdate.Handler = SysUserTemplateDetailBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/detail/page"
	ctr.Page.Handler = SysUserTemplateDetailPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/detail/get"
	ctr.Get.Handler = SysUserTemplateDetailGet
	return ctr
}

// SysUserTemplateDetailRoutes defined
func SysUserTemplateDetailRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysUserTemplateDetailInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysUserTemplateDetailInstance defined
var SysUserTemplateDetailInstance = NewSysUserTemplateDetail()

// SysWechat defined
type SysWechat struct {
	Name   string
	Oauth2 HandlerFunc
}

// NewSysWechat defined
func NewSysWechat() *SysWechat {
	ctr := &SysWechat{Name: "sys_wechat"}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/wechat/oauth2"
	ctr.Oauth2.Handler = SysWechatOauth2
	return ctr
}

// SysWechatRoutes defined
func SysWechatRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysWechatInstance
	group.Handle(instance.Oauth2.Method, instance.Oauth2.RelativePath, instance.Oauth2)
}

// SysWechatInstance defined
var SysWechatInstance = NewSysWechat()

// SysWorker defined
type SysWorker struct {
	Name string
	Add,
	Get HandlerFunc
}

// NewSysWorker defined
func NewSysWorker() *SysWorker {
	ctr := &SysWorker{Name: "sys_worker"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/worker/add"
	ctr.Add.Handler = SysWorkerAdd
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/worker/get"
	ctr.Get.Handler = SysWorkerGet
	return ctr
}

// SysWorkerRoutes defined
func SysWorkerRoutes(engine *Engine) {
	group, instance := engine.Group(viper.GetString("http.prefix")), SysWorkerInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get)
}

// SysWorkerInstance defined
var SysWorkerInstance = NewSysWorker()

// ClientSrv defined
func ClientSrvService(engine *Engine) {
	proto.RegisterClientSrvServer(engine.GRPC, &rpc.ClientSrv{})
}

// DomainSrv defined
func DomainSrvService(engine *Engine) {
	proto.RegisterDomainSrvServer(engine.GRPC, &rpc.DomainSrv{})
}

// UserSrv defined
func UserSrvService(engine *Engine) {
	proto.RegisterUserSrvServer(engine.GRPC, &rpc.UserSrv{})
}

// SyncModel defined
func SyncModel() error {
	mseti := App.Manager.MSet()
	mseti.Add(new(model.SysAppFun))
	mseti.Add(new(model.SysArea))
	mseti.Add(new(model.SysAreaTemplate))
	mseti.Add(new(model.SysAreaTemplateDetail))
	mseti.Add(new(model.SysAttachment))
	mseti.Add(new(model.SysClient), "platform")
	mseti.Add(new(model.SysComment))
	mseti.Add(new(model.SysCommentReply))
	mseti.Add(new(model.SysDataPermission))
	mseti.Add(new(model.SysDataPermissionDetail))
	mseti.Add(new(model.SysDomain), "platform")
	mseti.Add(new(model.SysEmailToken))
	mseti.Add(new(model.SysMenu))
	mseti.Add(new(model.SysNotification))
	mseti.Add(new(model.SysOptionset))
	mseti.Add(new(model.SysOrg))
	mseti.Add(new(model.SysPermission))
	mseti.Add(new(model.SysRole))
	mseti.Add(new(model.SysRoleAppFun))
	mseti.Add(new(model.SysRoleDataPermission))
	mseti.Add(new(model.SysRoleMenu))
	mseti.Add(new(model.SysRolePermission))
	mseti.Add(new(model.SysRoleUser))
	mseti.Add(new(model.SysSchedule))
	mseti.Add(new(model.SysScheduleHistory))
	mseti.Add(new(model.SysSetting))
	mseti.Add(new(model.SysTable))
	mseti.Add(new(model.SysTableColUser))
	mseti.Add(new(model.SysTableColumn))
	mseti.Add(new(model.SysTag))
	mseti.Add(new(model.SysTagGroup))
	mseti.Add(new(model.SysTracker))
	mseti.Add(new(model.SysUser), "platform")
	mseti.Add(new(model.SysUserBinding))
	mseti.Add(new(model.SysUserTag))
	mseti.Add(new(model.SysUserTemplate))
	mseti.Add(new(model.SysUserTemplateDetail))
	return nil
}

// SyncController defined
func SyncController() error {
	SysAppFunRoutes(App)
	SysAreaRoutes(App)
	SysAttachmentRoutes(App)
	SysCasRoutes(App)
	SysClientRoutes(App)
	SysCommentRoutes(App)
	SysDataPermissionRoutes(App)
	DebugRoutes(App)
	SysDingtalkRoutes(App)
	SysDomainRoutes(App)
	SysMenuRoutes(App)
	SysNotificationRoutes(App)
	SysOptionsetRoutes(App)
	SysOrgRoutes(App)
	SysPermissionRoutes(App)
	SysRoleRoutes(App)
	SysRoleMenuRoutes(App)
	SysScheduleRoutes(App)
	SysScheduleHistoryRoutes(App)
	SysSchedulingRoutes(App)
	SysSettingRoutes(App)
	SysTableRoutes(App)
	SysTableColumnRoutes(App)
	SysTagRoutes(App)
	SysTagGroupRoutes(App)
	SysTrackerRoutes(App)
	SysUserRoutes(App)
	SysUserTemplateRoutes(App)
	SysUserTemplateDetailRoutes(App)
	SysWechatRoutes(App)
	SysWorkerRoutes(App)
	return nil
}

// SyncService defined
func SyncService() error {
	ClientSrvService(App)
	DomainSrvService(App)
	UserSrvService(App)
	return nil
}
