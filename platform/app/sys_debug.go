// Code generated by dol build. Only Generate by tools if not existed.
// source: debug.go

package app

import (
	"net/http/pprof"
)

// DebugPprof api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof [GET]
func DebugPprof(ctx *Context) {
	pprof.Index(ctx.Writer, ctx.Request)
}

// DebugHeap api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/heap [GET]
func DebugHeap(ctx *Context) {
	pprof.Handler("heap").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugGoroutine api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/goroutine [GET]
func DebugGoroutine(ctx *Context) {
	pprof.Handler("goroutine").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugAllocs api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/allocs [GET]
func DebugAllocs(ctx *Context) {
	pprof.Handler("allocs").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugBlock api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/block [GET]
func DebugBlock(ctx *Context) {
	pprof.Handler("block").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugThreadcreate api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/threadcreate [GET]
func DebugThreadcreate(ctx *Context) {
	pprof.Handler("threadcreate").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugCmdline api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/cmdline [GET]
func DebugCmdline(ctx *Context) {
	pprof.Cmdline(ctx.Writer, ctx.Request)
}

// DebugProfile api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/profile [GET]
func DebugProfile(ctx *Context) {
	pprof.Profile(ctx.Writer, ctx.Request)
}

// DebugSymbol api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/symbol [GET,POST]
func DebugSymbol(ctx *Context) {
	pprof.Symbol(ctx.Writer, ctx.Request)
}

// DebugTrace api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/trace [GET]
func DebugTrace(ctx *Context) {
	pprof.Trace(ctx.Writer, ctx.Request)
}

// DebugMutex api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router/debug/pprof/mutex [GET]
func DebugMutex(ctx *Context) {
	pprof.Handler("mutex").ServeHTTP(ctx.Writer, ctx.Request)
}
