// Code generated by dol build. Only Generate by tools if not existed.
// source: sys_user.go

package app

import (
	"github.com/2637309949/dolphin/platform/model"
	"github.com/2637309949/dolphin/platform/srv"

	"github.com/2637309949/dolphin/packages/gin/binding"
	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/time"
)

// SysUserAdd api implementation
// @Summary 添加用户
// @Tags 用户
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param user body model.SysUser false "用户信息"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/add [post]
func SysUserAdd(ctx *Context) {
	var payload model.SysUser
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	payload.ID = null.StringFromUUID()
	payload.CreateTime = null.TimeFrom(time.Now().Value())
	payload.CreateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now().Value())
	payload.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.DelFlag = null.IntFrom(0)
	payload.SetPassword("123456")
	ret, err := ctx.PlatformDB.Insert(&payload)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysUserDel api implementation
// @Summary 删除用户
// @Tags 用户
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param user body model.SysUser false "用户信息"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/del [delete]
func SysUserDel(ctx *Context) {
	var payload model.SysUser
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := ctx.PlatformDB.In("id", payload.ID.String).Update(&model.SysUser{
		UpdateTime: null.TimeFrom(time.Now().Value()),
		UpdateBy:   null.StringFrom(ctx.GetToken().GetUserID()),
		DelFlag:    null.IntFrom(1),
	})
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysUserUpdate api implementation
// @Summary 更新用户
// @Tags 用户
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param user body model.SysUser false "用户信息"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/update [put]
func SysUserUpdate(ctx *Context) {
	var payload model.SysUser
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	payload.UpdateBy = null.StringFrom(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now().Value())

	payload.Password.Valid = false
	payload.Salt.Valid = false
	ret, err := ctx.PlatformDB.ID(payload.ID).Update(&payload)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysUserPage api implementation
// @Summary 用户分页查询
// @Tags 用户
// @Param Authorization header string false "认证令牌"
// @Param page query int false "页码"
// @Param size query int false "单页数"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/page [get]
func SysUserPage(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetInt("page", 1)
	q.SetInt("size", 15)
	q.SetTags()
	ret, err := ctx.PageSearch(ctx.PlatformDB, "sys_user", "page", "sys_user", q.Value())
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysUserGet api implementation
// @Summary 获取用户信息
// @Tags 用户
// @Param Authorization header string false "认证令牌"
// @Param id query string false "用户id"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/get [get]
func SysUserGet(ctx *Context) {
	var entity model.SysUser
	id := ctx.Query("id")
	_, err := ctx.PlatformDB.Id(id).Get(&entity)
	entity.Password.Valid = false
	entity.Salt.Valid = false
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(entity)
}

// SysUserLogin api implementation
// @Summary 用户认证
// @Tags 用户
// @Accept application/json
// @Param username body string false "用户名称"
// @Param password body string false "用户密码"
// @Param domain body string false "用户域"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/login [post]
func SysUserLogin(ctx *Context) {
	var payload string
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := srv.SysUserAction(payload)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysUserLogout api implementation
// @Summary 用户退出登录
// @Tags 用户
// @Param Authorization header string false "认证令牌"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/sys/user/logout [get]
func SysUserLogout(ctx *Context) {
	q := ctx.TypeQuery()
	ret, err := srv.SysUserAction(q)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
