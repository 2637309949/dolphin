// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package app

import (
	"context"
	"fmt"
	"net"
	"net/http"

	srv "github.com/2637309949/dolphin/packages/fx"
	"github.com/2637309949/dolphin/packages/fx/cli"
	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/viper"

	// github.com/2637309949/dolphin/platform/conf
	_ "github.com/2637309949/dolphin/platform/conf"
)

// HTTPServer defined http.Server
var HTTPServer *http.Server

// InitServer defined HTTPServer
func InitServer() {
	if HTTPServer == nil {
		HTTPServer = &http.Server{Addr: fmt.Sprintf(":%v", viper.GetString("http.port"))}
	}
}

// RPCListener defined net
var RPCListener net.Listener

// InitRPCListener defined RPCListener
func InitRPCListener() {
	if RPCListener == nil {
		grpc, err := net.Listen("tcp", fmt.Sprintf(":%v", viper.GetString("grpc.port")))
		if err != nil {
			logrus.Fatal(err)
		}
		RPCListener = grpc
	}
}

// OnStart defined OnStart
func OnStart(e *Engine) func(context.Context) error {
	return func(context.Context) error {
		go func() {
			logrus.Infof("http listen on port:%v", viper.GetString("http.port"))
			HTTPServer.Handler = e.Gin
			if err := HTTPServer.ListenAndServe(); err != nil {
				logrus.Fatal(err)
			}
		}()
		go func() {
			logrus.Infof("grpc listen on port:%v", viper.GetString("grpc.port"))
			if err := e.GRPC.Serve(RPCListener); err != nil {
				logrus.Fatal(err)
			}
		}()
		return nil
	}
}

// OnStop defined OnStop
func OnStop(e *Engine) func(ctx context.Context) error {
	return func(ctx context.Context) error {
		if err := HTTPServer.Shutdown(ctx); err != nil {
			logrus.Fatal(err)
			return err
		}
		if err := RPCListener.Close(); err != nil {
			logrus.Fatal(err)
			return err
		}
		return nil
	}
}

// NewLifeHook create lifecycle hook
func NewLifeHook(e *Engine) srv.Hook {
	InitServer()
	InitRPCListener()
	return srv.Hook{
		OnStart: OnStart(e),
		OnStop:  OnStop(e),
	}
}

func init() {
	AuthServerURL = viper.GetString("oauth.server")
	OA2Cfg.ClientID = viper.GetString("oauth.id")
	OA2Cfg.ClientSecret = viper.GetString("oauth.secret")
	OA2Cfg.RedirectURL = fmt.Sprintf("%v/api/sys/cas/oauth2", viper.GetString("oauth.cli"))
	OA2Cfg.Endpoint.AuthURL = AuthServerURL + "/api/sys/cas/authorize"
	OA2Cfg.Endpoint.TokenURL = AuthServerURL + "/api/sys/cas/token"
	_ = cli.Provider(func(lc srv.Lifecycle) *Engine {
		lc.Append(NewLifeHook(App))
		return App
	})
}
