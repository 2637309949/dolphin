// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package app

import (
	"context"
	"path"

	"github.com/json-iterator/go/extra"
	"github.com/spf13/viper"
	"golang.org/x/oauth2"
)

// OnStart defined OnStart
func OnStart(engine *Engine) func(context.Context) error {
	return func(ctx context.Context) error {
		engine.Http.OnStart(ctx)
		engine.RPC.OnStart(ctx)
		return nil
	}
}

// OnStop defined OnStop
func OnStop(engine *Engine) func(ctx context.Context) error {
	return func(ctx context.Context) error {
		engine.Http.OnStop(ctx)
		engine.RPC.OnStop(ctx)
		return nil
	}
}

// NewLifeHook create lifecycle hook
func NewLifeHook(e *Engine) Hook {
	return Hook{OnStart(e), OnStop(e)}
}

// init after NewEngine
func init() {
	extra.RegisterFuzzyDecoders()
	OA2Cfg = oauth2.Config{
		ClientID:     viper.GetString("oauth.id"),
		ClientSecret: viper.GetString("oauth.secret"),
		Scopes:       []string{"admin"},
		RedirectURL:  viper.GetString("oauth.cli") + path.Join(viper.GetString("http.prefix"), SysCasInstance.Oauth2.RelativePath),
		Endpoint: oauth2.Endpoint{
			AuthURL:  viper.GetString("oauth.server") + path.Join(viper.GetString("http.prefix"), SysCasInstance.Authorize.RelativePath),
			TokenURL: viper.GetString("oauth.server") + path.Join(viper.GetString("http.prefix"), SysCasInstance.Token.RelativePath),
		},
	}
	SyncModel()
	SyncController()
	SyncService()
}
