// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package util

import (
	"math/rand"
	"os"
	"reflect"
	"runtime"
	"time"

	"github.com/go-errors/errors"
	"github.com/sirupsen/logrus"
)

// M defined
type M map[string]interface{}

// RandType defined rand type
type RandType int

// RandType defined
const (
	RandNum RandType = iota
	RandNumUperChar
	RandNumChar
)

// RandString defined random char
func RandString(randLen int, randType RandType) string {
	randUint := make([]byte, randLen)
	rand.Seed(time.Now().UnixNano())
	switch randType {
	case RandNum:
		for i := 0; i < randLen; i++ {
			randUint[i] = uint8(48 + rand.Intn(10))
		}
	case RandNumUperChar:
		for i := 0; i < randLen; i++ {
			r := rand.Intn(36)
			switch {
			case r < 10:
				randUint[i] = uint8(48 + r)
			case r < 36:
				randUint[i] = uint8(55 + r)
			}
		}
	case RandNumChar:
		for i := 0; i < randLen; i++ {
			r := rand.Intn(62)
			switch {
			case r < 10:
				randUint[i] = uint8(48 + r)
			case r < 36:
				randUint[i] = uint8(55 + r)
			case r < 62:
				randUint[i] = uint8(61 + r)
			}
		}
	}
	return string(randUint)
}

// RandomInt generates a random int, based on a min and max values
func RandomInt(min, max int) int {
	return min + rand.Intn(max-min)
}

// EnsureLeft defined return left
func EnsureLeft(left interface{}, err error) interface{} {
	if err != nil {
		panic(err)
	}
	return left
}

// EnsureRight defined return right
func EnsureRight(err error, right interface{}) interface{} {
	if err != nil {
		panic(err)
	}
	return right
}

// Ensure defined
func Ensure(err error) {
	if err != nil {
		logrus.Errorf("%v", string(errors.Wrap(err, 3).Stack()))
		panic(err)
	}
}

// SetFormatter defined
func SetFormatter(isTerminal bool) {
	if !isTerminal {
		logrus.SetFormatter(&logrus.JSONFormatter{
			TimestampFormat: "02/01 15:04:05",
		})
	} else {
		logrus.SetFormatter(&logrus.TextFormatter{
			FullTimestamp:   true,
			TimestampFormat: "02/01 15:04:05",
			DisableQuote:    true,
		})
	}
}

// UserHomeDir defined
func UserHomeDir() string {
	if runtime.GOOS == "windows" {
		home := os.Getenv("HOMEDRIVE") + os.Getenv("HOMEPATH")
		if home == "" {
			home = os.Getenv("USERPROFILE")
		}
		return home
	}
	return os.Getenv("HOME")
}

// DeepSearch scans deep maps, following the key indexes listed in the
func DeepSearch(m map[string]interface{}, path []string) map[string]interface{} {
	for _, k := range path {
		m2, ok := m[k]
		if !ok {
			// intermediate key does not exist
			// => create it and continue from there
			m3 := make(map[string]interface{})
			m[k] = m3
			m = m3
			continue
		}
		m3, ok := m2.(map[string]interface{})
		if !ok {
			m3 = make(map[string]interface{})
			m[k] = m3
		}
		m = m3
	}
	return m
}

// SomeOne defined
func SomeOne(srv interface{}, def interface{}) interface{} {
	sliceValue := reflect.Indirect(reflect.ValueOf(srv))
	if sliceValue.Kind() == reflect.Slice {
		size := sliceValue.Len()
		if size <= 0 {
			return def
		}
		return sliceValue.Index(0).Interface()
	}
	return def
}

// LastChar defined
func LastChar(str string) uint8 {
	if str == "" {
		panic("The length of the string can't be 0")
	}
	return str[len(str)-1]
}
