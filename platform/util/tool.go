// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package util

import (
	"math/rand"
	"time"
)

// M defined
type M map[string]interface{}

// RandType defined
type RandType int

// const defined
const (
	RandNum RandType = iota
	RandNumUperChar
	RandNumChar
)

// RandString defined
func RandString(randLen int, randType RandType) string {
	randUint := make([]byte, randLen)
	rand.Seed(time.Now().UnixNano())
	switch randType {
	case RandNum:
		for i := 0; i < randLen; i++ {
			randUint[i] = uint8(48 + rand.Intn(10))
		}
	case RandNumUperChar:
		for i := 0; i < randLen; i++ {
			r := rand.Intn(36)
			switch {
			case r < 10:
				randUint[i] = uint8(48 + r)
			case r < 36:
				randUint[i] = uint8(55 + r)
			}
		}
	case RandNumChar:
		for i := 0; i < randLen; i++ {
			r := rand.Intn(62)
			switch {
			case r < 10:
				randUint[i] = uint8(48 + r)
			case r < 36:
				randUint[i] = uint8(55 + r)
			case r < 62:
				randUint[i] = uint8(61 + r)
			}
		}
	}
	return string(randUint)
}
