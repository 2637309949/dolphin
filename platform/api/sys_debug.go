// Code generated by dol build. Only Generate by tools if not existed.
// source: debug.go

package api

import (
	"net/http/pprof"

	"github.com/gin-gonic/gin"
)

// DebugPprof api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof [GET]
func (ctr *Debug) DebugPprof(ctx *gin.Context) {
	pprof.Index(ctx.Writer, ctx.Request)
}

// DebugHeap api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/heap [GET]
func (ctr *Debug) DebugHeap(ctx *gin.Context) {
	pprof.Handler("heap").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugGoroutine api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/goroutine [GET]
func (ctr *Debug) DebugGoroutine(ctx *gin.Context) {
	pprof.Handler("goroutine").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugAllocs api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/allocs [GET]
func (ctr *Debug) DebugAllocs(ctx *gin.Context) {
	pprof.Handler("allocs").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugBlock api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/block [GET]
func (ctr *Debug) DebugBlock(ctx *gin.Context) {
	pprof.Handler("block").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugThreadcreate api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/threadcreate [GET]
func (ctr *Debug) DebugThreadcreate(ctx *gin.Context) {
	pprof.Handler("threadcreate").ServeHTTP(ctx.Writer, ctx.Request)
}

// DebugCmdline api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/cmdline [GET]
func (ctr *Debug) DebugCmdline(ctx *gin.Context) {
	pprof.Cmdline(ctx.Writer, ctx.Request)
}

// DebugProfile api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/profile [GET]
func (ctr *Debug) DebugProfile(ctx *gin.Context) {
	pprof.Profile(ctx.Writer, ctx.Request)
}

// DebugSymbol api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/symbol [GET,POST]
func (ctr *Debug) DebugSymbol(ctx *gin.Context) {
	pprof.Symbol(ctx.Writer, ctx.Request)
}

// DebugTrace api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/trace [GET]
func (ctr *Debug) DebugTrace(ctx *gin.Context) {
	pprof.Trace(ctx.Writer, ctx.Request)
}

// DebugMutex api implementation
// @Summary
// @Tags pprof诊断接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router/debug/pprof/mutex [GET]
func (ctr *Debug) DebugMutex(ctx *gin.Context) {
	pprof.Handler("mutex").ServeHTTP(ctx.Writer, ctx.Request)
}
