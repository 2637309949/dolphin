// Code generated by dol build. Only Generate by tools if not existed.
// source: sys_scheduling.go

package api

import (
	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/platform/types"
)

// SysSchedulingAdd api implementation
// @Summary 添加调度
// @Tags 调度
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param scheduling body types.Scheduling false "调度信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/sys/scheduling/add [post]
func (ctr *SysScheduling) SysSchedulingAdd(ctx *Context) {
	var payload types.Scheduling
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysSchedulingDel api implementation
// @Summary 删除调度
// @Tags 调度
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param scheduling body types.Scheduling false "调度"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/sys/scheduling/del [delete]
func (ctr *SysScheduling) SysSchedulingDel(ctx *Context) {
	var payload types.Scheduling
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysSchedulingUpdate api implementation
// @Summary 更新调度
// @Tags 调度
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param scheduling body types.Scheduling false "调度信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/sys/scheduling/update [put]
func (ctr *SysScheduling) SysSchedulingUpdate(ctx *Context) {
	var payload types.Scheduling
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysSchedulingPage api implementation
// @Summary 调度分页查询
// @Tags 调度
// @Param Authorization header string false "认证令牌"
// @Param page query int false "页码"
// @Param size query int false "单页数"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/sys/scheduling/page [get]
func (ctr *SysScheduling) SysSchedulingPage(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetInt("page", 1)
	q.SetInt("size", 10)
	q.SetString("creater")
	q.SetString("updater")
	q.SetRange("create_time")
	q.SetRange("update_time")
	q.SetInt("is_delete", 0)()

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// SysSchedulingGet api implementation
// @Summary
// @Tags 调度
// @Param Authorization header string false "认证令牌"
// @Param id query string false "调度id"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/sys/scheduling/get [get]
func (ctr *SysScheduling) SysSchedulingGet(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetString("id")

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
