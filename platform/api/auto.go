// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package api

import (
	"github.com/2637309949/dolphin/platform/srv"
	"github.com/2637309949/dolphin/platform/svc"
	"github.com/2637309949/dolphin/platform/types"

	"github.com/2637309949/dolphin/packages/web/core"
	"github.com/spf13/viper"
)

var (
	Name                          = "platform"
	NopHandlerFunc                = func(ctx *Context) { ctx.Next() }
	SysAppFunInstance             = NewSysAppFun()
	SysAreaInstance               = NewSysArea()
	SysAttachmentInstance         = NewSysAttachment()
	SysCasInstance                = NewSysCas()
	SysClientInstance             = NewSysClient()
	SysCommentInstance            = NewSysComment()
	SysDataPermissionInstance     = NewSysDataPermission()
	DebugInstance                 = NewDebug()
	SysDingtalkInstance           = NewSysDingtalk()
	SysDomainInstance             = NewSysDomain()
	SysMenuInstance               = NewSysMenu()
	SysNotificationInstance       = NewSysNotification()
	SysOptionsetInstance          = NewSysOptionset()
	SysOrgInstance                = NewSysOrg()
	SysPermissionInstance         = NewSysPermission()
	SysRoleInstance               = NewSysRole()
	SysRoleMenuInstance           = NewSysRoleMenu()
	SysScheduleInstance           = NewSysSchedule()
	SysScheduleHistoryInstance    = NewSysScheduleHistory()
	SysSchedulingInstance         = NewSysScheduling()
	SysSettingInstance            = NewSysSetting()
	SysTableInstance              = NewSysTable()
	SysTableColumnInstance        = NewSysTableColumn()
	SysTagInstance                = NewSysTag()
	SysTagGroupInstance           = NewSysTagGroup()
	SysTrackerInstance            = NewSysTracker()
	SysUserInstance               = NewSysUser()
	SysUserTemplateInstance       = NewSysUserTemplate()
	SysUserTemplateDetailInstance = NewSysUserTemplateDetail()
	SysWechatInstance             = NewSysWechat()
	SysWorkerInstance             = NewSysWorker()
)

// Controller defined
type (
	Controller struct {
		Method                                   string
		RelativePath                             string
		Auth, Roles, Cache, Interceptor, Handler core.HandlerFunc
	}
	SysAppFun struct {
		Name string
		Srv  *srv.SysAppFun
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Tree,
		Get Controller
	}
	SysArea struct {
		Name string
		Srv  *srv.SysArea
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysAttachment struct {
		Name string
		Srv  *srv.SysAttachment
		Add,
		BatchAdd,
		Upload,
		Export,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysCas struct {
		Name string
		Srv  *srv.SysCas
		Login,
		Logout,
		Affirm,
		Authorize,
		Token,
		URL,
		Oauth2,
		QrOauth2,
		Refresh,
		Check,
		Profile,
		Qrcode,
		Qrconnect,
		QrcodeLogin Controller
	}
	SysClient struct {
		Name string
		Srv  *srv.SysClient
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysComment struct {
		Name string
		Srv  *srv.SysComment
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysDataPermission struct {
		Name string
		Srv  *srv.SysDataPermission
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	Debug struct {
		Name string
		Srv  *srv.Debug
		Pprof,
		Heap,
		Goroutine,
		Allocs,
		Block,
		Threadcreate,
		Cmdline,
		Profile,
		Symbol,
		Trace,
		Mutex Controller
	}
	SysDingtalk struct {
		Name   string
		Srv    *srv.SysDingtalk
		Oauth2 Controller
	}
	SysDomain struct {
		Name string
		Srv  *srv.SysDomain
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysMenu struct {
		Name string
		Srv  *srv.SysMenu
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Sidebar,
		Page,
		Tree,
		Get Controller
	}
	SysNotification struct {
		Name string
		Srv  *srv.SysNotification
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysOptionset struct {
		Name string
		Srv  *srv.SysOptionset
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysOrg struct {
		Name string
		Srv  *srv.SysOrg
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Tree,
		Get Controller
	}
	SysPermission struct {
		Name string
		Srv  *srv.SysPermission
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysRole struct {
		Name string
		Srv  *srv.SysRole
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		RoleMenuTree,
		RoleAppFunTree,
		Get Controller
	}
	SysRoleMenu struct {
		Name string
		Srv  *srv.SysRoleMenu
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysSchedule struct {
		Name string
		Srv  *srv.SysSchedule
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysScheduleHistory struct {
		Name string
		Srv  *srv.SysScheduleHistory
		Page Controller
	}
	SysScheduling struct {
		Name string
		Srv  *srv.SysScheduling
		Add,
		Del,
		Update,
		Page,
		Get Controller
	}
	SysSetting struct {
		Name string
		Srv  *srv.SysSetting
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysTable struct {
		Name string
		Srv  *srv.SysTable
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysTableColumn struct {
		Name string
		Srv  *srv.SysTableColumn
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysTag struct {
		Name string
		Srv  *srv.SysTag
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysTagGroup struct {
		Name string
		Srv  *srv.SysTagGroup
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysTracker struct {
		Name string
		Srv  *srv.SysTracker
		Page,
		Get Controller
	}
	SysUser struct {
		Name string
		Srv  *srv.SysUser
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get,
		Login,
		Logout Controller
	}
	SysUserTemplate struct {
		Name string
		Srv  *srv.SysUserTemplate
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysUserTemplateDetail struct {
		Name string
		Srv  *srv.SysUserTemplateDetail
		Add,
		BatchAdd,
		Del,
		BatchDel,
		Update,
		BatchUpdate,
		Page,
		Get Controller
	}
	SysWechat struct {
		Name   string
		Srv    *srv.SysWechat
		Oauth2 Controller
	}
	SysWorker struct {
		Name string
		Srv  *srv.SysWorker
		Add,
		Get Controller
	}
)

// NewSysAppFun defined
func NewSysAppFun() *SysAppFun {
	ctr := &SysAppFun{Name: "sys_app_fun", Srv: srv.NewSysAppFun()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/app/fun/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysAppFunAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/app/fun/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysAppFunBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/app/fun/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysAppFunDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/app/fun/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysAppFunBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/app/fun/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysAppFunUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/app/fun/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysAppFunBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/app/fun/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysAppFunPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/app/fun/tree"
	ctr.Tree.Auth = Auth("token")
	ctr.Tree.Roles = NopHandlerFunc
	ctr.Tree.Cache = NopHandlerFunc
	ctr.Tree.Interceptor = NopHandlerFunc
	ctr.Tree.Handler = ctr.SysAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/app/fun/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysAppFunGet
	return ctr
}

// SysAppFunRoutes defined
func SysAppFunRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysAppFunInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Tree.Method, i.Tree.RelativePath, i.Tree.Auth, i.Tree.Roles, i.Tree.Cache, i.Tree.Interceptor, i.Tree.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysArea defined
func NewSysArea() *SysArea {
	ctr := &SysArea{Name: "sys_area", Srv: srv.NewSysArea()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/area/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysAreaAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/area/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysAreaBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/area/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysAreaDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/area/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysAreaBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/area/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysAreaUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/area/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysAreaBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/area/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysAreaPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/area/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysAreaGet
	return ctr
}

// SysAreaRoutes defined
func SysAreaRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysAreaInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysAttachment defined
func NewSysAttachment() *SysAttachment {
	ctr := &SysAttachment{Name: "sys_attachment", Srv: srv.NewSysAttachment()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/attachment/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysAttachmentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/attachment/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysAttachmentBatchAdd
	ctr.Upload.Method = "POST"
	ctr.Upload.RelativePath = "/sys/attachment/upload"
	ctr.Upload.Auth = Auth("token")
	ctr.Upload.Roles = NopHandlerFunc
	ctr.Upload.Cache = NopHandlerFunc
	ctr.Upload.Interceptor = NopHandlerFunc
	ctr.Upload.Handler = ctr.SysAttachmentUpload
	ctr.Export.Method = "GET"
	ctr.Export.RelativePath = "/sys/attachment/export"
	ctr.Export.Auth = NopHandlerFunc
	ctr.Export.Roles = NopHandlerFunc
	ctr.Export.Cache = NopHandlerFunc
	ctr.Export.Interceptor = NopHandlerFunc
	ctr.Export.Handler = ctr.SysAttachmentExport
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/attachment/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysAttachmentDel
	ctr.BatchDel.Method = "POST"
	ctr.BatchDel.RelativePath = "/sys/attachment/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysAttachmentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/attachment/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysAttachmentUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/attachment/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysAttachmentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/attachment/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysAttachmentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/attachment/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysAttachmentGet
	return ctr
}

// SysAttachmentRoutes defined
func SysAttachmentRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysAttachmentInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Upload.Method, i.Upload.RelativePath, i.Upload.Auth, i.Upload.Roles, i.Upload.Cache, i.Upload.Interceptor, i.Upload.Handler)
	g.Handle(i.Export.Method, i.Export.RelativePath, i.Export.Auth, i.Export.Roles, i.Export.Cache, i.Export.Interceptor, i.Export.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysCas defined
func NewSysCas() *SysCas {
	ctr := &SysCas{Name: "sys_cas", Srv: srv.NewSysCas()}
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/cas/login"
	ctr.Login.Auth = NopHandlerFunc
	ctr.Login.Roles = NopHandlerFunc
	ctr.Login.Cache = NopHandlerFunc
	ctr.Login.Interceptor = NopHandlerFunc
	ctr.Login.Handler = ctr.SysCasLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/cas/logout"
	ctr.Logout.Auth = NopHandlerFunc
	ctr.Logout.Roles = NopHandlerFunc
	ctr.Logout.Cache = NopHandlerFunc
	ctr.Logout.Interceptor = NopHandlerFunc
	ctr.Logout.Handler = ctr.SysCasLogout
	ctr.Affirm.Method = "POST"
	ctr.Affirm.RelativePath = "/sys/cas/affirm"
	ctr.Affirm.Auth = NopHandlerFunc
	ctr.Affirm.Roles = NopHandlerFunc
	ctr.Affirm.Cache = NopHandlerFunc
	ctr.Affirm.Interceptor = NopHandlerFunc
	ctr.Affirm.Handler = ctr.SysCasAffirm
	ctr.Authorize.Method = "GET"
	ctr.Authorize.RelativePath = "/sys/cas/authorize"
	ctr.Authorize.Auth = NopHandlerFunc
	ctr.Authorize.Roles = NopHandlerFunc
	ctr.Authorize.Cache = NopHandlerFunc
	ctr.Authorize.Interceptor = NopHandlerFunc
	ctr.Authorize.Handler = ctr.SysCasAuthorize
	ctr.Token.Method = "POST"
	ctr.Token.RelativePath = "/sys/cas/token"
	ctr.Token.Auth = NopHandlerFunc
	ctr.Token.Roles = NopHandlerFunc
	ctr.Token.Cache = NopHandlerFunc
	ctr.Token.Interceptor = NopHandlerFunc
	ctr.Token.Handler = ctr.SysCasToken
	ctr.URL.Method = "GET"
	ctr.URL.RelativePath = "/sys/cas/url"
	ctr.URL.Auth = NopHandlerFunc
	ctr.URL.Roles = NopHandlerFunc
	ctr.URL.Cache = NopHandlerFunc
	ctr.URL.Interceptor = NopHandlerFunc
	ctr.URL.Handler = ctr.SysCasURL
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/cas/oauth2"
	ctr.Oauth2.Auth = NopHandlerFunc
	ctr.Oauth2.Roles = NopHandlerFunc
	ctr.Oauth2.Cache = NopHandlerFunc
	ctr.Oauth2.Interceptor = NopHandlerFunc
	ctr.Oauth2.Handler = ctr.SysCasOauth2
	ctr.QrOauth2.Method = "GET"
	ctr.QrOauth2.RelativePath = "/sys/cas/qr_oauth2"
	ctr.QrOauth2.Auth = NopHandlerFunc
	ctr.QrOauth2.Roles = NopHandlerFunc
	ctr.QrOauth2.Cache = NopHandlerFunc
	ctr.QrOauth2.Interceptor = NopHandlerFunc
	ctr.QrOauth2.Handler = ctr.SysCasQrOauth2
	ctr.Refresh.Method = "GET"
	ctr.Refresh.RelativePath = "/sys/cas/refresh"
	ctr.Refresh.Auth = NopHandlerFunc
	ctr.Refresh.Roles = NopHandlerFunc
	ctr.Refresh.Cache = NopHandlerFunc
	ctr.Refresh.Interceptor = NopHandlerFunc
	ctr.Refresh.Handler = ctr.SysCasRefresh
	ctr.Check.Method = "GET"
	ctr.Check.RelativePath = "/sys/cas/check"
	ctr.Check.Auth = NopHandlerFunc
	ctr.Check.Roles = NopHandlerFunc
	ctr.Check.Cache = NopHandlerFunc
	ctr.Check.Interceptor = NopHandlerFunc
	ctr.Check.Handler = ctr.SysCasCheck
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/sys/cas/profile"
	ctr.Profile.Auth = Auth("token")
	ctr.Profile.Roles = NopHandlerFunc
	ctr.Profile.Cache = NopHandlerFunc
	ctr.Profile.Interceptor = NopHandlerFunc
	ctr.Profile.Handler = ctr.SysCasProfile
	ctr.Qrcode.Method = "GET"
	ctr.Qrcode.RelativePath = "/sys/cas/qrcode"
	ctr.Qrcode.Auth = NopHandlerFunc
	ctr.Qrcode.Roles = NopHandlerFunc
	ctr.Qrcode.Cache = NopHandlerFunc
	ctr.Qrcode.Interceptor = NopHandlerFunc
	ctr.Qrcode.Handler = ctr.SysCasQrcode
	ctr.Qrconnect.Method = "GET"
	ctr.Qrconnect.RelativePath = "/sys/cas/qrconnect"
	ctr.Qrconnect.Auth = NopHandlerFunc
	ctr.Qrconnect.Roles = NopHandlerFunc
	ctr.Qrconnect.Cache = NopHandlerFunc
	ctr.Qrconnect.Interceptor = NopHandlerFunc
	ctr.Qrconnect.Handler = ctr.SysCasQrconnect
	ctr.QrcodeLogin.Method = "GET"
	ctr.QrcodeLogin.RelativePath = "/sys/cas/qrcode_login"
	ctr.QrcodeLogin.Auth = NopHandlerFunc
	ctr.QrcodeLogin.Roles = NopHandlerFunc
	ctr.QrcodeLogin.Cache = NopHandlerFunc
	ctr.QrcodeLogin.Interceptor = NopHandlerFunc
	ctr.QrcodeLogin.Handler = ctr.SysCasQrcodeLogin
	return ctr
}

// SysCasRoutes defined
func SysCasRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysCasInstance
	g.Handle(i.Login.Method, i.Login.RelativePath, i.Login.Auth, i.Login.Roles, i.Login.Cache, i.Login.Interceptor, i.Login.Handler)
	g.Handle(i.Logout.Method, i.Logout.RelativePath, i.Logout.Auth, i.Logout.Roles, i.Logout.Cache, i.Logout.Interceptor, i.Logout.Handler)
	g.Handle(i.Affirm.Method, i.Affirm.RelativePath, i.Affirm.Auth, i.Affirm.Roles, i.Affirm.Cache, i.Affirm.Interceptor, i.Affirm.Handler)
	g.Handle(i.Authorize.Method, i.Authorize.RelativePath, i.Authorize.Auth, i.Authorize.Roles, i.Authorize.Cache, i.Authorize.Interceptor, i.Authorize.Handler)
	g.Handle(i.Token.Method, i.Token.RelativePath, i.Token.Auth, i.Token.Roles, i.Token.Cache, i.Token.Interceptor, i.Token.Handler)
	g.Handle(i.URL.Method, i.URL.RelativePath, i.URL.Auth, i.URL.Roles, i.URL.Cache, i.URL.Interceptor, i.URL.Handler)
	g.Handle(i.Oauth2.Method, i.Oauth2.RelativePath, i.Oauth2.Auth, i.Oauth2.Roles, i.Oauth2.Cache, i.Oauth2.Interceptor, i.Oauth2.Handler)
	g.Handle(i.QrOauth2.Method, i.QrOauth2.RelativePath, i.QrOauth2.Auth, i.QrOauth2.Roles, i.QrOauth2.Cache, i.QrOauth2.Interceptor, i.QrOauth2.Handler)
	g.Handle(i.Refresh.Method, i.Refresh.RelativePath, i.Refresh.Auth, i.Refresh.Roles, i.Refresh.Cache, i.Refresh.Interceptor, i.Refresh.Handler)
	g.Handle(i.Check.Method, i.Check.RelativePath, i.Check.Auth, i.Check.Roles, i.Check.Cache, i.Check.Interceptor, i.Check.Handler)
	g.Handle(i.Profile.Method, i.Profile.RelativePath, i.Profile.Auth, i.Profile.Roles, i.Profile.Cache, i.Profile.Interceptor, i.Profile.Handler)
	g.Handle(i.Qrcode.Method, i.Qrcode.RelativePath, i.Qrcode.Auth, i.Qrcode.Roles, i.Qrcode.Cache, i.Qrcode.Interceptor, i.Qrcode.Handler)
	g.Handle(i.Qrconnect.Method, i.Qrconnect.RelativePath, i.Qrconnect.Auth, i.Qrconnect.Roles, i.Qrconnect.Cache, i.Qrconnect.Interceptor, i.Qrconnect.Handler)
	g.Handle(i.QrcodeLogin.Method, i.QrcodeLogin.RelativePath, i.QrcodeLogin.Auth, i.QrcodeLogin.Roles, i.QrcodeLogin.Cache, i.QrcodeLogin.Interceptor, i.QrcodeLogin.Handler)
}

// NewSysClient defined
func NewSysClient() *SysClient {
	ctr := &SysClient{Name: "sys_client", Srv: srv.NewSysClient()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/client/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysClientAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/client/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysClientBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/client/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysClientDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/client/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysClientBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/client/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysClientUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/client/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysClientBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/client/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysClientPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/client/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysClientGet
	return ctr
}

// SysClientRoutes defined
func SysClientRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysClientInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysComment defined
func NewSysComment() *SysComment {
	ctr := &SysComment{Name: "sys_comment", Srv: srv.NewSysComment()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/comment/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysCommentAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/comment/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysCommentBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/comment/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysCommentDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/comment/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysCommentBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/comment/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysCommentUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/comment/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysCommentBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/comment/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysCommentPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/comment/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysCommentGet
	return ctr
}

// SysCommentRoutes defined
func SysCommentRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysCommentInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysDataPermission defined
func NewSysDataPermission() *SysDataPermission {
	ctr := &SysDataPermission{Name: "sys_data_permission", Srv: srv.NewSysDataPermission()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/data/permission/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysDataPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/data/permission/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysDataPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/data/permission/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysDataPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/data/permission/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysDataPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/data/permission/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysDataPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/data/permission/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysDataPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/data/permission/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysDataPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/data/permission/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysDataPermissionGet
	return ctr
}

// SysDataPermissionRoutes defined
func SysDataPermissionRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysDataPermissionInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewDebug defined
func NewDebug() *Debug {
	ctr := &Debug{Name: "debug", Srv: srv.NewDebug()}
	ctr.Pprof.Method = "GET"
	ctr.Pprof.RelativePath = "/pprof/"
	ctr.Pprof.Auth = Auth("token")
	ctr.Pprof.Roles = Roles("X8e6D3y60K")
	ctr.Pprof.Cache = NopHandlerFunc
	ctr.Pprof.Interceptor = NopHandlerFunc
	ctr.Pprof.Handler = ctr.DebugPprof
	ctr.Heap.Method = "GET"
	ctr.Heap.RelativePath = "/pprof/heap"
	ctr.Heap.Auth = Auth("token")
	ctr.Heap.Roles = Roles("X8e6D3y60K")
	ctr.Heap.Cache = NopHandlerFunc
	ctr.Heap.Interceptor = NopHandlerFunc
	ctr.Heap.Handler = ctr.DebugHeap
	ctr.Goroutine.Method = "GET"
	ctr.Goroutine.RelativePath = "/pprof/goroutine"
	ctr.Goroutine.Auth = Auth("token")
	ctr.Goroutine.Roles = Roles("X8e6D3y60K")
	ctr.Goroutine.Cache = NopHandlerFunc
	ctr.Goroutine.Interceptor = NopHandlerFunc
	ctr.Goroutine.Handler = ctr.DebugGoroutine
	ctr.Allocs.Method = "GET"
	ctr.Allocs.RelativePath = "/pprof/allocs"
	ctr.Allocs.Auth = Auth("token")
	ctr.Allocs.Roles = Roles("X8e6D3y60K")
	ctr.Allocs.Cache = NopHandlerFunc
	ctr.Allocs.Interceptor = NopHandlerFunc
	ctr.Allocs.Handler = ctr.DebugAllocs
	ctr.Block.Method = "GET"
	ctr.Block.RelativePath = "/pprof/block"
	ctr.Block.Auth = Auth("token")
	ctr.Block.Roles = Roles("X8e6D3y60K")
	ctr.Block.Cache = NopHandlerFunc
	ctr.Block.Interceptor = NopHandlerFunc
	ctr.Block.Handler = ctr.DebugBlock
	ctr.Threadcreate.Method = "GET"
	ctr.Threadcreate.RelativePath = "/pprof/threadcreate"
	ctr.Threadcreate.Auth = Auth("token")
	ctr.Threadcreate.Roles = Roles("X8e6D3y60K")
	ctr.Threadcreate.Cache = NopHandlerFunc
	ctr.Threadcreate.Interceptor = NopHandlerFunc
	ctr.Threadcreate.Handler = ctr.DebugThreadcreate
	ctr.Cmdline.Method = "GET"
	ctr.Cmdline.RelativePath = "/pprof/cmdline"
	ctr.Cmdline.Auth = Auth("token")
	ctr.Cmdline.Roles = Roles("X8e6D3y60K")
	ctr.Cmdline.Cache = NopHandlerFunc
	ctr.Cmdline.Interceptor = NopHandlerFunc
	ctr.Cmdline.Handler = ctr.DebugCmdline
	ctr.Profile.Method = "GET"
	ctr.Profile.RelativePath = "/pprof/profile"
	ctr.Profile.Auth = Auth("token")
	ctr.Profile.Roles = Roles("X8e6D3y60K")
	ctr.Profile.Cache = NopHandlerFunc
	ctr.Profile.Interceptor = NopHandlerFunc
	ctr.Profile.Handler = ctr.DebugProfile
	ctr.Symbol.Method = "GET,POST"
	ctr.Symbol.RelativePath = "/pprof/symbol"
	ctr.Symbol.Auth = Auth("token")
	ctr.Symbol.Roles = Roles("X8e6D3y60K")
	ctr.Symbol.Cache = NopHandlerFunc
	ctr.Symbol.Interceptor = NopHandlerFunc
	ctr.Symbol.Handler = ctr.DebugSymbol
	ctr.Trace.Method = "GET"
	ctr.Trace.RelativePath = "/pprof/trace"
	ctr.Trace.Auth = Auth("token")
	ctr.Trace.Roles = Roles("X8e6D3y60K")
	ctr.Trace.Cache = NopHandlerFunc
	ctr.Trace.Interceptor = NopHandlerFunc
	ctr.Trace.Handler = ctr.DebugTrace
	ctr.Mutex.Method = "GET"
	ctr.Mutex.RelativePath = "/pprof/mutex"
	ctr.Mutex.Auth = Auth("token")
	ctr.Mutex.Roles = Roles("X8e6D3y60K")
	ctr.Mutex.Cache = NopHandlerFunc
	ctr.Mutex.Interceptor = NopHandlerFunc
	ctr.Mutex.Handler = ctr.DebugMutex
	return ctr
}

// DebugRoutes defined
func DebugRoutes() {
	g, i := App.Group("/debug"), DebugInstance
	g.Handle(i.Pprof.Method, i.Pprof.RelativePath, i.Pprof.Auth, i.Pprof.Roles, i.Pprof.Cache, i.Pprof.Interceptor, i.Pprof.Handler)
	g.Handle(i.Heap.Method, i.Heap.RelativePath, i.Heap.Auth, i.Heap.Roles, i.Heap.Cache, i.Heap.Interceptor, i.Heap.Handler)
	g.Handle(i.Goroutine.Method, i.Goroutine.RelativePath, i.Goroutine.Auth, i.Goroutine.Roles, i.Goroutine.Cache, i.Goroutine.Interceptor, i.Goroutine.Handler)
	g.Handle(i.Allocs.Method, i.Allocs.RelativePath, i.Allocs.Auth, i.Allocs.Roles, i.Allocs.Cache, i.Allocs.Interceptor, i.Allocs.Handler)
	g.Handle(i.Block.Method, i.Block.RelativePath, i.Block.Auth, i.Block.Roles, i.Block.Cache, i.Block.Interceptor, i.Block.Handler)
	g.Handle(i.Threadcreate.Method, i.Threadcreate.RelativePath, i.Threadcreate.Auth, i.Threadcreate.Roles, i.Threadcreate.Cache, i.Threadcreate.Interceptor, i.Threadcreate.Handler)
	g.Handle(i.Cmdline.Method, i.Cmdline.RelativePath, i.Cmdline.Auth, i.Cmdline.Roles, i.Cmdline.Cache, i.Cmdline.Interceptor, i.Cmdline.Handler)
	g.Handle(i.Profile.Method, i.Profile.RelativePath, i.Profile.Auth, i.Profile.Roles, i.Profile.Cache, i.Profile.Interceptor, i.Profile.Handler)
	g.Handle(i.Symbol.Method, i.Symbol.RelativePath, i.Symbol.Auth, i.Symbol.Roles, i.Symbol.Cache, i.Symbol.Interceptor, i.Symbol.Handler)
	g.Handle(i.Trace.Method, i.Trace.RelativePath, i.Trace.Auth, i.Trace.Roles, i.Trace.Cache, i.Trace.Interceptor, i.Trace.Handler)
	g.Handle(i.Mutex.Method, i.Mutex.RelativePath, i.Mutex.Auth, i.Mutex.Roles, i.Mutex.Cache, i.Mutex.Interceptor, i.Mutex.Handler)
}

// NewSysDingtalk defined
func NewSysDingtalk() *SysDingtalk {
	ctr := &SysDingtalk{Name: "sys_dingtalk", Srv: srv.NewSysDingtalk()}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/dingtalk/oauth2"
	ctr.Oauth2.Auth = NopHandlerFunc
	ctr.Oauth2.Roles = NopHandlerFunc
	ctr.Oauth2.Cache = NopHandlerFunc
	ctr.Oauth2.Interceptor = NopHandlerFunc
	ctr.Oauth2.Handler = ctr.SysDingtalkOauth2
	return ctr
}

// SysDingtalkRoutes defined
func SysDingtalkRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysDingtalkInstance
	g.Handle(i.Oauth2.Method, i.Oauth2.RelativePath, i.Oauth2.Auth, i.Oauth2.Roles, i.Oauth2.Cache, i.Oauth2.Interceptor, i.Oauth2.Handler)
}

// NewSysDomain defined
func NewSysDomain() *SysDomain {
	ctr := &SysDomain{Name: "sys_domain", Srv: srv.NewSysDomain()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/domain/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysDomainAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/domain/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysDomainBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/domain/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysDomainDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/domain/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysDomainBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/domain/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysDomainUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/domain/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysDomainBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/domain/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysDomainPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/domain/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysDomainGet
	return ctr
}

// SysDomainRoutes defined
func SysDomainRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysDomainInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysMenu defined
func NewSysMenu() *SysMenu {
	ctr := &SysMenu{Name: "sys_menu", Srv: srv.NewSysMenu()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/menu/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/menu/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/menu/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/menu/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/menu/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/menu/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysMenuBatchUpdate
	ctr.Sidebar.Method = "GET"
	ctr.Sidebar.RelativePath = "/sys/menu/sidebar"
	ctr.Sidebar.Auth = Auth("token")
	ctr.Sidebar.Roles = NopHandlerFunc
	ctr.Sidebar.Cache = NopHandlerFunc
	ctr.Sidebar.Interceptor = NopHandlerFunc
	ctr.Sidebar.Handler = ctr.SysMenuSidebar
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/menu/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysMenuPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/menu/tree"
	ctr.Tree.Auth = Auth("token")
	ctr.Tree.Roles = NopHandlerFunc
	ctr.Tree.Cache = NopHandlerFunc
	ctr.Tree.Interceptor = NopHandlerFunc
	ctr.Tree.Handler = ctr.SysMenuTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/menu/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysMenuGet
	return ctr
}

// SysMenuRoutes defined
func SysMenuRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysMenuInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Sidebar.Method, i.Sidebar.RelativePath, i.Sidebar.Auth, i.Sidebar.Roles, i.Sidebar.Cache, i.Sidebar.Interceptor, i.Sidebar.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Tree.Method, i.Tree.RelativePath, i.Tree.Auth, i.Tree.Roles, i.Tree.Cache, i.Tree.Interceptor, i.Tree.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysNotification defined
func NewSysNotification() *SysNotification {
	ctr := &SysNotification{Name: "sys_notification", Srv: srv.NewSysNotification()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/notification/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysNotificationAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/notification/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysNotificationBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/notification/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysNotificationDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/notification/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysNotificationBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/notification/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysNotificationUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/notification/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysNotificationBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/notification/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysNotificationPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/notification/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysNotificationGet
	return ctr
}

// SysNotificationRoutes defined
func SysNotificationRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysNotificationInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysOptionset defined
func NewSysOptionset() *SysOptionset {
	ctr := &SysOptionset{Name: "sys_optionset", Srv: srv.NewSysOptionset()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/optionset/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysOptionsetAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/optionset/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysOptionsetBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/optionset/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysOptionsetDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/optionset/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysOptionsetBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/optionset/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysOptionsetUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/optionset/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysOptionsetBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/optionset/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysOptionsetPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/optionset/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysOptionsetGet
	return ctr
}

// SysOptionsetRoutes defined
func SysOptionsetRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysOptionsetInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysOrg defined
func NewSysOrg() *SysOrg {
	ctr := &SysOrg{Name: "sys_org", Srv: srv.NewSysOrg()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/org/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysOrgAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/org/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysOrgBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/org/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysOrgDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/org/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysOrgBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/org/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysOrgUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/org/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysOrgBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/org/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysOrgPage
	ctr.Tree.Method = "GET"
	ctr.Tree.RelativePath = "/sys/org/tree"
	ctr.Tree.Auth = Auth("token")
	ctr.Tree.Roles = NopHandlerFunc
	ctr.Tree.Cache = NopHandlerFunc
	ctr.Tree.Interceptor = NopHandlerFunc
	ctr.Tree.Handler = ctr.SysOrgTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/org/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysOrgGet
	return ctr
}

// SysOrgRoutes defined
func SysOrgRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysOrgInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Tree.Method, i.Tree.RelativePath, i.Tree.Auth, i.Tree.Roles, i.Tree.Cache, i.Tree.Interceptor, i.Tree.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysPermission defined
func NewSysPermission() *SysPermission {
	ctr := &SysPermission{Name: "sys_permission", Srv: srv.NewSysPermission()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/permission/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysPermissionAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/permission/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysPermissionBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/permission/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysPermissionDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/permission/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysPermissionBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/permission/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysPermissionUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/permission/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysPermissionBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/permission/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysPermissionPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/permission/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysPermissionGet
	return ctr
}

// SysPermissionRoutes defined
func SysPermissionRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysPermissionInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysRole defined
func NewSysRole() *SysRole {
	ctr := &SysRole{Name: "sys_role", Srv: srv.NewSysRole()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysRoleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysRoleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysRoleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysRoleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysRoleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/role/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysRoleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysRolePage
	ctr.RoleMenuTree.Method = "GET"
	ctr.RoleMenuTree.RelativePath = "/sys/role/role_menu_tree"
	ctr.RoleMenuTree.Auth = Auth("token")
	ctr.RoleMenuTree.Roles = NopHandlerFunc
	ctr.RoleMenuTree.Cache = NopHandlerFunc
	ctr.RoleMenuTree.Interceptor = NopHandlerFunc
	ctr.RoleMenuTree.Handler = ctr.SysRoleRoleMenuTree
	ctr.RoleAppFunTree.Method = "GET"
	ctr.RoleAppFunTree.RelativePath = "/sys/role/role_app_fun_tree"
	ctr.RoleAppFunTree.Auth = Auth("token")
	ctr.RoleAppFunTree.Roles = NopHandlerFunc
	ctr.RoleAppFunTree.Cache = NopHandlerFunc
	ctr.RoleAppFunTree.Interceptor = NopHandlerFunc
	ctr.RoleAppFunTree.Handler = ctr.SysRoleRoleAppFunTree
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysRoleGet
	return ctr
}

// SysRoleRoutes defined
func SysRoleRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysRoleInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.RoleMenuTree.Method, i.RoleMenuTree.RelativePath, i.RoleMenuTree.Auth, i.RoleMenuTree.Roles, i.RoleMenuTree.Cache, i.RoleMenuTree.Interceptor, i.RoleMenuTree.Handler)
	g.Handle(i.RoleAppFunTree.Method, i.RoleAppFunTree.RelativePath, i.RoleAppFunTree.Auth, i.RoleAppFunTree.Roles, i.RoleAppFunTree.Cache, i.RoleAppFunTree.Interceptor, i.RoleAppFunTree.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysRoleMenu defined
func NewSysRoleMenu() *SysRoleMenu {
	ctr := &SysRoleMenu{Name: "sys_role_menu", Srv: srv.NewSysRoleMenu()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/role/menu/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysRoleMenuAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/role/menu/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysRoleMenuBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/role/menu/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysRoleMenuDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/role/menu/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysRoleMenuBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/role/menu/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysRoleMenuUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/role/menu/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysRoleMenuBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/role/menu/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysRoleMenuPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/role/menu/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysRoleMenuGet
	return ctr
}

// SysRoleMenuRoutes defined
func SysRoleMenuRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysRoleMenuInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysSchedule defined
func NewSysSchedule() *SysSchedule {
	ctr := &SysSchedule{Name: "sys_schedule", Srv: srv.NewSysSchedule()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/schedule/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysScheduleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/schedule/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysScheduleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/schedule/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysScheduleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/schedule/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysScheduleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/schedule/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysScheduleUpdate
	ctr.BatchUpdate.Method = "POST"
	ctr.BatchUpdate.RelativePath = "/sys/schedule/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysScheduleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysSchedulePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/schedule/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysScheduleGet
	return ctr
}

// SysScheduleRoutes defined
func SysScheduleRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysScheduleInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysScheduleHistory defined
func NewSysScheduleHistory() *SysScheduleHistory {
	ctr := &SysScheduleHistory{Name: "sys_schedule_history", Srv: srv.NewSysScheduleHistory()}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/schedule/history/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysScheduleHistoryPage
	return ctr
}

// SysScheduleHistoryRoutes defined
func SysScheduleHistoryRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysScheduleHistoryInstance
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
}

// NewSysScheduling defined
func NewSysScheduling() *SysScheduling {
	ctr := &SysScheduling{Name: "sys_scheduling", Srv: srv.NewSysScheduling()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/scheduling/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysSchedulingAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/scheduling/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysSchedulingDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/scheduling/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysSchedulingUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/scheduling/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysSchedulingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/scheduling/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysSchedulingGet
	return ctr
}

// SysSchedulingRoutes defined
func SysSchedulingRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysSchedulingInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysSetting defined
func NewSysSetting() *SysSetting {
	ctr := &SysSetting{Name: "sys_setting", Srv: srv.NewSysSetting()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/setting/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysSettingAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/setting/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysSettingBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/setting/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysSettingDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/setting/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysSettingBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/setting/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysSettingUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/setting/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysSettingBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/setting/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysSettingPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/setting/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysSettingGet
	return ctr
}

// SysSettingRoutes defined
func SysSettingRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysSettingInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysTable defined
func NewSysTable() *SysTable {
	ctr := &SysTable{Name: "sys_table", Srv: srv.NewSysTable()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysTableAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysTableBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysTableDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysTableBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysTableUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysTableBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysTablePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysTableGet
	return ctr
}

// SysTableRoutes defined
func SysTableRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysTableInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysTableColumn defined
func NewSysTableColumn() *SysTableColumn {
	ctr := &SysTableColumn{Name: "sys_table_column", Srv: srv.NewSysTableColumn()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/table/column/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysTableColumnAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/table/column/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysTableColumnBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/table/column/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysTableColumnDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/table/column/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysTableColumnBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/table/column/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysTableColumnUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/table/column/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysTableColumnBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/table/column/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysTableColumnPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/table/column/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysTableColumnGet
	return ctr
}

// SysTableColumnRoutes defined
func SysTableColumnRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysTableColumnInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysTag defined
func NewSysTag() *SysTag {
	ctr := &SysTag{Name: "sys_tag", Srv: srv.NewSysTag()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysTagAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysTagBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysTagDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysTagBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysTagUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysTagBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysTagPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysTagGet
	return ctr
}

// SysTagRoutes defined
func SysTagRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysTagInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysTagGroup defined
func NewSysTagGroup() *SysTagGroup {
	ctr := &SysTagGroup{Name: "sys_tag_group", Srv: srv.NewSysTagGroup()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/tag/group/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysTagGroupAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/tag/group/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysTagGroupBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/tag/group/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysTagGroupDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/tag/group/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysTagGroupBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/tag/group/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysTagGroupUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/tag/group/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysTagGroupBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tag/group/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysTagGroupPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tag/group/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysTagGroupGet
	return ctr
}

// SysTagGroupRoutes defined
func SysTagGroupRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysTagGroupInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysTracker defined
func NewSysTracker() *SysTracker {
	ctr := &SysTracker{Name: "sys_tracker", Srv: srv.NewSysTracker()}
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/tracker/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysTrackerPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/tracker/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysTrackerGet
	return ctr
}

// SysTrackerRoutes defined
func SysTrackerRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysTrackerInstance
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysUser defined
func NewSysUser() *SysUser {
	ctr := &SysUser{Name: "sys_user", Srv: srv.NewSysUser()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = Roles("X8e6D3y60K")
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysUserAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = Roles("X8e6D3y60K")
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysUserBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = Roles("X8e6D3y60K")
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysUserDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = Roles("X8e6D3y60K")
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysUserBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = Roles("X8e6D3y60K")
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysUserUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = Roles("X8e6D3y60K")
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysUserBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysUserPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysUserGet
	ctr.Login.Method = "POST"
	ctr.Login.RelativePath = "/sys/user/login"
	ctr.Login.Auth = NopHandlerFunc
	ctr.Login.Roles = NopHandlerFunc
	ctr.Login.Cache = NopHandlerFunc
	ctr.Login.Interceptor = NopHandlerFunc
	ctr.Login.Handler = ctr.SysUserLogin
	ctr.Logout.Method = "GET"
	ctr.Logout.RelativePath = "/sys/user/logout"
	ctr.Logout.Auth = Auth("token")
	ctr.Logout.Roles = NopHandlerFunc
	ctr.Logout.Cache = NopHandlerFunc
	ctr.Logout.Interceptor = NopHandlerFunc
	ctr.Logout.Handler = ctr.SysUserLogout
	return ctr
}

// SysUserRoutes defined
func SysUserRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysUserInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
	g.Handle(i.Login.Method, i.Login.RelativePath, i.Login.Auth, i.Login.Roles, i.Login.Cache, i.Login.Interceptor, i.Login.Handler)
	g.Handle(i.Logout.Method, i.Logout.RelativePath, i.Logout.Auth, i.Logout.Roles, i.Logout.Cache, i.Logout.Interceptor, i.Logout.Handler)
}

// NewSysUserTemplate defined
func NewSysUserTemplate() *SysUserTemplate {
	ctr := &SysUserTemplate{Name: "sys_user_template", Srv: srv.NewSysUserTemplate()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysUserTemplateAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysUserTemplateBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysUserTemplateDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysUserTemplateBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysUserTemplateUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysUserTemplateBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysUserTemplatePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysUserTemplateGet
	return ctr
}

// SysUserTemplateRoutes defined
func SysUserTemplateRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysUserTemplateInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysUserTemplateDetail defined
func NewSysUserTemplateDetail() *SysUserTemplateDetail {
	ctr := &SysUserTemplateDetail{Name: "sys_user_template_detail", Srv: srv.NewSysUserTemplateDetail()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/user/template/detail/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysUserTemplateDetailAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/sys/user/template/detail/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.SysUserTemplateDetailBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/sys/user/template/detail/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.SysUserTemplateDetailDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/sys/user/template/detail/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.SysUserTemplateDetailBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/sys/user/template/detail/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.SysUserTemplateDetailUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/sys/user/template/detail/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.SysUserTemplateDetailBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/sys/user/template/detail/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.SysUserTemplateDetailPage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/user/template/detail/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysUserTemplateDetailGet
	return ctr
}

// SysUserTemplateDetailRoutes defined
func SysUserTemplateDetailRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysUserTemplateDetailInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.BatchAdd.Method, i.BatchAdd.RelativePath, i.BatchAdd.Auth, i.BatchAdd.Roles, i.BatchAdd.Cache, i.BatchAdd.Interceptor, i.BatchAdd.Handler)
	g.Handle(i.Del.Method, i.Del.RelativePath, i.Del.Auth, i.Del.Roles, i.Del.Cache, i.Del.Interceptor, i.Del.Handler)
	g.Handle(i.BatchDel.Method, i.BatchDel.RelativePath, i.BatchDel.Auth, i.BatchDel.Roles, i.BatchDel.Cache, i.BatchDel.Interceptor, i.BatchDel.Handler)
	g.Handle(i.Update.Method, i.Update.RelativePath, i.Update.Auth, i.Update.Roles, i.Update.Cache, i.Update.Interceptor, i.Update.Handler)
	g.Handle(i.BatchUpdate.Method, i.BatchUpdate.RelativePath, i.BatchUpdate.Auth, i.BatchUpdate.Roles, i.BatchUpdate.Cache, i.BatchUpdate.Interceptor, i.BatchUpdate.Handler)
	g.Handle(i.Page.Method, i.Page.RelativePath, i.Page.Auth, i.Page.Roles, i.Page.Cache, i.Page.Interceptor, i.Page.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// NewSysWechat defined
func NewSysWechat() *SysWechat {
	ctr := &SysWechat{Name: "sys_wechat", Srv: srv.NewSysWechat()}
	ctr.Oauth2.Method = "GET"
	ctr.Oauth2.RelativePath = "/sys/wechat/oauth2"
	ctr.Oauth2.Auth = NopHandlerFunc
	ctr.Oauth2.Roles = NopHandlerFunc
	ctr.Oauth2.Cache = NopHandlerFunc
	ctr.Oauth2.Interceptor = NopHandlerFunc
	ctr.Oauth2.Handler = ctr.SysWechatOauth2
	return ctr
}

// SysWechatRoutes defined
func SysWechatRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysWechatInstance
	g.Handle(i.Oauth2.Method, i.Oauth2.RelativePath, i.Oauth2.Auth, i.Oauth2.Roles, i.Oauth2.Cache, i.Oauth2.Interceptor, i.Oauth2.Handler)
}

// NewSysWorker defined
func NewSysWorker() *SysWorker {
	ctr := &SysWorker{Name: "sys_worker", Srv: srv.NewSysWorker()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/sys/worker/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.SysWorkerAdd
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/sys/worker/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.SysWorkerGet
	return ctr
}

// SysWorkerRoutes defined
func SysWorkerRoutes() {
	g, i := App.Group(viper.GetString("http.prefix")), SysWorkerInstance
	g.Handle(i.Add.Method, i.Add.RelativePath, i.Add.Auth, i.Add.Roles, i.Add.Cache, i.Add.Interceptor, i.Add.Handler)
	g.Handle(i.Get.Method, i.Get.RelativePath, i.Get.Auth, i.Get.Roles, i.Get.Cache, i.Get.Interceptor, i.Get.Handler)
}

// SyncModel defined
func SyncModel() error {
	mseti := App.Manager.ModelSet()
	mseti.Add(new(types.SysAppFun))
	mseti.Add(new(types.SysArea))
	mseti.Add(new(types.SysAreaTemplate))
	mseti.Add(new(types.SysAreaTemplateDetail))
	mseti.Add(new(types.SysAttachment))
	mseti.Add(new(types.SysClient), "platform")
	mseti.Add(new(types.SysComment))
	mseti.Add(new(types.SysCommentReply))
	mseti.Add(new(types.SysDataPermission))
	mseti.Add(new(types.SysDataPermissionDetail))
	mseti.Add(new(types.SysDomain), "platform")
	mseti.Add(new(types.SysEmailToken))
	mseti.Add(new(types.SysMenu))
	mseti.Add(new(types.SysNotification))
	mseti.Add(new(types.SysOptionset))
	mseti.Add(new(types.SysOrg))
	mseti.Add(new(types.SysPermission))
	mseti.Add(new(types.SysRole))
	mseti.Add(new(types.SysRoleAppFun))
	mseti.Add(new(types.SysRoleDataPermission))
	mseti.Add(new(types.SysRoleMenu))
	mseti.Add(new(types.SysRolePermission))
	mseti.Add(new(types.SysRoleUser))
	mseti.Add(new(types.SysSchedule))
	mseti.Add(new(types.SysScheduleHistory))
	mseti.Add(new(types.SysSetting))
	mseti.Add(new(types.SysTable))
	mseti.Add(new(types.SysTableColUser))
	mseti.Add(new(types.SysTableColumn))
	mseti.Add(new(types.SysTag))
	mseti.Add(new(types.SysTagGroup))
	mseti.Add(new(types.SysTracker))
	mseti.Add(new(types.SysUser), "platform")
	mseti.Add(new(types.SysUserBinding))
	mseti.Add(new(types.SysUserTag))
	mseti.Add(new(types.SysUserTemplate))
	mseti.Add(new(types.SysUserTemplateDetail))
	return nil
}

// SyncController defined
func SyncController() error {
	SysAppFunRoutes()
	SysAreaRoutes()
	SysAttachmentRoutes()
	SysCasRoutes()
	SysClientRoutes()
	SysCommentRoutes()
	SysDataPermissionRoutes()
	DebugRoutes()
	SysDingtalkRoutes()
	SysDomainRoutes()
	SysMenuRoutes()
	SysNotificationRoutes()
	SysOptionsetRoutes()
	SysOrgRoutes()
	SysPermissionRoutes()
	SysRoleRoutes()
	SysRoleMenuRoutes()
	SysScheduleRoutes()
	SysScheduleHistoryRoutes()
	SysSchedulingRoutes()
	SysSettingRoutes()
	SysTableRoutes()
	SysTableColumnRoutes()
	SysTagRoutes()
	SysTagGroupRoutes()
	SysTrackerRoutes()
	SysUserRoutes()
	SysUserTemplateRoutes()
	SysUserTemplateDetailRoutes()
	SysWechatRoutes()
	SysWorkerRoutes()
	return nil
}

// SyncSrv defined
func SyncSrv(svc *svc.ServiceContext) error {
	SysAppFunInstance.Srv.SetServiceContext(svc)
	SysAreaInstance.Srv.SetServiceContext(svc)
	SysAttachmentInstance.Srv.SetServiceContext(svc)
	SysCasInstance.Srv.SetServiceContext(svc)
	SysClientInstance.Srv.SetServiceContext(svc)
	SysCommentInstance.Srv.SetServiceContext(svc)
	SysDataPermissionInstance.Srv.SetServiceContext(svc)
	DebugInstance.Srv.SetServiceContext(svc)
	SysDingtalkInstance.Srv.SetServiceContext(svc)
	SysDomainInstance.Srv.SetServiceContext(svc)
	SysMenuInstance.Srv.SetServiceContext(svc)
	SysNotificationInstance.Srv.SetServiceContext(svc)
	SysOptionsetInstance.Srv.SetServiceContext(svc)
	SysOrgInstance.Srv.SetServiceContext(svc)
	SysPermissionInstance.Srv.SetServiceContext(svc)
	SysRoleInstance.Srv.SetServiceContext(svc)
	SysRoleMenuInstance.Srv.SetServiceContext(svc)
	SysScheduleInstance.Srv.SetServiceContext(svc)
	SysScheduleHistoryInstance.Srv.SetServiceContext(svc)
	SysSchedulingInstance.Srv.SetServiceContext(svc)
	SysSettingInstance.Srv.SetServiceContext(svc)
	SysTableInstance.Srv.SetServiceContext(svc)
	SysTableColumnInstance.Srv.SetServiceContext(svc)
	SysTagInstance.Srv.SetServiceContext(svc)
	SysTagGroupInstance.Srv.SetServiceContext(svc)
	SysTrackerInstance.Srv.SetServiceContext(svc)
	SysUserInstance.Srv.SetServiceContext(svc)
	SysUserTemplateInstance.Srv.SetServiceContext(svc)
	SysUserTemplateDetailInstance.Srv.SetServiceContext(svc)
	SysWechatInstance.Srv.SetServiceContext(svc)
	SysWorkerInstance.Srv.SetServiceContext(svc)
	return nil
}
