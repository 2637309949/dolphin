// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package api

import (
	"context"

	"github.com/2637309949/dolphin/platform/svc"
	"github.com/json-iterator/go/extra"
)

var (
	App *Dolphin
	Run func()
)

// A Hook is a pair of start and stop callbacks, either of which can be nil,
// plus a string identifying the supplier of the hook.
type Hook struct {
	dol *Dolphin
}

// OnStart defined OnStart
func (h *Hook) OnStart(ctx context.Context) error {
	h.dol.Http.OnStart(ctx)
	h.dol.RPC.OnStart(ctx)
	return nil
}

// OnStop defined OnStop
func (h *Hook) OnStop(ctx context.Context) error {
	h.dol.Http.OnStop(ctx)
	h.dol.RPC.OnStop(ctx)
	return nil
}

// NewLifeHook defined TODO
func NewLifeHook(e *Dolphin) lifeHook {
	return &Hook{dol: e}
}

// init after NewEngine
func init() {
	extra.RegisterFuzzyDecoders()
	InitViper()
	InitLogger()
	InitRedisCli()
	InitOAuth2()

	app, svcHelper := NewDolphin(), svc.NewSvcHepler(RedisClient)
	app.SyncModel()
	app.SyncController()
	app.SyncService()
	app.SyncSrv(svcHelper)
	App, Run = app, app.Run
}
