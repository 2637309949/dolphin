// Code generated by dol build. Only Generate by tools if not existed.
// source: brand_info.go

package app

import (
	"e_com/model"
	"errors"

	"time"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/sirupsen/logrus"
	"github.com/thoas/go-funk"
)

// BrandInfoAdd api implementation
// @Summary 添加brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body model.BrandInfo false "brand_info信息"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/add [post]
func BrandInfoAdd(ctx *Context) {
	var payload model.BrandInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	payload.CreateTime = null.TimeFrom(time.Now())
	payload.Creater = null.IntFromStr(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now())
	payload.Updater = null.IntFromStr(ctx.GetToken().GetUserID())
	payload.IsDelete = null.IntFrom(0)
	ret, err := ctx.DB.Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoBatchAdd api implementation
// @Summary 添加brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body []model.BrandInfo false "brand_info信息"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/batch_add [post]
func BrandInfoBatchAdd(ctx *Context) {
	var payload []model.BrandInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	for i := range payload {
		payload[i].CreateTime = null.TimeFrom(time.Now())
		payload[i].Creater = null.IntFromStr(ctx.GetToken().GetUserID())
		payload[i].UpdateTime = null.TimeFrom(time.Now())
		payload[i].Updater = null.IntFromStr(ctx.GetToken().GetUserID())
		payload[i].IsDelete = null.IntFrom(0)
	}
	ret, err := ctx.DB.Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoDel api implementation
// @Summary 删除brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body model.BrandInfo false "brand_info"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/del [delete]
func BrandInfoDel(ctx *Context) {
	var payload model.BrandInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := ctx.DB.In("id", payload.BrandId.Int64).Update(&model.BrandInfo{
		UpdateTime: null.TimeFrom(time.Now()),
		Updater:    null.IntFromStr(ctx.GetToken().GetUserID()),
		IsDelete:   null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoBatchDel api implementation
// @Summary 删除brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body []model.BrandInfo false "brand_info"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/batch_del [delete]
func BrandInfoBatchDel(ctx *Context) {
	var payload []model.BrandInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	var ids = funk.Map(payload, func(form model.BrandInfo) int64 { return form.BrandId.Int64 }).([]int64)
	ret, err := ctx.DB.In("id", ids).Update(&model.BrandInfo{
		UpdateTime: null.TimeFrom(time.Now()),
		Updater:    null.IntFromStr(ctx.GetToken().GetUserID()),
		IsDelete:   null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoUpdate api implementation
// @Summary 更新brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body model.BrandInfo false "brand_info信息"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/update [put]
func BrandInfoUpdate(ctx *Context) {
	var payload model.BrandInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	payload.Updater = null.IntFromStr(ctx.GetToken().GetUserID())
	payload.UpdateTime = null.TimeFrom(time.Now())
	ret, err := ctx.DB.ID(payload.BrandId.Int64).Update(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoBatchUpdate api implementation
// @Summary 更新brand_info
// @Tags brand_info接口
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param brand_info body []model.BrandInfo false "brand_info信息"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/batch_update [put]
func BrandInfoBatchUpdate(ctx *Context) {
	var payload []model.BrandInfo
	var err error
	var ret []int64
	var r int64
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	s := ctx.DB.NewSession()
	s.Begin()
	defer s.Close()
	s.Begin()
	defer s.Close()
	for i := range payload {
		payload[i].UpdateTime = null.TimeFrom(time.Now())
		payload[i].Updater = null.IntFromStr(ctx.GetToken().GetUserID())
		r, err = s.ID(payload[i].BrandId.Int64).Update(&payload[i])
		if err != nil {
			logrus.Error(err)
			s.Rollback()
			ctx.Fail(err)
			return
		}
		ret = append(ret, r)
	}
	if err != nil {
		logrus.Error(err)
		s.Rollback()
		ctx.Fail(err)
		return
	}
	err = s.Commit()
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoPage api implementation
// @Summary brand_info分页查询
// @Tags brand_info接口
// @Param Authorization header string false "认证令牌"
// @Param page  query  int false "页码"
// @Param size  query  int false "单页数"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/page [get]
func BrandInfoPage(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetInt("page", 1)
	q.SetInt("size", 10)
	q.SetRule("brand_info_page")
	q.SetString("creater")
	q.SetString("updater")
	q.SetRange("create_time")
	q.SetRange("update_time")
	q.SetInt("is_delete", 0)()
	q.SetString("sort", "update_time desc")
	q.SetTags()
	ret, err := ctx.PageSearch(ctx.DB, "brand_info", "page", "brand_info", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// BrandInfoGet api implementation
// @Summary 获取brand_info信息
// @Tags brand_info接口
// @Param Authorization header string false "认证令牌"
// @Param id  query  string false "brand_infoid"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/brand/info/get [get]
func BrandInfoGet(ctx *Context) {
	var entity model.BrandInfo
	err := ctx.ShouldBindWith(&entity)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	if ext, err := ctx.DB.Get(&entity); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	} else if !ext {
		ctx.Fail(errors.New("not found"))
		return
	}
	ctx.Success(entity)
}
