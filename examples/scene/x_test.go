// Code generated by dol build. DO NOT EDIT.
// source: x_test.go
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"time"

	"github.com/2637309949/dolphin/platform/util"
	"github.com/spf13/viper"

	"scene/api"
)

var token string
var x *XTest

type (
	testingT interface {
		// Deadline() (time.Time, bool)
		Error(args ...interface{})
		Errorf(format string, args ...interface{})
		Fail()
		FailNow()
		Failed() bool
		Fatal(args ...interface{})
		Fatalf(format string, args ...interface{})
		Helper()
		Log(args ...interface{})
		Logf(format string, args ...interface{})
		Name() string
		// Parallel()
		Skip(args ...interface{})
		SkipNow()
		Skipf(format string, args ...interface{})
		Skipped() bool
	}
	XTest struct {
	}
	Response struct {
		Code int         `json:"code"`
		Data interface{} `json:"data"`
		Msg  string      `json:"msg"`
	}
	Context struct {
		*httptest.ResponseRecorder
		testingT testingT
	}
	Payload map[string]interface{}
)

// ParseBody defined TODO
func (ctx *Context) ParseBody(arg interface{}) error {
	return json.Unmarshal(ctx.Body.Bytes(), arg)
}

// serveHttp defined TODO
func (x *XTest) serveHttp(w http.ResponseWriter, req *http.Request) {
	api.App.ServeHTTP(w, req)
}

// handler defined TODO
func (x *XTest) handler(req *http.Request, h func(w *httptest.ResponseRecorder)) {
	w := httptest.NewRecorder()
	req.Header.Add("Authorization", "Bearer "+token)
	req.Header.Add("cache-control", "no-cache")
	req.Header.Add("origin", "http://localhost:"+viper.GetString("http.port"))
	req.Header.Add("accept", "application/json, text/plain, */*")
	req.Header.Add("accept-encoding", "gzip, deflate, br")
	req.Header.Add("accept-language", "zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7")
	req.Header.Add("user-agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36")
	x.serveHttp(w, req)
	h(w)
}

// Get defined TODO
func (x *XTest) Get(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// Options defined TODO
func (x *XTest) Options(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("OPTIONS", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// Post defined TODO
func (x *XTest) Post(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	jm, err := json.Marshal(&args)
	if err != nil {
		panic(err)
	}
	req, err := http.NewRequest("POST", url, bytes.NewReader(jm))
	if err != nil {
		panic(err)
	}
	req.Header.Add("Content-Type", "application/json")
	x.handler(req, h)
}

// Put defined TODO
func (x *XTest) Put(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	jm, err := json.Marshal(&args)
	if err != nil {
		panic(err)
	}
	req, err := http.NewRequest("PUT", url, bytes.NewReader(jm))
	if err != nil {
		panic(err)
	}
	req.Header.Add("Content-Type", "application/json")
	x.handler(req, h)
}

// Head defined TODO
func (x *XTest) Head(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("HEAD", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// HttpHandle defined TODO
func (x *XTest) Handle(method, reqPath string, funk func(ctx *Context), t testingT, args interface{}) {
	switch method {
	case "GET":
		x.Get(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "HEAD":
		x.Head(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "OPTIONS":
		x.Options(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "POST":
		x.Post(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "PUT":
		x.Put(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	}
}

// SetToken defined
func SetToken(tk string) {
	token = tk
}

// TestMain defined
func TestMain(m *testing.M) {
	x = &XTest{}
	util.Ensure(api.App.Reflesh())
	TestSysUserLogin(nil)
	os.Exit(m.Run())
}

// TestSysUserLogin defined TODO
func TestSysUserLogin(t *testing.T) {
	x.Handle("POST", "/api/sys/user/login", XTestSysUserLogin, t, XTestSysUserLoginRequest)
}
// TestArticleAdd defined TODO
// go test -v -test.run TestArticleAdd
func TestArticleAdd(t *testing.T) {
	x.Handle("POST", "/api/article/add", XTestArticleAdd, t, XTestArticleAddRequest)
}
// BenchmarkArticleAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleAdd -test.benchmem=true
func BenchmarkArticleAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/article/add", XTestArticleAdd, t, XTestArticleAddRequest)
			}
	})
}


// TestArticleBatchAdd defined TODO
// go test -v -test.run TestArticleBatchAdd
func TestArticleBatchAdd(t *testing.T) {
	x.Handle("POST", "/api/article/batch_add", XTestArticleBatchAdd, t, XTestArticleBatchAddRequest)
}
// BenchmarkArticleBatchAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleBatchAdd -test.benchmem=true
func BenchmarkArticleBatchAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/article/batch_add", XTestArticleBatchAdd, t, XTestArticleBatchAddRequest)
			}
	})
}


// TestArticleDel defined TODO
// go test -v -test.run TestArticleDel
func TestArticleDel(t *testing.T) {
	x.Handle("DELETE", "/api/article/del", XTestArticleDel, t, XTestArticleDelRequest)
}
// BenchmarkArticleDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleDel -test.benchmem=true
func BenchmarkArticleDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("DELETE", "/api/article/del", XTestArticleDel, t, XTestArticleDelRequest)
			}
	})
}


// TestArticleBatchDel defined TODO
// go test -v -test.run TestArticleBatchDel
func TestArticleBatchDel(t *testing.T) {
	x.Handle("PUT", "/api/article/batch_del", XTestArticleBatchDel, t, XTestArticleBatchDelRequest)
}
// BenchmarkArticleBatchDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleBatchDel -test.benchmem=true
func BenchmarkArticleBatchDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("PUT", "/api/article/batch_del", XTestArticleBatchDel, t, XTestArticleBatchDelRequest)
			}
	})
}


// TestArticleUpdate defined TODO
// go test -v -test.run TestArticleUpdate
func TestArticleUpdate(t *testing.T) {
	x.Handle("PUT", "/api/article/update", XTestArticleUpdate, t, XTestArticleUpdateRequest)
}
// BenchmarkArticleUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleUpdate -test.benchmem=true
func BenchmarkArticleUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("PUT", "/api/article/update", XTestArticleUpdate, t, XTestArticleUpdateRequest)
			}
	})
}


// TestArticleBatchUpdate defined TODO
// go test -v -test.run TestArticleBatchUpdate
func TestArticleBatchUpdate(t *testing.T) {
	x.Handle("PUT", "/api/article/batch_update", XTestArticleBatchUpdate, t, XTestArticleBatchUpdateRequest)
}
// BenchmarkArticleBatchUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleBatchUpdate -test.benchmem=true
func BenchmarkArticleBatchUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("PUT", "/api/article/batch_update", XTestArticleBatchUpdate, t, XTestArticleBatchUpdateRequest)
			}
	})
}


// TestArticlePage defined TODO
// go test -v -test.run TestArticlePage
func TestArticlePage(t *testing.T) {
	x.Handle("GET", "/api/article/page", XTestArticlePage, t, XTestArticlePageRequest)
}
// BenchmarkArticlePage defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticlePage -test.benchmem=true
func BenchmarkArticlePage(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/article/page", XTestArticlePage, t, XTestArticlePageRequest)
			}
	})
}


// TestArticleGet defined TODO
// go test -v -test.run TestArticleGet
func TestArticleGet(t *testing.T) {
	x.Handle("GET", "/api/article/get", XTestArticleGet, t, XTestArticleGetRequest)
}
// BenchmarkArticleGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticleGet -test.benchmem=true
func BenchmarkArticleGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/article/get", XTestArticleGet, t, XTestArticleGetRequest)
			}
	})
}


// TestArticlePayment defined TODO
// go test -v -test.run TestArticlePayment
func TestArticlePayment(t *testing.T) {
	x.Handle("POST", "/api/article/payment", XTestArticlePayment, t, XTestArticlePaymentRequest)
}
// BenchmarkArticlePayment defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkArticlePayment -test.benchmem=true
func BenchmarkArticlePayment(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/article/payment", XTestArticlePayment, t, XTestArticlePaymentRequest)
			}
	})
}



// TestCachingInfo defined TODO
// go test -v -test.run TestCachingInfo
func TestCachingInfo(t *testing.T) {
	x.Handle("GET", "/api/caching/info", XTestCachingInfo, t, XTestCachingInfoRequest)
}
// BenchmarkCachingInfo defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkCachingInfo -test.benchmem=true
func BenchmarkCachingInfo(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/caching/info", XTestCachingInfo, t, XTestCachingInfoRequest)
			}
	})
}



// TestDtmTcc defined TODO
// go test -v -test.run TestDtmTcc
func TestDtmTcc(t *testing.T) {
	x.Handle("GET", "/api/dtm/tcc", XTestDtmTcc, t, XTestDtmTccRequest)
}
// BenchmarkDtmTcc defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTcc -test.benchmem=true
func BenchmarkDtmTcc(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/dtm/tcc", XTestDtmTcc, t, XTestDtmTccRequest)
			}
	})
}


// TestDtmTransOut defined TODO
// go test -v -test.run TestDtmTransOut
func TestDtmTransOut(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_out", XTestDtmTransOut, t, XTestDtmTransOutRequest)
}
// BenchmarkDtmTransOut defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransOut -test.benchmem=true
func BenchmarkDtmTransOut(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_out", XTestDtmTransOut, t, XTestDtmTransOutRequest)
			}
	})
}


// TestDtmTransOutConfirm defined TODO
// go test -v -test.run TestDtmTransOutConfirm
func TestDtmTransOutConfirm(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_out_confirm", XTestDtmTransOutConfirm, t, XTestDtmTransOutConfirmRequest)
}
// BenchmarkDtmTransOutConfirm defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransOutConfirm -test.benchmem=true
func BenchmarkDtmTransOutConfirm(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_out_confirm", XTestDtmTransOutConfirm, t, XTestDtmTransOutConfirmRequest)
			}
	})
}


// TestDtmTransOutRevert defined TODO
// go test -v -test.run TestDtmTransOutRevert
func TestDtmTransOutRevert(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_out_revert", XTestDtmTransOutRevert, t, XTestDtmTransOutRevertRequest)
}
// BenchmarkDtmTransOutRevert defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransOutRevert -test.benchmem=true
func BenchmarkDtmTransOutRevert(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_out_revert", XTestDtmTransOutRevert, t, XTestDtmTransOutRevertRequest)
			}
	})
}


// TestDtmTransIn defined TODO
// go test -v -test.run TestDtmTransIn
func TestDtmTransIn(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_in", XTestDtmTransIn, t, XTestDtmTransInRequest)
}
// BenchmarkDtmTransIn defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransIn -test.benchmem=true
func BenchmarkDtmTransIn(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_in", XTestDtmTransIn, t, XTestDtmTransInRequest)
			}
	})
}


// TestDtmTransInConfirm defined TODO
// go test -v -test.run TestDtmTransInConfirm
func TestDtmTransInConfirm(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_in_confirm", XTestDtmTransInConfirm, t, XTestDtmTransInConfirmRequest)
}
// BenchmarkDtmTransInConfirm defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransInConfirm -test.benchmem=true
func BenchmarkDtmTransInConfirm(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_in_confirm", XTestDtmTransInConfirm, t, XTestDtmTransInConfirmRequest)
			}
	})
}


// TestDtmTransInRevert defined TODO
// go test -v -test.run TestDtmTransInRevert
func TestDtmTransInRevert(t *testing.T) {
	x.Handle("POST", "/api/dtm/trans_in_revert", XTestDtmTransInRevert, t, XTestDtmTransInRevertRequest)
}
// BenchmarkDtmTransInRevert defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkDtmTransInRevert -test.benchmem=true
func BenchmarkDtmTransInRevert(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/dtm/trans_in_revert", XTestDtmTransInRevert, t, XTestDtmTransInRevertRequest)
			}
	})
}



// TestEncryptAdd defined TODO
// go test -v -test.run TestEncryptAdd
func TestEncryptAdd(t *testing.T) {
	x.Handle("POST", "/api/encrypt/add", XTestEncryptAdd, t, XTestEncryptAddRequest)
}
// BenchmarkEncryptAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkEncryptAdd -test.benchmem=true
func BenchmarkEncryptAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/encrypt/add", XTestEncryptAdd, t, XTestEncryptAddRequest)
			}
	})
}


// TestEncryptInfo defined TODO
// go test -v -test.run TestEncryptInfo
func TestEncryptInfo(t *testing.T) {
	x.Handle("GET", "/api/encrypt/info", XTestEncryptInfo, t, XTestEncryptInfoRequest)
}
// BenchmarkEncryptInfo defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkEncryptInfo -test.benchmem=true
func BenchmarkEncryptInfo(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/encrypt/info", XTestEncryptInfo, t, XTestEncryptInfoRequest)
			}
	})
}




// TestJwtCheck defined TODO
// go test -v -test.run TestJwtCheck
func TestJwtCheck(t *testing.T) {
	x.Handle("GET", "/api/jwt/check", XTestJwtCheck, t, XTestJwtCheckRequest)
}
// BenchmarkJwtCheck defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkJwtCheck -test.benchmem=true
func BenchmarkJwtCheck(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/jwt/check", XTestJwtCheck, t, XTestJwtCheckRequest)
			}
	})
}



// TestKafkaAdd defined TODO
// go test -v -test.run TestKafkaAdd
func TestKafkaAdd(t *testing.T) {
	x.Handle("POST", "/api/kafka/add", XTestKafkaAdd, t, XTestKafkaAddRequest)
}
// BenchmarkKafkaAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkKafkaAdd -test.benchmem=true
func BenchmarkKafkaAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/kafka/add", XTestKafkaAdd, t, XTestKafkaAddRequest)
			}
	})
}


// TestKafkaGet defined TODO
// go test -v -test.run TestKafkaGet
func TestKafkaGet(t *testing.T) {
	x.Handle("GET", "/api/kafka/get", XTestKafkaGet, t, XTestKafkaGetRequest)
}
// BenchmarkKafkaGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkKafkaGet -test.benchmem=true
func BenchmarkKafkaGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/kafka/get", XTestKafkaGet, t, XTestKafkaGetRequest)
			}
	})
}



// TestMiddlesGlobalTest defined TODO
// go test -v -test.run TestMiddlesGlobalTest
func TestMiddlesGlobalTest(t *testing.T) {
	x.Handle("GET", "/api/middles/globalTest", XTestMiddlesGlobalTest, t, XTestMiddlesGlobalTestRequest)
}
// BenchmarkMiddlesGlobalTest defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkMiddlesGlobalTest -test.benchmem=true
func BenchmarkMiddlesGlobalTest(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/middles/globalTest", XTestMiddlesGlobalTest, t, XTestMiddlesGlobalTestRequest)
			}
	})
}


// TestMiddlesLocalTest defined TODO
// go test -v -test.run TestMiddlesLocalTest
func TestMiddlesLocalTest(t *testing.T) {
	x.Handle("GET", "/api/middles/localTest", XTestMiddlesLocalTest, t, XTestMiddlesLocalTestRequest)
}
// BenchmarkMiddlesLocalTest defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkMiddlesLocalTest -test.benchmem=true
func BenchmarkMiddlesLocalTest(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/middles/localTest", XTestMiddlesLocalTest, t, XTestMiddlesLocalTestRequest)
			}
	})
}



// TestNsqAdd defined TODO
// go test -v -test.run TestNsqAdd
func TestNsqAdd(t *testing.T) {
	x.Handle("POST", "/api/nsq/add", XTestNsqAdd, t, XTestNsqAddRequest)
}
// BenchmarkNsqAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkNsqAdd -test.benchmem=true
func BenchmarkNsqAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/nsq/add", XTestNsqAdd, t, XTestNsqAddRequest)
			}
	})
}


// TestNsqGet defined TODO
// go test -v -test.run TestNsqGet
func TestNsqGet(t *testing.T) {
	x.Handle("GET", "/api/nsq/get", XTestNsqGet, t, XTestNsqGetRequest)
}
// BenchmarkNsqGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkNsqGet -test.benchmem=true
func BenchmarkNsqGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/nsq/get", XTestNsqGet, t, XTestNsqGetRequest)
			}
	})
}



// TestRedisLockLock defined TODO
// go test -v -test.run TestRedisLockLock
func TestRedisLockLock(t *testing.T) {
	x.Handle("GET", "/api/redis/lock/lock", XTestRedisLockLock, t, XTestRedisLockLockRequest)
}
// BenchmarkRedisLockLock defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkRedisLockLock -test.benchmem=true
func BenchmarkRedisLockLock(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/redis/lock/lock", XTestRedisLockLock, t, XTestRedisLockLockRequest)
			}
	})
}


// TestRedisLockUnlock defined TODO
// go test -v -test.run TestRedisLockUnlock
func TestRedisLockUnlock(t *testing.T) {
	x.Handle("GET", "/api/redis/lock/unlock", XTestRedisLockUnlock, t, XTestRedisLockUnlockRequest)
}
// BenchmarkRedisLockUnlock defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkRedisLockUnlock -test.benchmem=true
func BenchmarkRedisLockUnlock(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/redis/lock/unlock", XTestRedisLockUnlock, t, XTestRedisLockUnlockRequest)
			}
	})
}



// TestRedisMqAdd defined TODO
// go test -v -test.run TestRedisMqAdd
func TestRedisMqAdd(t *testing.T) {
	x.Handle("POST", "/api/redis/mq/add", XTestRedisMqAdd, t, XTestRedisMqAddRequest)
}
// BenchmarkRedisMqAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkRedisMqAdd -test.benchmem=true
func BenchmarkRedisMqAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/redis/mq/add", XTestRedisMqAdd, t, XTestRedisMqAddRequest)
			}
	})
}


// TestRedisMqGet defined TODO
// go test -v -test.run TestRedisMqGet
func TestRedisMqGet(t *testing.T) {
	x.Handle("GET", "/api/redis/mq/get", XTestRedisMqGet, t, XTestRedisMqGetRequest)
}
// BenchmarkRedisMqGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkRedisMqGet -test.benchmem=true
func BenchmarkRedisMqGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/redis/mq/get", XTestRedisMqGet, t, XTestRedisMqGetRequest)
			}
	})
}



// TestRPCMessage defined TODO
// go test -v -test.run TestRPCMessage
func TestRPCMessage(t *testing.T) {
	x.Handle("GET", "/api/rpc/message", XTestRPCMessage, t, XTestRPCMessageRequest)
}
// BenchmarkRPCMessage defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkRPCMessage -test.benchmem=true
func BenchmarkRPCMessage(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/rpc/message", XTestRPCMessage, t, XTestRPCMessageRequest)
			}
	})
}



// TestSqlmapSelectone defined TODO
// go test -v -test.run TestSqlmapSelectone
func TestSqlmapSelectone(t *testing.T) {
	x.Handle("GET", "/api/sqlmap/selectone", XTestSqlmapSelectone, t, XTestSqlmapSelectoneRequest)
}
// BenchmarkSqlmapSelectone defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkSqlmapSelectone -test.benchmem=true
func BenchmarkSqlmapSelectone(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/sqlmap/selectone", XTestSqlmapSelectone, t, XTestSqlmapSelectoneRequest)
			}
	})
}



// TestUserInfo defined TODO
// go test -v -test.run TestUserInfo
func TestUserInfo(t *testing.T) {
	x.Handle("GET", "/api/user/info", XTestUserInfo, t, XTestUserInfoRequest)
}
// BenchmarkUserInfo defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkUserInfo -test.benchmem=true
func BenchmarkUserInfo(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/user/info", XTestUserInfo, t, XTestUserInfoRequest)
			}
	})
}



// TestViewFile defined TODO
// go test -v -test.run TestViewFile
func TestViewFile(t *testing.T) {
	x.Handle("GET", "/api/view/file", XTestViewFile, t, XTestViewFileRequest)
}
// BenchmarkViewFile defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkViewFile -test.benchmem=true
func BenchmarkViewFile(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/view/file", XTestViewFile, t, XTestViewFileRequest)
			}
	})
}


// TestViewHTML defined TODO
// go test -v -test.run TestViewHTML
func TestViewHTML(t *testing.T) {
	x.Handle("GET", "/api/view/html", XTestViewHTML, t, XTestViewHTMLRequest)
}
// BenchmarkViewHTML defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkViewHTML -test.benchmem=true
func BenchmarkViewHTML(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/view/html", XTestViewHTML, t, XTestViewHTMLRequest)
			}
	})
}


// TestViewXML defined TODO
// go test -v -test.run TestViewXML
func TestViewXML(t *testing.T) {
	x.Handle("GET", "/api/view/xml", XTestViewXML, t, XTestViewXMLRequest)
}
// BenchmarkViewXML defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkViewXML -test.benchmem=true
func BenchmarkViewXML(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("GET", "/api/view/xml", XTestViewXML, t, XTestViewXMLRequest)
			}
	})
}



// TestVoteLike defined TODO
// go test -v -test.run TestVoteLike
func TestVoteLike(t *testing.T) {
	x.Handle("POST", "/api/vote/like", XTestVoteLike, t, XTestVoteLikeRequest)
}
// BenchmarkVoteLike defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkVoteLike -test.benchmem=true
func BenchmarkVoteLike(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/vote/like", XTestVoteLike, t, XTestVoteLikeRequest)
			}
	})
}



// TestXlsxImport defined TODO
// go test -v -test.run TestXlsxImport
func TestXlsxImport(t *testing.T) {
	x.Handle("POST", "/api/xlsx/import", XTestXlsxImport, t, XTestXlsxImportRequest)
}
// BenchmarkXlsxImport defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkXlsxImport -test.benchmem=true
func BenchmarkXlsxImport(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				x.Handle("POST", "/api/xlsx/import", XTestXlsxImport, t, XTestXlsxImportRequest)
			}
	})
}



