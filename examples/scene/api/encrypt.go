// Code generated by dol build. Only Generate by tools if not existed.
// source: encrypt.go

package api

import (
	"scene/types"

	"github.com/2637309949/dolphin/packages/logrus"
)

// EncryptAdd api implementation
// @Summary Add Encrypt
// @Tags Encrypt controller
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param encrypt_info body types.EncryptInfo false "Encrypt info"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/encrypt/add [post]
func (ctr *Encrypt) EncryptAdd(ctx *Context) {
	var payload types.EncryptInfo
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(payload)
}

// EncryptInfo api implementation
// @Summary skip auth
// @Tags Encrypt controller
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/encrypt/info [get]
func (ctr *Encrypt) EncryptInfo(ctx *Context) {
	q := ctx.TypeQuery()
	q.Value()

	db := ctx.MustDB()
	ret, err := ctr.Srv.TODO(ctx, db, struct{}{})
	if err != nil {
		logrus.Error(ctx, err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
