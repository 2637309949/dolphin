// Code generated by dol build. Only Generate by tools if not existed.
// source: dtm.go

package srv

import (
	"context"
	"errors"
	"time"

	"scene/svc"
	"scene/types"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"github.com/yedf/dtm/dtmcli"
)

type Dtm struct {
	*svc.ServiceContext
	DtmServer string
}

func NewDtm() *Dtm {
	return &Dtm{}
}

// SetServiceContext defined TODO
func (srv *Dtm) SetServiceContext(svc *svc.ServiceContext) {
	srv.ServiceContext = svc
}

// TODO defined srv
func (srv *Dtm) TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi <- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case <-cwt.Done():
			logrus.Infoln("child process interrupt...")
			return <-chi, cwt.Err()
		default:
			logrus.Infoln("awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}

// Trans defined srv
func (srv *Dtm) Trans(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	logrus.Printf("tcc transaction begin")
	srvAddress := "http://localhost" + viper.GetString("http.port") + "/api/dtm"
	gid := dtmcli.MustGenGid(viper.GetString("dtm.srv"))
	err := dtmcli.TccGlobalTransaction(viper.GetString("dtm.srv"), gid, func(tcc *dtmcli.Tcc) (rerr error) {
		res1, rerr := tcc.CallBranch(&types.TransReq{Amount: null.IntFrom(30)}, srvAddress+"/trans_out", srvAddress+"/trans_out_confirm", srvAddress+"/trans_out_revert")
		if rerr != nil {
			return rerr
		}
		res2, rerr := tcc.CallBranch(&types.TransReq{Amount: null.IntFrom(30)}, srvAddress+"/trans_in", srvAddress+"/trans_in_confirm", srvAddress+"/trans_in_revert")
		if rerr != nil {
			return rerr
		}
		logrus.Printf("tcc returns: %s, %s", res1.String(), res2.String())
		return
	})
	return gid, err
}
