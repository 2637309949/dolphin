// Code generated by dol build. Only Generate by tools if not existed.
// source: like.go

package srv

import (
	"context"
	"fmt"
	"scene/model"

	"github.com/2637309949/dolphin/packages/gin"
	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/time"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/platform/app"
)

// VoteLike defined srv
func VoteLike(ctx *gin.Context, db *xorm.Engine, params model.VoteInfo) (interface{}, error) {
	// 1.写入post_set
	if _, err := app.RedisClient.SAdd(context.Background(), "post_set", params.PostId.String).Result(); err != nil {
		return nil, err
	}
	// 2.写入post_user_like_set_{$post_id}
	ext, err := app.RedisClient.SIsMember(context.Background(), fmt.Sprintf("post_user_like_set_%v", params.PostId.String), params.UserId.String).Result()
	if err != nil {
		return nil, err
	}
	if ext {
		// 3.取消点赞,仅仅判断缓存级别的
		if _, err := app.RedisClient.SRem(context.Background(), fmt.Sprintf("post_user_like_set_%v", params.PostId.String), params.UserId.String).Result(); err != nil {
			return nil, err
		}
		// 4.删除post_user_like_{$post_id}{$user_id}
		if _, err := app.RedisClient.Del(context.Background(), fmt.Sprintf("post_user_like_%v%v", params.PostId.String, params.UserId.String)).Result(); err != nil {
			return nil, err
		}
		// 5.删减计数
		if _, err := app.RedisClient.Decr(context.Background(), fmt.Sprintf("post%v_counter", params.PostId.String)).Result(); err != nil {
			return nil, err
		}
	} else {
		// 3.添加点赞,仅仅判断缓存级别的
		if _, err := app.RedisClient.SAdd(context.Background(), fmt.Sprintf("post_user_like_set_%v", params.PostId.String), params.UserId.String).Result(); err != nil {
			return nil, err
		}
		// 4.写入post_user_like_{$post_id}{$user_id}
		if _, err := app.RedisClient.HMSet(context.Background(), fmt.Sprintf("post_user_like_%v%v", params.PostId.String, params.UserId.String), "create_time", time.Now().Value().Format("2006-01-02 15:04")).Result(); err != nil {
			return nil, err
		}
		// 5.新增计数
		if _, err := app.RedisClient.Incr(context.Background(), fmt.Sprintf("post%v_counter", params.PostId.String)).Result(); err != nil {
			return nil, err
		}
	}
	return "ok", nil
}

func init() {
	app.App.Manager.Cron().AddFunc("*/10 * * * * *", func() {
		logrus.Infoln("scan vote")
		num1, err := app.RedisClient.SCard(context.Background(), "post_set").Result()
		if err != nil {
			logrus.Error(err)
			return
		}
		for i := int64(0); i < num1; i++ {
			ulps := []model.UserLikePost{}
			postId, err := app.RedisClient.SPop(context.Background(), "post_set").Result()
			if err != nil {
				logrus.Error(err)
				break
			}
			num2, err := app.RedisClient.SCard(context.Background(), fmt.Sprintf("post_user_like_set_%v", postId)).Result()
			if err != nil {
				logrus.Error(err)
				break
			}
			for i := int64(0); i < num2; i++ {
				ulp := model.UserLikePost{}
				userId, err := app.RedisClient.SPop(context.Background(), fmt.Sprintf("post_user_like_set_%v", postId)).Result()
				if err != nil {
					logrus.Error(err)
					break
				}
				field, err := app.RedisClient.HMGet(context.Background(), fmt.Sprintf("post_user_like_%v%v", postId, userId), "create_time").Result()
				if err != nil {
					logrus.Error(err)
					break
				}
				te, _ := time.Parse("2006-01-02 15:04", fmt.Sprintf("%v", field[0]))
				ulp.ID = null.StringFromUUID()
				ulp.UserId = null.StringFrom(userId)
				ulp.PostId = null.StringFrom(postId)
				ulp.CreateTime = null.TimeFrom(te.Value())
				ulp.UpdateTime = null.TimeFrom(te.Value())
				ulps = append(ulps, ulp)
				if _, err := app.RedisClient.Del(context.Background(), fmt.Sprintf("post_user_like_%v%v", postId, userId)).Result(); err != nil {
					logrus.Error(err)
					break
				}
				if _, err := app.RedisClient.Decr(context.Background(), fmt.Sprintf("post%v_counter", postId)).Result(); err != nil {
					logrus.Error(err)
					break
				}
			}
			fmt.Println("ulps = ", ulps)
		}
	})
}
