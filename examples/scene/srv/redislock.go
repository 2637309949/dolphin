// Code generated by dol build. Only Generate by tools if not existed.
// source: redis.go

package srv

import (
	"errors"
	"time"

	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/gin-gonic/gin"
	"github.com/go-redis/redis/v8"
	"github.com/go-redsync/redsync/v4"
	"github.com/go-redsync/redsync/v4/redis/goredis/v8"
)

var RedSync *redsync.Redsync

func init() {
	RedSync = redsync.New(goredis.NewPool(redis.NewClient(&redis.Options{
		Addr: "localhost:6379",
	})))
}

// RedisLockTODO defined srv
func RedisLockTODO(ctx *gin.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	mutexname := "my-global-mutex"
	mutex := RedSync.NewMutex(mutexname)
	if err := mutex.Lock(); err != nil {
		panic(err)
	}

	time.Sleep(50 * time.Millisecond)

	if ok, err := mutex.Unlock(); !ok || err != nil {
		panic("unlock failed")
	}
	return nil, errors.New("no implementation found")
}
