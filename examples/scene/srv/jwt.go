// Code generated by dol build. Only Generate by tools if not existed.
// source: jwt.go

package srv

import (
	"context"
	"errors"
	"fmt"
	"time"

	"scene/svc"

	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/platform/api"
	"github.com/2637309949/dolphin/platform/types"
)

type Jwt struct {
	*svc.ServiceContext
}

func NewJwt() *Jwt {
	return &Jwt{}
}

// SetServiceContext defined TODO
func (srv *Jwt) SetServiceContext(svc *svc.ServiceContext) {
	srv.ServiceContext = svc
}

// CreateJWT defined TODO
func (srv *Jwt) CreateJWT(ctx context.Context, db *xorm.Engine, params struct{}) (string, error) {
	tk, err := api.App.Identity.GetProvider(new(api.JWTProvider).GetName()).Ticket(fmt.Sprintf("%v", types.DefaultAdmin.ID.Int64), "localhost", nil)
	return tk.GetAccess(), err
}

// TODO defined srv
func (srv *Jwt) TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi <- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case <-cwt.Done():
			logrus.Infoln(ctx, "child process interrupt...")
			return <-chi, cwt.Err()
		default:
			logrus.Infoln(ctx, "awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}
