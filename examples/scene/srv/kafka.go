// Code generated by dol build. Only Generate by tools if not existed.
// source: kafka.go

package srv

import (
	"context"
	"encoding/json"
	"time"

	"scene/svc"
	"scene/types"

	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/go-errors/errors"
	"github.com/sirupsen/logrus"
)

func init() {
	go new(svc.SvcHepler).ReadMessage(context.Background(), "score-topic", func(data []byte) {
		value := types.KafkaInfo{}
		if err := json.Unmarshal(data, &value); err != nil {
			logrus.Error("failed to unmarshal:", err)
		}
		logrus.Infof("kafka#%v", value)
	}, 2)
}

type Kafka struct {
	svc.Svc
}

func NewKafka() *Kafka {
	return &Kafka{}
}

// TODO defined srv
func (srv *Kafka) TODO(ctx context.Context, db *xorm.Engine, params struct{}) (interface{}, error) {
	cwt, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()
	chi := func(context.Context) chan interface{} {
		chi := make(chan interface{}, 1)
		go func() {
			time.Sleep(1 * time.Second)
			chi <- 100
			cancel()
			close(chi)
		}()
		return chi
	}(cwt)
	for range ticker.C {
		select {
		case <-cwt.Done():
			logrus.Infoln("child process interrupt...")
			return <-chi, cwt.Err()
		default:
			logrus.Infoln("awaiting job...")
		}
	}
	return nil, errors.New("no implementation found")
}

// WriteMessages defined srv
func (srv *Kafka) WriteMessages(ctx context.Context, params types.KafkaInfo) error {
	err := srv.Svc.WriteMessages(ctx, "score-topic", params)
	if err != nil {
		return err
	}
	return nil
}
