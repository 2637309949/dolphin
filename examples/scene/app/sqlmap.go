// Code generated by dol build. Only Generate by tools if not existed.
// source: sqlmap.go

package app

import (
	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/null"
	pModel "github.com/2637309949/dolphin/platform/model"
)

// SqlmapSelectone api implementation
// @Summary 测试selectone
// @Tags SQL集合
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/sqlmap/selectone [get]
func SqlmapSelectone(ctx *Context) {
	var user pModel.SysUser
	_, err := ctx.PlatformDB.SqlMapClient("selectone_sys_user", &map[string]interface{}{"id": pModel.DefaultAdmin.ID.ValueOrZero()}).Get(&user)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	mbt, err := user.With(new(struct {
		ID        null.String `json:"id" xml:"id"`
		Name      null.String `json:"name" xml:"name"`
		NickName  null.String `json:"nickname" xml:"nickname"`
		Mobile    null.String `json:"mobile" xml:"mobile"`
		Email     null.String `json:"email" xml:"email"`
		RoleName  null.String `json:"role_name" xml:"role_name"`
		UserRole  null.String `json:"user_role" xml:"user_role"`
		OrgName   null.String `json:"org_name" xml:"org_name"`
		OrgID     null.String `json:"org_id" xml:"org_id"`
		TempID    null.String `json:"temp_id" xml:"temp_id"`
		TempValue null.String `json:"temp_value" xml:"temp_value"`
	}))
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(mbt)
}
