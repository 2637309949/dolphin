// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package app

import (
	"oauth/model"

	"github.com/2637309949/dolphin/packages/logrus"
	"github.com/2637309949/dolphin/packages/viper"
	"github.com/2637309949/dolphin/platform/util"
)

// Name project
var Name = "oauth"

// Article defined
type Article struct {
	Add,
	Del,
	Update,
	Page,
	Get func(ctx *Context)
}

// NewArticle defined
func NewArticle() *Article {
	ctr := &Article{}
	ctr.Add = ArticleAdd
	ctr.Del = ArticleDel
	ctr.Update = ArticleUpdate
	ctr.Page = ArticlePage
	ctr.Get = ArticleGet
	return ctr
}

// ArticleRoutes defined
func ArticleRoutes(engine *Engine) {
	group := engine.Group(viper.GetString("http.prefix"))
	group.Handle("POST", "/article/add", Auth, ArticleInstance.Add)
	group.Handle("DELETE", "/article/del", Auth, ArticleInstance.Del)
	group.Handle("PUT", "/article/update", Auth, ArticleInstance.Update)
	group.Handle("GET", "/article/page", Auth, ArticleInstance.Page)
	group.Handle("GET", "/article/get", Auth, ArticleInstance.Get)
}

// ArticleInstance defined
var ArticleInstance = NewArticle()

// SyncModel defined
func SyncModel() error {
	mseti := App.Manager.MSet()
	mseti.Add(new(model.Article))
	return nil
}

// SyncCtr defined
func SyncCtr() error {
	ArticleRoutes(App)
	return nil
}

// SyncService defined
func SyncService() error {
	return nil
}

// Executor defined
var Executor = util.NewExecutor(SyncModel, SyncCtr, SyncService)

func init() {
	if err := Executor.Execute(); err != nil {
		logrus.Fatal(err)
	}
}
