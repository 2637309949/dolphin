// Code generated by dol build. DO NOT EDIT.
// source: x_test.go
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/spf13/viper"

	"aisle/api"
	"aisle/util/errors"
)

var token string
var x *XTest

type (
	testingT interface {
		// Deadline() (time.Time, bool)
		Error(args ...interface{})
		Errorf(format string, args ...interface{})
		Fail()
		FailNow()
		Failed() bool
		Fatal(args ...interface{})
		Fatalf(format string, args ...interface{})
		Helper()
		Log(args ...interface{})
		Logf(format string, args ...interface{})
		Name() string
		// Parallel()
		Skip(args ...interface{})
		SkipNow()
		Skipf(format string, args ...interface{})
		Skipped() bool
	}
	XTest struct {
	}
	Response struct {
		Code int         `json:"code"`
		Data interface{} `json:"data"`
		Msg  string      `json:"msg"`
	}
	Context struct {
		*httptest.ResponseRecorder
		testingT testingT
	}
	Payload map[string]interface{}
)

// ParseBody defined TODO
func (ctx *Context) ParseBody(arg interface{}) error {
	return json.Unmarshal(ctx.Body.Bytes(), arg)
}

// serveHttp defined TODO
func (x *XTest) serveHttp(w http.ResponseWriter, req *http.Request) {
	api.App.ServeHTTP(w, req)
}

// handler defined TODO
func (x *XTest) handler(req *http.Request, h func(w *httptest.ResponseRecorder)) {
	w := httptest.NewRecorder()
	req.Header.Add("Authorization", "Bearer "+token)
	req.Header.Add("cache-control", "no-cache")
	req.Header.Add("origin", "http://localhost"+viper.GetString("http.port"))
	req.Header.Add("accept", "application/json, text/plain, */*")
	req.Header.Add("accept-encoding", "gzip, deflate, br")
	req.Header.Add("accept-language", "zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7")
	req.Header.Add("user-agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36")
	x.serveHttp(w, req)
	h(w)
}

// Get defined TODO
func (x *XTest) Get(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// Options defined TODO
func (x *XTest) Options(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("OPTIONS", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// Post defined TODO
func (x *XTest) Post(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	jm, err := json.Marshal(&args)
	if err != nil {
		panic(err)
	}
	req, err := http.NewRequest("POST", url, bytes.NewReader(jm))
	if err != nil {
		panic(err)
	}
	req.Header.Add("Content-Type", "application/json")
	x.handler(req, h)
}

// Put defined TODO
func (x *XTest) Put(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	jm, err := json.Marshal(&args)
	if err != nil {
		panic(err)
	}
	req, err := http.NewRequest("PUT", url, bytes.NewReader(jm))
	if err != nil {
		panic(err)
	}
	req.Header.Add("Content-Type", "application/json")
	x.handler(req, h)
}

// Head defined TODO
func (x *XTest) Head(url string, args interface{}, h func(w *httptest.ResponseRecorder)) {
	payload := Payload{}
	br, _ := json.Marshal(args)
	json.Unmarshal(br, &payload)
	url += "?"
	for k, v := range payload {
		url += fmt.Sprintf("%v=%v&", k, v)
	}
	req, err := http.NewRequest("HEAD", url, nil)
	if err != nil {
		panic(err)
	}
	x.handler(req, h)
}

// HttpHandle defined TODO
func (x *XTest) Handle(method, reqPath string, funk func(ctx *Context), t testingT, args interface{}) {
	switch method {
	case "GET":
		x.Get(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "HEAD":
		x.Head(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "OPTIONS":
		x.Options(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "POST":
		x.Post(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	case "PUT":
		x.Put(reqPath, args, func(w *httptest.ResponseRecorder) { funk(&Context{w, t}) })
	}
}

// SetToken defined
func SetToken(tk string) {
	token = tk
}

// TestMain defined
func TestMain(m *testing.M) {
	x = &XTest{}
	if err := api.App.Reflesh(); err != nil {
		panic(fmt.Errorf("%v\n%v", err, string(errors.Wrap(err, 2).Stack())))
	}
	TestSysUserLogin(nil)
	os.Exit(m.Run())
}

// TestSysUserLogin defined TODO
func TestSysUserLogin(t *testing.T) {
	x.Handle("POST", "/api/sys/user/login", XTestSysUserLogin, t, XTestSysUserLoginRequest)
}

// TestBaseOrganAdd defined TODO
// go test -v -test.run TestBaseOrganAdd
func TestBaseOrganAdd(t *testing.T) {
	x.Handle("POST", "/api/base/organ/add", XTestBaseOrganAdd, t, XTestBaseOrganAddRequest)
}

// BenchmarkBaseOrganAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganAdd -test.benchmem=true
func BenchmarkBaseOrganAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("POST", "/api/base/organ/add", XTestBaseOrganAdd, t, XTestBaseOrganAddRequest)
		}
	})
}

// TestBaseOrganBatchAdd defined TODO
// go test -v -test.run TestBaseOrganBatchAdd
func TestBaseOrganBatchAdd(t *testing.T) {
	x.Handle("POST", "/api/base/organ/batch_add", XTestBaseOrganBatchAdd, t, XTestBaseOrganBatchAddRequest)
}

// BenchmarkBaseOrganBatchAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchAdd -test.benchmem=true
func BenchmarkBaseOrganBatchAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("POST", "/api/base/organ/batch_add", XTestBaseOrganBatchAdd, t, XTestBaseOrganBatchAddRequest)
		}
	})
}

// TestBaseOrganDel defined TODO
// go test -v -test.run TestBaseOrganDel
func TestBaseOrganDel(t *testing.T) {
	x.Handle("DELETE", "/api/base/organ/del", XTestBaseOrganDel, t, XTestBaseOrganDelRequest)
}

// BenchmarkBaseOrganDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganDel -test.benchmem=true
func BenchmarkBaseOrganDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("DELETE", "/api/base/organ/del", XTestBaseOrganDel, t, XTestBaseOrganDelRequest)
		}
	})
}

// TestBaseOrganBatchDel defined TODO
// go test -v -test.run TestBaseOrganBatchDel
func TestBaseOrganBatchDel(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/batch_del", XTestBaseOrganBatchDel, t, XTestBaseOrganBatchDelRequest)
}

// BenchmarkBaseOrganBatchDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchDel -test.benchmem=true
func BenchmarkBaseOrganBatchDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/batch_del", XTestBaseOrganBatchDel, t, XTestBaseOrganBatchDelRequest)
		}
	})
}

// TestBaseOrganUpdate defined TODO
// go test -v -test.run TestBaseOrganUpdate
func TestBaseOrganUpdate(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/update", XTestBaseOrganUpdate, t, XTestBaseOrganUpdateRequest)
}

// BenchmarkBaseOrganUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganUpdate -test.benchmem=true
func BenchmarkBaseOrganUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/update", XTestBaseOrganUpdate, t, XTestBaseOrganUpdateRequest)
		}
	})
}

// TestBaseOrganBatchUpdate defined TODO
// go test -v -test.run TestBaseOrganBatchUpdate
func TestBaseOrganBatchUpdate(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/batch_update", XTestBaseOrganBatchUpdate, t, XTestBaseOrganBatchUpdateRequest)
}

// BenchmarkBaseOrganBatchUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchUpdate -test.benchmem=true
func BenchmarkBaseOrganBatchUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/batch_update", XTestBaseOrganBatchUpdate, t, XTestBaseOrganBatchUpdateRequest)
		}
	})
}

// TestBaseOrganPage defined TODO
// go test -v -test.run TestBaseOrganPage
func TestBaseOrganPage(t *testing.T) {
	x.Handle("GET", "/api/base/organ/page", XTestBaseOrganPage, t, XTestBaseOrganPageRequest)
}

// BenchmarkBaseOrganPage defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganPage -test.benchmem=true
func BenchmarkBaseOrganPage(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("GET", "/api/base/organ/page", XTestBaseOrganPage, t, XTestBaseOrganPageRequest)
		}
	})
}

// TestBaseOrganGet defined TODO
// go test -v -test.run TestBaseOrganGet
func TestBaseOrganGet(t *testing.T) {
	x.Handle("GET", "/api/base/organ/get", XTestBaseOrganGet, t, XTestBaseOrganGetRequest)
}

// BenchmarkBaseOrganGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganGet -test.benchmem=true
func BenchmarkBaseOrganGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("GET", "/api/base/organ/get", XTestBaseOrganGet, t, XTestBaseOrganGetRequest)
		}
	})
}
