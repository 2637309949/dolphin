// Code generated by dol build. DO NOT EDIT.
// source: x_test.go
package main

import (
	"fmt"
	"os"
	"testing"

	"github.com/2637309949/dolphin/packages/xtest"

	"aisle/api"
	"aisle/svc"
	"aisle/util/errors"

	pApi "github.com/2637309949/dolphin/platform/api"
)

var x *xtest.XTest

// TestMain defined
func TestMain(m *testing.M) {
	api.SyncModel()
	api.SyncSrv(svc.NewServiceContext(pApi.CacheStore))
	api.SyncController()
	x = xtest.New(pApi.App)
	if err := pApi.App.Initialize(); err != nil {
		panic(fmt.Errorf("%v\n%v", err, string(errors.Wrap(err, 2).Stack())))
	}
	TestSysUserLogin(nil)
	os.Exit(m.Run())
}

// TestSysUserLogin defined TODO
func TestSysUserLogin(t *testing.T) {
	x.Handle("POST", "/api/sys/user/login", XTestSysUserLogin, t, XTestSysUserLoginRequest)
}

// TestBaseOrganAdd defined TODO
// go test -v -test.run TestBaseOrganAdd
func TestBaseOrganAdd(t *testing.T) {
	x.Handle("POST", "/api/base/organ/add", XTestBaseOrganAdd, t, XTestBaseOrganAddRequest)
}

// BenchmarkBaseOrganAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganAdd -test.benchmem=true
func BenchmarkBaseOrganAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("POST", "/api/base/organ/add", XTestBaseOrganAdd, t, XTestBaseOrganAddRequest)
		}
	})
}

// TestBaseOrganBatchAdd defined TODO
// go test -v -test.run TestBaseOrganBatchAdd
func TestBaseOrganBatchAdd(t *testing.T) {
	x.Handle("POST", "/api/base/organ/batch_add", XTestBaseOrganBatchAdd, t, XTestBaseOrganBatchAddRequest)
}

// BenchmarkBaseOrganBatchAdd defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchAdd -test.benchmem=true
func BenchmarkBaseOrganBatchAdd(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("POST", "/api/base/organ/batch_add", XTestBaseOrganBatchAdd, t, XTestBaseOrganBatchAddRequest)
		}
	})
}

// TestBaseOrganDel defined TODO
// go test -v -test.run TestBaseOrganDel
func TestBaseOrganDel(t *testing.T) {
	x.Handle("DELETE", "/api/base/organ/del", XTestBaseOrganDel, t, XTestBaseOrganDelRequest)
}

// BenchmarkBaseOrganDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganDel -test.benchmem=true
func BenchmarkBaseOrganDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("DELETE", "/api/base/organ/del", XTestBaseOrganDel, t, XTestBaseOrganDelRequest)
		}
	})
}

// TestBaseOrganBatchDel defined TODO
// go test -v -test.run TestBaseOrganBatchDel
func TestBaseOrganBatchDel(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/batch_del", XTestBaseOrganBatchDel, t, XTestBaseOrganBatchDelRequest)
}

// BenchmarkBaseOrganBatchDel defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchDel -test.benchmem=true
func BenchmarkBaseOrganBatchDel(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/batch_del", XTestBaseOrganBatchDel, t, XTestBaseOrganBatchDelRequest)
		}
	})
}

// TestBaseOrganUpdate defined TODO
// go test -v -test.run TestBaseOrganUpdate
func TestBaseOrganUpdate(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/update", XTestBaseOrganUpdate, t, XTestBaseOrganUpdateRequest)
}

// BenchmarkBaseOrganUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganUpdate -test.benchmem=true
func BenchmarkBaseOrganUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/update", XTestBaseOrganUpdate, t, XTestBaseOrganUpdateRequest)
		}
	})
}

// TestBaseOrganBatchUpdate defined TODO
// go test -v -test.run TestBaseOrganBatchUpdate
func TestBaseOrganBatchUpdate(t *testing.T) {
	x.Handle("PUT", "/api/base/organ/batch_update", XTestBaseOrganBatchUpdate, t, XTestBaseOrganBatchUpdateRequest)
}

// BenchmarkBaseOrganBatchUpdate defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganBatchUpdate -test.benchmem=true
func BenchmarkBaseOrganBatchUpdate(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("PUT", "/api/base/organ/batch_update", XTestBaseOrganBatchUpdate, t, XTestBaseOrganBatchUpdateRequest)
		}
	})
}

// TestBaseOrganPage defined TODO
// go test -v -test.run TestBaseOrganPage
func TestBaseOrganPage(t *testing.T) {
	x.Handle("GET", "/api/base/organ/page", XTestBaseOrganPage, t, XTestBaseOrganPageRequest)
}

// BenchmarkBaseOrganPage defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganPage -test.benchmem=true
func BenchmarkBaseOrganPage(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("GET", "/api/base/organ/page", XTestBaseOrganPage, t, XTestBaseOrganPageRequest)
		}
	})
}

// TestBaseOrganGet defined TODO
// go test -v -test.run TestBaseOrganGet
func TestBaseOrganGet(t *testing.T) {
	x.Handle("GET", "/api/base/organ/get", XTestBaseOrganGet, t, XTestBaseOrganGetRequest)
}

// BenchmarkBaseOrganGet defined TODO
// go test -v -test.run=none -test.bench=^BenchmarkBaseOrganGet -test.benchmem=true
func BenchmarkBaseOrganGet(t *testing.B) {
	t.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			x.Handle("GET", "/api/base/organ/get", XTestBaseOrganGet, t, XTestBaseOrganGetRequest)
		}
	})
}
