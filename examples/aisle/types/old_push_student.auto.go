// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package types

import (
	"encoding/json"

	"github.com/2637309949/dolphin/packages/null"
)

// OldPushStudent defined
type OldPushStudent struct {
	// OPSId defined
	OPSId null.Int `xorm:"int(11) pk notnull autoincr 'o_p_s_id'" json:"o_p_s_id" form:"o_p_s_id" xml:"o_p_s_id"`
	// StuName defined
	StuName null.String `xorm:"varchar(100) 'stu_name'" json:"stu_name" form:"stu_name" xml:"stu_name"`
	// StuPhone defined
	StuPhone null.String `xorm:"varchar(11) 'stu_phone'" json:"stu_phone" form:"stu_phone" xml:"stu_phone"`
	// SutId defined
	SutId null.Int `xorm:"int(11) 'sut_id'" json:"sut_id" form:"sut_id" xml:"sut_id"`
	// PaId defined
	PaId null.Int `xorm:"int(11) 'pa_id'" json:"pa_id" form:"pa_id" xml:"pa_id"`
	// SalerId defined
	SalerId null.Int `xorm:"int(11) 'saler_id'" json:"saler_id" form:"saler_id" xml:"saler_id"`
	// ShState defined
	ShState null.Int `xorm:"int(11) 'sh_state'" json:"sh_state" form:"sh_state" xml:"sh_state"`
	// Remark defined
	Remark null.String `xorm:"varchar(500) 'remark'" json:"remark" form:"remark" xml:"remark"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// IsDelete defined
	IsDelete null.Int `xorm:"notnull 'is_delete'" json:"is_delete" form:"is_delete" xml:"is_delete"`
}

// TableName table name of defined OldPushStudent
func (m *OldPushStudent) TableName() string {
	return "old_push_student"
}

func (r *OldPushStudent) Marshal() ([]byte, error) {
	return json.Marshal(r)
}

func UnmarshalOldPushStudent(data []byte) (OldPushStudent, error) {
	var r OldPushStudent
	err := json.Unmarshal(data, &r)
	return r, err
}
