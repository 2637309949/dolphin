// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package types

import (
	"encoding/json"

	"github.com/2637309949/dolphin/packages/null"
)

// StuSatisfyVisitContent defined
type StuSatisfyVisitContent struct {
	// SSVCId defined
	SSVCId null.Int `xorm:"int(11) pk notnull autoincr 's_s_v_c_id'" json:"s_s_v_c_id" form:"s_s_v_c_id" xml:"s_s_v_c_id"`
	// SsvId defined
	SsvId null.Int `xorm:"int(11) 'ssv_id'" json:"ssv_id" form:"ssv_id" xml:"ssv_id"`
	// SvmcId defined
	SvmcId null.Int `xorm:"int(11) 'svmc_id'" json:"svmc_id" form:"svmc_id" xml:"svmc_id"`
	// Fraction defined
	Fraction null.Int `xorm:"int(11) 'fraction'" json:"fraction" form:"fraction" xml:"fraction"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// IsDelete defined
	IsDelete null.Int `xorm:"notnull 'is_delete'" json:"is_delete" form:"is_delete" xml:"is_delete"`
	// CustomerId defined
	CustomerId null.Int `xorm:"int(11) 'customer_id'" json:"customer_id" form:"customer_id" xml:"customer_id"`
	// SaleId defined
	SaleId null.Int `xorm:"int(11) 'sale_id'" json:"sale_id" form:"sale_id" xml:"sale_id"`
	// TeacherId defined
	TeacherId null.Int `xorm:"int(11) 'teacher_id'" json:"teacher_id" form:"teacher_id" xml:"teacher_id"`
}

// TableName table name of defined StuSatisfyVisitContent
func (m *StuSatisfyVisitContent) TableName() string {
	return "stu_satisfy_visit_content"
}

func (r *StuSatisfyVisitContent) Marshal() ([]byte, error) {
	return json.Marshal(r)
}

func UnmarshalStuSatisfyVisitContent(data []byte) (StuSatisfyVisitContent, error) {
	var r StuSatisfyVisitContent
	err := json.Unmarshal(data, &r)
	return r, err
}
