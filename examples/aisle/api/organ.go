// Code generated by dol build. Only Generate by tools if not existed.
// source: organ.go

package api

import (
	"aisle/types"

	"aisle/util/errors"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/sirupsen/logrus"
	"github.com/thoas/go-funk"
)

// OrganAdd api implementation
// @Summary 添加城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body types.Organ false "城市信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/add [post]
func (ctr *Organ) OrganAdd(ctx *Context) {
	var payload types.Organ
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	payload.CreateDate = null.TimeFromNow()
	payload.Creater = null.StringFrom(ctx.MustToken().GetUserID())
	payload.UpdateDate = null.TimeFromNow()
	payload.Updater = null.StringFrom(ctx.MustToken().GetUserID())
	payload.IsDelete = null.IntFrom(0)
	ret, err := ctx.MustDB().Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganBatchAdd api implementation
// @Summary 批量添加城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body []types.Organ false "城市信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/batch_add [post]
func (ctr *Organ) OrganBatchAdd(ctx *Context) {
	var payload []types.Organ
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	for i := range payload {
		payload[i].CreateDate = null.TimeFromNow()
		payload[i].Creater = null.StringFrom(ctx.MustToken().GetUserID())
		payload[i].UpdateDate = null.TimeFromNow()
		payload[i].Updater = null.StringFrom(ctx.MustToken().GetUserID())
		payload[i].IsDelete = null.IntFrom(0)
	}
	ret, err := ctx.MustDB().Insert(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganDel api implementation
// @Summary 删除城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body types.Organ false "城市"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/del [delete]
func (ctr *Organ) OrganDel(ctx *Context) {
	var payload types.Organ
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := ctx.MustDB().In("id", payload.OrganId.Int64).Update(&types.Organ{
		UpdateDate: null.TimeFromNow(),
		Updater:    null.StringFrom(ctx.MustToken().GetUserID()),
		IsDelete:   null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganBatchDel api implementation
// @Summary 批量删除城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body []types.Organ false "城市信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/batch_del [put]
func (ctr *Organ) OrganBatchDel(ctx *Context) {
	var payload []types.Organ
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	var ids = funk.Map(payload, func(form types.Organ) int64 { return form.OrganId.Int64 }).([]int64)
	ret, err := ctx.MustDB().In("id", ids).Update(&types.Organ{
		UpdateDate: null.TimeFromNow(),
		Updater:    null.StringFrom(ctx.MustToken().GetUserID()),
		IsDelete:   null.IntFrom(1),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganUpdate api implementation
// @Summary 更新城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body types.Organ false "城市信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/update [put]
func (ctr *Organ) OrganUpdate(ctx *Context) {
	var payload types.Organ
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	payload.Updater = null.StringFrom(ctx.MustToken().GetUserID())
	payload.UpdateDate = null.TimeFromNow()
	ret, err := ctx.MustDB().ID(payload.OrganId.Int64).Update(&payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganBatchUpdate api implementation
// @Summary 批量更新城市
// @Tags 城市
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param organ body []types.Organ false "城市信息"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/batch_update [put]
func (ctr *Organ) OrganBatchUpdate(ctx *Context) {
	var payload []types.Organ
	var err error
	var ret []int64
	var r int64
	if err := ctx.ShouldBindWith(&payload); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	s := ctx.MustDB().NewSession()
	s.Begin()
	defer s.Close()
	s.Begin()
	defer s.Close()
	for i := range payload {
		payload[i].UpdateDate = null.TimeFromNow()
		payload[i].Updater = null.StringFrom(ctx.MustToken().GetUserID())
		r, err = s.ID(payload[i].OrganId.Int64).Update(&payload[i])
		if err != nil {
			logrus.Error(err)
			s.Rollback()
			ctx.Fail(err)
			return
		}
		ret = append(ret, r)
	}
	if err != nil {
		logrus.Error(err)
		s.Rollback()
		ctx.Fail(err)
		return
	}
	err = s.Commit()
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganPage api implementation
// @Summary 城市分页查询
// @Tags 城市
// @Param Authorization header string false "认证令牌"
// @Param page  query  int false "页码"
// @Param size  query  int false "单页数"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/page [get]
func (ctr *Organ) OrganPage(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetInt("page", 1)
	q.SetInt("size", 15)
	q.SetRule("organ_page")
	q.SetString("creater")
	q.SetString("updater")
	q.SetRange("create_time")
	q.SetRange("update_time")
	q.SetInt("is_delete", 0)()
	q.SetString("sort", "update_time desc")
	q.SetTags()
	ret, err := ctr.Srv.DB.PageSearch(ctx.MustDB(), "organ", "page", "organ", q.Value())
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// OrganGet api implementation
// @Summary 获取城市信息
// @Tags 城市
// @Param Authorization header string false "认证令牌"
// @Param id  query  string false "城市id"
// @Produce application/json
// @Failure 403 {object} types.Fail
// @Success 200 {object} types.Success
// @Failure 500 {object} types.Fail
// @Router /api/organ/get [get]
func (ctr *Organ) OrganGet(ctx *Context) {
	var entity types.Organ
	err := ctx.ShouldBindWith(&entity)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	if ext, err := ctx.MustDB().Get(&entity); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	} else if !ext {
		ctx.Fail(errors.ErrNotFound)
		return
	}
	ctx.Success(entity)
}
