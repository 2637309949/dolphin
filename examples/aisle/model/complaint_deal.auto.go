// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// ComplaintDeal defined
type ComplaintDeal struct {
	//
	CDId null.Int `xorm:"int(11) pk notnull autoincr 'c_d_id'" json:"c_d_id" form:"c_d_id" xml:"c_d_id"`
	//
	CdState null.Int `xorm:"int(11) 'cd_state'" json:"cd_state" form:"cd_state" xml:"cd_state"`
	//
	CdUser null.Int `xorm:"int(11) 'cd_user'" json:"cd_user" form:"cd_user" xml:"cd_user"`
	//
	CdSituation null.String `xorm:"varchar(2000) 'cd_situation'" json:"cd_situation" form:"cd_situation" xml:"cd_situation"`
	//
	CdDate null.Time `xorm:"datetime 'cd_date'" json:"cd_date" form:"cd_date" xml:"cd_date"`
	//
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	//
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	//
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	//
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	//
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	//
	CdDeal null.Int `xorm:"int(11) 'cd_deal'" json:"cd_deal" form:"cd_deal" xml:"cd_deal"`
	//
	CpId null.Int `xorm:"int(11) 'cp_id'" json:"cp_id" form:"cp_id" xml:"cp_id"`
}

// Parser defined
func (m *ComplaintDeal) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *ComplaintDeal) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined ComplaintDeal
func (m *ComplaintDeal) TableName() string {
	return "complaint_deal"
}
