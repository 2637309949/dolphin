// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/decimal"
	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// Fee defined
type Fee struct {
	// FeeId defined
	FeeId null.Int `xorm:"int(11) pk notnull autoincr 'fee_id'" json:"fee_id" form:"fee_id" xml:"fee_id"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// FeeWay defined
	FeeWay null.Int `xorm:"int(11) 'fee_way'" json:"fee_way" form:"fee_way" xml:"fee_way"`
	// FeeTime defined
	FeeTime null.Time `xorm:"datetime 'fee_time'" json:"fee_time" form:"fee_time" xml:"fee_time"`
	// SaleMoney defined
	SaleMoney null.Float `xorm:"float(10,2) 'sale_money'" json:"sale_money" form:"sale_money" xml:"sale_money"`
	// GetMoney defined
	GetMoney null.Float `xorm:"float(11,2) 'get_money'" json:"get_money" form:"get_money" xml:"get_money"`
	// OfId defined
	OfId null.Int `xorm:"int(11) 'of_id'" json:"of_id" form:"of_id" xml:"of_id"`
	// YhCount defined
	YhCount null.String `xorm:"varchar(50) 'yh_count'" json:"yh_count" form:"yh_count" xml:"yh_count"`
	// YhName defined
	YhName null.String `xorm:"varchar(50) 'yh_name'" json:"yh_name" form:"yh_name" xml:"yh_name"`
	// IsDelete defined
	IsDelete null.Int `xorm:"int(11) 'is_delete'" json:"is_delete" form:"is_delete" xml:"is_delete"`
	// FeeType defined
	FeeType null.Int `xorm:"int(11) 'fee_type'" json:"fee_type" form:"fee_type" xml:"fee_type"`
	// CheckState defined
	CheckState null.Int `xorm:"int(11) 'check_state'" json:"check_state" form:"check_state" xml:"check_state"`
	// CheckRemark defined
	CheckRemark null.String `xorm:"varchar(500) 'check_remark'" json:"check_remark" form:"check_remark" xml:"check_remark"`
	// ReceiptNum defined
	ReceiptNum null.String `xorm:"varchar(50) 'receipt_num'" json:"receipt_num" form:"receipt_num" xml:"receipt_num"`
	// NextFeeDate defined
	NextFeeDate null.Time `xorm:"datetime 'next_fee_date'" json:"next_fee_date" form:"next_fee_date" xml:"next_fee_date"`
	// Payee defined
	Payee null.String `xorm:"varchar(300) 'payee'" json:"payee" form:"payee" xml:"payee"`
	// CheckUserId defined
	CheckUserId null.Int `xorm:"int(11) 'check_user_id'" json:"check_user_id" form:"check_user_id" xml:"check_user_id"`
	// CheckTime defined
	CheckTime null.Time `xorm:"datetime 'check_time'" json:"check_time" form:"check_time" xml:"check_time"`
	// AccountOperator defined
	AccountOperator null.String `xorm:"varchar(50) 'account_operator'" json:"account_operator" form:"account_operator" xml:"account_operator"`
	// ActualChargeTime defined
	ActualChargeTime null.Time `xorm:"datetime 'actual_charge_time'" json:"actual_charge_time" form:"actual_charge_time" xml:"actual_charge_time"`
	// FeeRemark defined
	FeeRemark null.String `xorm:"varchar(2000) 'fee_remark'" json:"fee_remark" form:"fee_remark" xml:"fee_remark"`
	// PosPayDetail defined
	PosPayDetail null.Int `xorm:"int(11) 'pos_pay_detail'" json:"pos_pay_detail" form:"pos_pay_detail" xml:"pos_pay_detail"`
	// PkOdd defined
	PkOdd null.Int `xorm:"int(11) 'pk_odd'" json:"pk_odd" form:"pk_odd" xml:"pk_odd"`
	// OverdueDays defined
	OverdueDays null.Int `xorm:"int(11) 'overdue_days'" json:"overdue_days" form:"overdue_days" xml:"overdue_days"`
	// OverdueMoney defined
	OverdueMoney decimal.Decimal `xorm:"decimal(50,3) 'overdue_money'" json:"overdue_money" form:"overdue_money" xml:"overdue_money"`
	// PkPvaaId defined
	PkPvaaId null.Int `xorm:"int(11) 'pk_pvaa_id'" json:"pk_pvaa_id" form:"pk_pvaa_id" xml:"pk_pvaa_id"`
	// RealOverdueMoney defined
	RealOverdueMoney decimal.Decimal `xorm:"decimal(50,3) 'real_overdue_money'" json:"real_overdue_money" form:"real_overdue_money" xml:"real_overdue_money"`
	// PerformanceType defined
	PerformanceType null.Int `xorm:"int(11) 'performance_type'" json:"performance_type" form:"performance_type" xml:"performance_type"`
	// YjuserId defined
	YjuserId null.Int `xorm:"int(11) 'yjuser_id'" json:"yjuser_id" form:"yjuser_id" xml:"yjuser_id"`
	// BfFeeTime defined
	BfFeeTime null.Time `xorm:"datetime 'bf_fee_time'" json:"bf_fee_time" form:"bf_fee_time" xml:"bf_fee_time"`
}

// With defined
func (m *Fee) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *Fee) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *Fee) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *Fee) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *Fee) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *Fee) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *Fee) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined Fee
func (m *Fee) TableName() string {
	return "fee"
}
