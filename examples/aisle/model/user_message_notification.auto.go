// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// UserMessageNotification defined
type UserMessageNotification struct {
	// UMNId defined
	UMNId null.Int `xorm:"int(11) pk notnull autoincr 'u_m_n_id'" json:"u_m_n_id" form:"u_m_n_id" xml:"u_m_n_id"`
	// UserId defined
	UserId null.Int `xorm:"int(11) 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// NoticeDate defined
	NoticeDate null.Time `xorm:"datetime 'notice_date'" json:"notice_date" form:"notice_date" xml:"notice_date"`
	// MessageType defined
	MessageType null.Int `xorm:"int(11) 'message_type'" json:"message_type" form:"message_type" xml:"message_type"`
	// MessageContent defined
	MessageContent null.String `xorm:"varchar(10000) 'message_content'" json:"message_content" form:"message_content" xml:"message_content"`
	// IfRead defined
	IfRead null.Int `xorm:"int(11) 'if_read'" json:"if_read" form:"if_read" xml:"if_read"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// OpsId defined
	OpsId null.Int `xorm:"int(11) 'ops_id'" json:"ops_id" form:"ops_id" xml:"ops_id"`
	// CctId defined
	CctId null.Int `xorm:"int(11) 'cct_id'" json:"cct_id" form:"cct_id" xml:"cct_id"`
	// PeId defined
	PeId null.Int `xorm:"int(11) 'pe_id'" json:"pe_id" form:"pe_id" xml:"pe_id"`
	// IfSend defined
	IfSend null.Int `xorm:"int(11) 'if_send'" json:"if_send" form:"if_send" xml:"if_send"`
	// CssId defined
	CssId null.Int `xorm:"int(11) 'css_id'" json:"css_id" form:"css_id" xml:"css_id"`
	// StuId defined
	StuId null.Int `xorm:"int(11) 'stu_id'" json:"stu_id" form:"stu_id" xml:"stu_id"`
	// ScsId defined
	ScsId null.Int `xorm:"int(11) 'scs_id'" json:"scs_id" form:"scs_id" xml:"scs_id"`
	// LanguageType defined
	LanguageType null.Int `xorm:"int(11) 'language_type'" json:"language_type" form:"language_type" xml:"language_type"`
	// CsId defined
	CsId null.Int `xorm:"int(11) 'cs_id'" json:"cs_id" form:"cs_id" xml:"cs_id"`
	// PacsId defined
	PacsId null.Int `xorm:"int(11) 'pacs_id'" json:"pacs_id" form:"pacs_id" xml:"pacs_id"`
}

// Marshal defined
func (m *UserMessageNotification) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *UserMessageNotification) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *UserMessageNotification) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *UserMessageNotification) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *UserMessageNotification) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *UserMessageNotification) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *UserMessageNotification) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined UserMessageNotification
func (m *UserMessageNotification) TableName() string {
	return "user_message_notification"
}
