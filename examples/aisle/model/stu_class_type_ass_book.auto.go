// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// StuClassTypeAssBook defined
type StuClassTypeAssBook struct {
	// SCTABId defined
	SCTABId null.Int `xorm:"int(11) pk notnull autoincr 's_c_t_a_b_id'" json:"s_c_t_a_b_id" form:"s_c_t_a_b_id" xml:"s_c_t_a_b_id"`
	// SctId defined
	SctId null.Int `xorm:"int(11) 'sct_id'" json:"sct_id" form:"sct_id" xml:"sct_id"`
	// AbId defined
	AbId null.Int `xorm:"int(11) 'ab_id'" json:"ab_id" form:"ab_id" xml:"ab_id"`
	// AbSource defined
	AbSource null.Int `xorm:"int(11) 'ab_source'" json:"ab_source" form:"ab_source" xml:"ab_source"`
	// AbPrice defined
	AbPrice null.Float `xorm:"float(10,2) 'ab_price'" json:"ab_price" form:"ab_price" xml:"ab_price"`
	// IfReceive defined
	IfReceive null.Int `xorm:"int(11) 'if_receive'" json:"if_receive" form:"if_receive" xml:"if_receive"`
	// RefPrice defined
	RefPrice null.Float `xorm:"float(10,2) 'ref_price'" json:"ref_price" form:"ref_price" xml:"ref_price"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// RefMoeny defined
	RefMoeny null.Float `xorm:"float(10,2) 'ref_moeny'" json:"ref_moeny" form:"ref_moeny" xml:"ref_moeny"`
	// BuyNum defined
	BuyNum null.Float `xorm:"float(10,2) 'buy_num'" json:"buy_num" form:"buy_num" xml:"buy_num"`
	// OfId defined
	OfId null.Int `xorm:"int(11) 'of_id'" json:"of_id" form:"of_id" xml:"of_id"`
}

// Marshal defined
func (m *StuClassTypeAssBook) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *StuClassTypeAssBook) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *StuClassTypeAssBook) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *StuClassTypeAssBook) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *StuClassTypeAssBook) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *StuClassTypeAssBook) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined StuClassTypeAssBook
func (m *StuClassTypeAssBook) TableName() string {
	return "stu_class_type_ass_book"
}
