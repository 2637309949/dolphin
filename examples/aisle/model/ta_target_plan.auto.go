// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// TaTargetPlan defined
type TaTargetPlan struct {
	// TTPId defined
	TTPId null.Int `xorm:"int(11) pk notnull autoincr 't_t_p_id'" json:"t_t_p_id" form:"t_t_p_id" xml:"t_t_p_id"`
	// UserId defined
	UserId null.Int `xorm:"int(11) 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// PlanMonth defined
	PlanMonth null.Time `xorm:"datetime 'plan_month'" json:"plan_month" form:"plan_month" xml:"plan_month"`
	// YxTarget defined
	YxTarget null.Float `xorm:"float(50,2) 'yx_target'" json:"yx_target" form:"yx_target" xml:"yx_target"`
	// TqxTarget defined
	TqxTarget null.Float `xorm:"float(11,2) 'tqx_target'" json:"tqx_target" form:"tqx_target" xml:"tqx_target"`
	// ZbTarget defined
	ZbTarget null.Float `xorm:"float(11,2) 'zb_target'" json:"zb_target" form:"zb_target" xml:"zb_target"`
	// LtQdTarget defined
	LtQdTarget null.Float `xorm:"float(11,2) 'lt_qd_target'" json:"lt_qd_target" form:"lt_qd_target" xml:"lt_qd_target"`
	// LtTarget defined
	LtTarget null.Float `xorm:"float(11,2) 'lt_target'" json:"lt_target" form:"lt_target" xml:"lt_target"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// SchId defined
	SchId null.Int `xorm:"int(11) 'sch_id'" json:"sch_id" form:"sch_id" xml:"sch_id"`
	// UserName defined
	UserName null.String `xorm:"varchar(100) 'user_name'" json:"user_name" form:"user_name" xml:"user_name"`
	// UserPhone defined
	UserPhone null.String `xorm:"varchar(11) 'user_phone'" json:"user_phone" form:"user_phone" xml:"user_phone"`
	// KxMoneyTarget defined
	KxMoneyTarget null.Float `xorm:"float(50,2) 'kx_money_target'" json:"kx_money_target" form:"kx_money_target" xml:"kx_money_target"`
	// YxMoenyTarget defined
	YxMoenyTarget null.Float `xorm:"float(50,2) 'yx_moeny_target'" json:"yx_moeny_target" form:"yx_moeny_target" xml:"yx_moeny_target"`
	// TqxMoenyTarget defined
	TqxMoenyTarget null.Float `xorm:"float(50,2) 'tqx_moeny_target'" json:"tqx_moeny_target" form:"tqx_moeny_target" xml:"tqx_moeny_target"`
	// LtMoenyTarget defined
	LtMoenyTarget null.Float `xorm:"float(50,2) 'lt_moeny_target'" json:"lt_moeny_target" form:"lt_moeny_target" xml:"lt_moeny_target"`
}

// With defined
func (m *TaTargetPlan) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *TaTargetPlan) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *TaTargetPlan) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *TaTargetPlan) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *TaTargetPlan) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *TaTargetPlan) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *TaTargetPlan) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined TaTargetPlan
func (m *TaTargetPlan) TableName() string {
	return "ta_target_plan"
}
