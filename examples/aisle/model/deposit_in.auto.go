// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// DepositIn defined
type DepositIn struct {
	// DepositInId defined
	DepositInId null.Int `xorm:"int(11) pk notnull autoincr 'deposit_in_id'" json:"deposit_in_id" form:"deposit_in_id" xml:"deposit_in_id"`
	// DepositMoney defined
	DepositMoney null.Float `xorm:"float(10,2) 'deposit_money'" json:"deposit_money" form:"deposit_money" xml:"deposit_money"`
	// ReceiptNum defined
	ReceiptNum null.String `xorm:"varchar(500) 'receipt_num'" json:"receipt_num" form:"receipt_num" xml:"receipt_num"`
	// FeeWay defined
	FeeWay null.Int `xorm:"int(11) 'fee_way'" json:"fee_way" form:"fee_way" xml:"fee_way"`
	// Remark defined
	Remark null.String `xorm:"varchar(2000) 'remark'" json:"remark" form:"remark" xml:"remark"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// StuId defined
	StuId null.Int `xorm:"int(11) 'stu_id'" json:"stu_id" form:"stu_id" xml:"stu_id"`
	// BussType defined
	BussType null.Int `xorm:"int(11) 'buss_type'" json:"buss_type" form:"buss_type" xml:"buss_type"`
	// CheckState defined
	CheckState null.Int `xorm:"int(11) 'check_state'" json:"check_state" form:"check_state" xml:"check_state"`
	// BankAccount defined
	BankAccount null.String `xorm:"varchar(50) 'bank_account'" json:"bank_account" form:"bank_account" xml:"bank_account"`
	// BankName defined
	BankName null.String `xorm:"varchar(50) 'bank_name'" json:"bank_name" form:"bank_name" xml:"bank_name"`
	// Payee defined
	Payee null.String `xorm:"varchar(200) 'payee'" json:"payee" form:"payee" xml:"payee"`
	// CheckUserId defined
	CheckUserId null.Int `xorm:"int(11) 'check_user_id'" json:"check_user_id" form:"check_user_id" xml:"check_user_id"`
	// CheckTime defined
	CheckTime null.Time `xorm:"datetime 'check_time'" json:"check_time" form:"check_time" xml:"check_time"`
	// AccountOperator defined
	AccountOperator null.String `xorm:"varchar(50) 'account_operator'" json:"account_operator" form:"account_operator" xml:"account_operator"`
	// ActualChargeTime defined
	ActualChargeTime null.Time `xorm:"datetime 'actual_charge_time'" json:"actual_charge_time" form:"actual_charge_time" xml:"actual_charge_time"`
	// ChargeTime defined
	ChargeTime null.Time `xorm:"datetime 'charge_time'" json:"charge_time" form:"charge_time" xml:"charge_time"`
	// SchoolId defined
	SchoolId null.Int `xorm:"int(11) 'school_id'" json:"school_id" form:"school_id" xml:"school_id"`
	// PkOf defined
	PkOf null.Int `xorm:"int(11) 'pk_of'" json:"pk_of" form:"pk_of" xml:"pk_of"`
	// CanRefundDate defined
	CanRefundDate null.Time `xorm:"datetime 'can_refund_date'" json:"can_refund_date" form:"can_refund_date" xml:"can_refund_date"`
}

// With defined
func (m *DepositIn) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *DepositIn) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *DepositIn) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *DepositIn) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *DepositIn) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *DepositIn) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *DepositIn) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined DepositIn
func (m *DepositIn) TableName() string {
	return "deposit_in"
}
