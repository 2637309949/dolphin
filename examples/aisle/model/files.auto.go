// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// Files defined
type Files struct {
	// FId defined
	FId null.Int `xorm:"int(11) pk notnull autoincr 'f_id'" json:"f_id" form:"f_id" xml:"f_id"`
	// FName defined
	FName null.String `xorm:"varchar(500) 'f_name'" json:"f_name" form:"f_name" xml:"f_name"`
	// FSize defined
	FSize null.Float `xorm:"float(11,2) 'f_size'" json:"f_size" form:"f_size" xml:"f_size"`
	// FType defined
	FType null.String `xorm:"varchar(100) 'f_type'" json:"f_type" form:"f_type" xml:"f_type"`
	// FMongoid defined
	FMongoid null.String `xorm:"varchar(100) 'f_mongoid'" json:"f_mongoid" form:"f_mongoid" xml:"f_mongoid"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// FDownloadnum defined
	FDownloadnum null.Int `xorm:"int(11) 'f_downloadnum'" json:"f_downloadnum" form:"f_downloadnum" xml:"f_downloadnum"`
	// FPreviewnum defined
	FPreviewnum null.Int `xorm:"int(11) 'f_previewnum'" json:"f_previewnum" form:"f_previewnum" xml:"f_previewnum"`
	// SpAllhour defined
	SpAllhour null.String `xorm:"varchar(100) 'sp_allhour'" json:"sp_allhour" form:"sp_allhour" xml:"sp_allhour"`
	// SpBfhour defined
	SpBfhour null.String `xorm:"varchar(100) 'sp_bfhour'" json:"sp_bfhour" form:"sp_bfhour" xml:"sp_bfhour"`
	// IfZm defined
	IfZm null.String `xorm:"varchar(10) default('1') 'if_zm'" json:"if_zm" form:"if_zm" xml:"if_zm"`
}

// Marshal defined
func (m *Files) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *Files) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *Files) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *Files) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *Files) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *Files) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined Files
func (m *Files) TableName() string {
	return "files"
}
