// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// StuClassTypeTextbook defined
type StuClassTypeTextbook struct {
	// SCTTId defined
	SCTTId null.Int `xorm:"int(11) pk notnull autoincr 's_c_t_t_id'" json:"s_c_t_t_id" form:"s_c_t_t_id" xml:"s_c_t_t_id"`
	// SctId defined
	SctId null.Int `xorm:"int(11) 'sct_id'" json:"sct_id" form:"sct_id" xml:"sct_id"`
	// TbId defined
	TbId null.Int `xorm:"int(11) 'tb_id'" json:"tb_id" form:"tb_id" xml:"tb_id"`
	// TbSource defined
	TbSource null.Int `xorm:"int(11) 'tb_source'" json:"tb_source" form:"tb_source" xml:"tb_source"`
	// IfReceive defined
	IfReceive null.Int `xorm:"int(11) 'if_receive'" json:"if_receive" form:"if_receive" xml:"if_receive"`
	// StbPrice defined
	StbPrice null.Float `xorm:"float(10,2) 'stb_price'" json:"stb_price" form:"stb_price" xml:"stb_price"`
	// RefPrice defined
	RefPrice null.Float `xorm:"float(10,2) 'ref_price'" json:"ref_price" form:"ref_price" xml:"ref_price"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// IsDelete defined
	IsDelete null.Int `xorm:"notnull 'is_delete'" json:"is_delete" form:"is_delete" xml:"is_delete"`
	// RefMoney defined
	RefMoney null.Float `xorm:"float(10,2) 'ref_money'" json:"ref_money" form:"ref_money" xml:"ref_money"`
	// BuyNum defined
	BuyNum null.Float `xorm:"float(10,2) 'buy_num'" json:"buy_num" form:"buy_num" xml:"buy_num"`
	// StuId defined
	StuId null.Int `xorm:"int(11) 'stu_id'" json:"stu_id" form:"stu_id" xml:"stu_id"`
	// OrderId defined
	OrderId null.Int `xorm:"int(11) 'order_id'" json:"order_id" form:"order_id" xml:"order_id"`
	// BussType defined
	BussType null.Int `xorm:"int(11) 'buss_type'" json:"buss_type" form:"buss_type" xml:"buss_type"`
}

// With defined
func (m *StuClassTypeTextbook) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *StuClassTypeTextbook) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *StuClassTypeTextbook) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *StuClassTypeTextbook) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *StuClassTypeTextbook) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *StuClassTypeTextbook) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *StuClassTypeTextbook) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined StuClassTypeTextbook
func (m *StuClassTypeTextbook) TableName() string {
	return "stu_class_type_textbook"
}
