// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/decimal"
	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// StudentUseHourDetail defined
type StudentUseHourDetail struct {
	// SUHDId defined
	SUHDId null.Int `xorm:"int(11) pk notnull autoincr 's_u_h_d_id'" json:"s_u_h_d_id" form:"s_u_h_d_id" xml:"s_u_h_d_id"`
	// PkCsId defined
	PkCsId null.Int `xorm:"int(11) 'pk_cs_id'" json:"pk_cs_id" form:"pk_cs_id" xml:"pk_cs_id"`
	// PkCssId defined
	PkCssId null.Int `xorm:"int(11) 'pk_css_id'" json:"pk_css_id" form:"pk_css_id" xml:"pk_css_id"`
	// PkStuId defined
	PkStuId null.Int `xorm:"int(11) 'pk_stu_id'" json:"pk_stu_id" form:"pk_stu_id" xml:"pk_stu_id"`
	// UseHour defined
	UseHour null.Float `xorm:"float(11,2) 'use_hour'" json:"use_hour" form:"use_hour" xml:"use_hour"`
	// OnePrice defined
	OnePrice decimal.Decimal `xorm:"decimal(11,2) 'one_price'" json:"one_price" form:"one_price" xml:"one_price"`
	// AllPirce defined
	AllPirce decimal.Decimal `xorm:"decimal(11,2) 'all_pirce'" json:"all_pirce" form:"all_pirce" xml:"all_pirce"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// PkOf defined
	PkOf null.Int `xorm:"int(11) 'pk_of'" json:"pk_of" form:"pk_of" xml:"pk_of"`
	// DicHourType defined
	DicHourType null.Int `xorm:"int(11) 'dic_hour_type'" json:"dic_hour_type" form:"dic_hour_type" xml:"dic_hour_type"`
	// PkSchId defined
	PkSchId null.Int `xorm:"int(11) 'pk_sch_id'" json:"pk_sch_id" form:"pk_sch_id" xml:"pk_sch_id"`
	// JfOnePrice defined
	JfOnePrice decimal.Decimal `xorm:"decimal(50,3) 'jf_one_price'" json:"jf_one_price" form:"jf_one_price" xml:"jf_one_price"`
	// JfAllPrice defined
	JfAllPrice decimal.Decimal `xorm:"decimal(50,3) 'jf_all_price'" json:"jf_all_price" form:"jf_all_price" xml:"jf_all_price"`
	// KqKc defined
	KqKc null.Float `xorm:"float(50,2) 'kq_kc'" json:"kq_kc" form:"kq_kc" xml:"kq_kc"`
	// ChangStuId defined
	ChangStuId null.Int `xorm:"int(11) 'chang_stu_id'" json:"chang_stu_id" form:"chang_stu_id" xml:"chang_stu_id"`
	// ZdRsType defined
	ZdRsType null.Int `xorm:"int(11) 'zd_rs_type'" json:"zd_rs_type" form:"zd_rs_type" xml:"zd_rs_type"`
	// KqDate defined
	KqDate null.Time `xorm:"datetime 'kq_date'" json:"kq_date" form:"kq_date" xml:"kq_date"`
	// Remark defined
	Remark null.String `xorm:"varchar(20) 'remark'" json:"remark" form:"remark" xml:"remark"`
}

// With defined
func (m *StudentUseHourDetail) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *StudentUseHourDetail) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *StudentUseHourDetail) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *StudentUseHourDetail) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *StudentUseHourDetail) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *StudentUseHourDetail) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *StudentUseHourDetail) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined StudentUseHourDetail
func (m *StudentUseHourDetail) TableName() string {
	return "student_use_hour_detail"
}
