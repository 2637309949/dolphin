// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// BranchCompany defined
type BranchCompany struct {
	// BCId defined
	BCId null.Int `xorm:"int(11) pk notnull autoincr 'b_c_id'" json:"b_c_id" form:"b_c_id" xml:"b_c_id"`
	// CompanyName defined
	CompanyName null.String `xorm:"varchar(1000) 'company_name'" json:"company_name" form:"company_name" xml:"company_name"`
	// Creater defined
	Creater null.String `xorm:"varchar(36) 'creater'" json:"creater" form:"creater" xml:"creater"`
	// CreateDate defined
	CreateDate null.Time `xorm:"datetime 'create_date'" json:"create_date" form:"create_date" xml:"create_date"`
	// Updater defined
	Updater null.String `xorm:"varchar(36) 'updater'" json:"updater" form:"updater" xml:"updater"`
	// UpdateDate defined
	UpdateDate null.Time `xorm:"datetime 'update_date'" json:"update_date" form:"update_date" xml:"update_date"`
	// Isdelete defined
	Isdelete null.Int `xorm:"notnull 'isdelete'" json:"isdelete" form:"isdelete" xml:"isdelete"`
	// BcIndex defined
	BcIndex null.Int `xorm:"int(11) 'bc_index'" json:"bc_index" form:"bc_index" xml:"bc_index"`
	// Onoff defined
	Onoff null.Int `xorm:"int(11) 'onoff'" json:"onoff" form:"onoff" xml:"onoff"`
}

// Marshal defined
func (m *BranchCompany) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *BranchCompany) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *BranchCompany) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *BranchCompany) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *BranchCompany) Parser(db *xorm.Engine) *tags.Parser {
	return tags.NewParser("xorm", db.Dialect(), db.DB().Mapper, db.DB().Mapper, caches.NewManager())
}

// PrimaryKeys defined
func (m *BranchCompany) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined BranchCompany
func (m *BranchCompany) TableName() string {
	return "branch_company"
}
