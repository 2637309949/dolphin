// Code generated by dol build. Only Generate by tools if not existed.
// source: kafka.go

package app

import (
	"kafka/model"
	"kafka/srv"

	"github.com/2637309949/dolphin/packages/gin/binding"
	"github.com/2637309949/dolphin/packages/logrus"
)

// KafkaAdd api implementation
// @Summary Add article
// @Tags Kafka controller
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param kafka body model.KafkaInfo false "Kafka info"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/kafka/add [post]
func KafkaAdd(ctx *Context) {
	var payload model.KafkaInfo
	if err := ctx.ShouldBindBodyWith(&payload, binding.JSON); err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ret, err := srv.KafkaProducer(ctx.Raw(), ctx.DB, payload)
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// KafkaGet api implementation
// @Summary Get kafka info
// @Tags Kafka controller
// @Param Authorization header string false "认证令牌"
// @Param id  query  string false "kafka id"
// @Failure 403 {object} model.Fail
// @Success 200 {object} model.Success
// @Failure 500 {object} model.Fail
// @Router /api/kafka/get [get]
func KafkaGet(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetString("id")
	ret, err := srv.KafkaConsumer(ctx.Raw(), ctx.DB, struct{ ID int64 }{
		ID: q.GetInt("id"),
	})
	if err != nil {
		logrus.Error(err)
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
