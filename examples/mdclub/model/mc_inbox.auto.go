// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McInbox defined 私信表
type McInbox struct {
	// InboxId defined 私信ID
	InboxId null.Int `xorm:"int(11) pk notnull autoincr comment('私信ID') 'inbox_id'" json:"inbox_id" form:"inbox_id" xml:"inbox_id"`
	// ReceiverId defined 接收者ID
	ReceiverId null.Int `xorm:"int(11) notnull comment('接收者ID') 'receiver_id'" json:"receiver_id" form:"receiver_id" xml:"receiver_id"`
	// SenderId defined 发送者ID
	SenderId null.Int `xorm:"int(11) notnull comment('发送者ID') 'sender_id'" json:"sender_id" form:"sender_id" xml:"sender_id"`
	// ContentMarkdown defined 原始的私信内容
	ContentMarkdown null.String `xorm:"text(0) notnull comment('原始的私信内容') 'content_markdown'" json:"content_markdown" form:"content_markdown" xml:"content_markdown"`
	// ContentRendered defined 过滤渲染后的私信内容
	ContentRendered null.String `xorm:"text(0) notnull comment('过滤渲染后的私信内容') 'content_rendered'" json:"content_rendered" form:"content_rendered" xml:"content_rendered"`
	// CreateTime defined 发送时间
	CreateTime null.Int `xorm:"int(10) notnull default(0) comment('发送时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
	// ReadTime defined 阅读时间
	ReadTime null.Int `xorm:"int(10) notnull default(0) comment('阅读时间') 'read_time'" json:"read_time" form:"read_time" xml:"read_time"`
}

// With defined
func (m *McInbox) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McInbox) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McInbox) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McInbox) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McInbox) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McInbox) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McInbox) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McInbox
func (m *McInbox) TableName() string {
	return "mc_inbox"
}
