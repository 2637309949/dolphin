// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McFollow defined 文章关注关系表
type McFollow struct {
	// UserId defined 用户ID
	UserId null.Int `xorm:"int(11) notnull default(0) comment('用户ID') 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// FollowableId defined 关注目标的ID
	FollowableId null.Int `xorm:"int(11) notnull comment('关注目标的ID') 'followable_id'" json:"followable_id" form:"followable_id" xml:"followable_id"`
	// FollowableType defined 关注目标类型 user、question、article、topic
	FollowableType null.String `xorm:" notnull comment('关注目标类型 user、question、article、topic') 'followable_type'" json:"followable_type" form:"followable_type" xml:"followable_type"`
	// CreateTime defined 关注时间
	CreateTime null.Int `xorm:"int(10) notnull default(0) comment('关注时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
}

// With defined
func (m *McFollow) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McFollow) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McFollow) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McFollow) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McFollow) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McFollow) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McFollow) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McFollow
func (m *McFollow) TableName() string {
	return "mc_follow"
}
