// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McUser defined 用户表
type McUser struct {
	// UserId defined 用户ID
	UserId null.Int `xorm:"int(11) pk notnull autoincr comment('用户ID') 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// Username defined 用户名
	Username null.String `xorm:"varchar(20) notnull comment('用户名') 'username'" json:"username" form:"username" xml:"username"`
	// Email defined 邮箱
	Email null.String `xorm:"varchar(320) notnull comment('邮箱') 'email'" json:"email" form:"email" xml:"email"`
	// Avatar defined 头像token
	Avatar null.String `xorm:"varchar(50) comment('头像token') 'avatar'" json:"avatar" form:"avatar" xml:"avatar"`
	// Cover defined 封面图片token
	Cover null.String `xorm:"varchar(50) comment('封面图片token') 'cover'" json:"cover" form:"cover" xml:"cover"`
	// Password defined 密码
	Password null.String `xorm:"varchar(255) notnull comment('密码') 'password'" json:"password" form:"password" xml:"password"`
	// CreateIp defined 注册IP
	CreateIp null.String `xorm:"varchar(80) comment('注册IP') 'create_ip'" json:"create_ip" form:"create_ip" xml:"create_ip"`
	// CreateLocation defined 注册地址
	CreateLocation null.String `xorm:"varchar(100) comment('注册地址') 'create_location'" json:"create_location" form:"create_location" xml:"create_location"`
	// LastLoginTime defined 最后登录时间
	LastLoginTime null.Int `xorm:"int(10) notnull default(0) comment('最后登录时间') 'last_login_time'" json:"last_login_time" form:"last_login_time" xml:"last_login_time"`
	// LastLoginIp defined 最后登陆IP
	LastLoginIp null.String `xorm:"varchar(80) comment('最后登陆IP') 'last_login_ip'" json:"last_login_ip" form:"last_login_ip" xml:"last_login_ip"`
	// LastLoginLocation defined 最后登录地址
	LastLoginLocation null.String `xorm:"varchar(100) comment('最后登录地址') 'last_login_location'" json:"last_login_location" form:"last_login_location" xml:"last_login_location"`
	// FollowerCount defined 关注我的人数
	FollowerCount null.Int `xorm:"int(11) notnull default(0) comment('关注我的人数') 'follower_count'" json:"follower_count" form:"follower_count" xml:"follower_count"`
	// FolloweeCount defined 我关注的人数
	FolloweeCount null.Int `xorm:"int(11) notnull default(0) comment('我关注的人数') 'followee_count'" json:"followee_count" form:"followee_count" xml:"followee_count"`
	// FollowingArticleCount defined 我关注的文章数
	FollowingArticleCount null.Int `xorm:"int(11) notnull default(0) comment('我关注的文章数') 'following_article_count'" json:"following_article_count" form:"following_article_count" xml:"following_article_count"`
	// FollowingQuestionCount defined 我关注的问题数
	FollowingQuestionCount null.Int `xorm:"int(11) notnull default(0) comment('我关注的问题数') 'following_question_count'" json:"following_question_count" form:"following_question_count" xml:"following_question_count"`
	// FollowingTopicCount defined 我关注的话题数
	FollowingTopicCount null.Int `xorm:"int(11) notnull default(0) comment('我关注的话题数') 'following_topic_count'" json:"following_topic_count" form:"following_topic_count" xml:"following_topic_count"`
	// ArticleCount defined 我发表的文章数量
	ArticleCount null.Int `xorm:"int(11) notnull default(0) comment('我发表的文章数量') 'article_count'" json:"article_count" form:"article_count" xml:"article_count"`
	// QuestionCount defined 我发表的问题数量
	QuestionCount null.Int `xorm:"int(11) notnull default(0) comment('我发表的问题数量') 'question_count'" json:"question_count" form:"question_count" xml:"question_count"`
	// AnswerCount defined 我发表的回答数量
	AnswerCount null.Int `xorm:"int(11) notnull default(0) comment('我发表的回答数量') 'answer_count'" json:"answer_count" form:"answer_count" xml:"answer_count"`
	// NotificationUnread defined 未读通知数
	NotificationUnread null.Int `xorm:"int(11) notnull default(0) comment('未读通知数') 'notification_unread'" json:"notification_unread" form:"notification_unread" xml:"notification_unread"`
	// InboxUnread defined 未读私信数
	InboxUnread null.Int `xorm:"int(11) notnull default(0) comment('未读私信数') 'inbox_unread'" json:"inbox_unread" form:"inbox_unread" xml:"inbox_unread"`
	// Headline defined 一句话介绍
	Headline null.String `xorm:"varchar(40) comment('一句话介绍') 'headline'" json:"headline" form:"headline" xml:"headline"`
	// Bio defined 个人简介
	Bio null.String `xorm:"varchar(160) comment('个人简介') 'bio'" json:"bio" form:"bio" xml:"bio"`
	// Blog defined 个人主页
	Blog null.String `xorm:"varchar(255) comment('个人主页') 'blog'" json:"blog" form:"blog" xml:"blog"`
	// Company defined 公司名称
	Company null.String `xorm:"varchar(255) comment('公司名称') 'company'" json:"company" form:"company" xml:"company"`
	// Location defined 地址
	Location null.String `xorm:"varchar(255) comment('地址') 'location'" json:"location" form:"location" xml:"location"`
	// CreateTime defined 注册时间
	CreateTime null.Int `xorm:"int(10) notnull default(0) comment('注册时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
	// UpdateTime defined 更新时间
	UpdateTime null.Int `xorm:"int(10) notnull default(0) comment('更新时间') 'update_time'" json:"update_time" form:"update_time" xml:"update_time"`
	// DisableTime defined 禁用时间
	DisableTime null.Int `xorm:"int(10) notnull default(0) comment('禁用时间') 'disable_time'" json:"disable_time" form:"disable_time" xml:"disable_time"`
}

// With defined
func (m *McUser) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McUser) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McUser) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McUser) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McUser) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McUser) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McUser) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McUser
func (m *McUser) TableName() string {
	return "mc_user"
}
