// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McArticle defined 文章表
type McArticle struct {
	// ArticleId defined 文章ID
	ArticleId null.Int `xorm:"int(11) pk notnull autoincr comment('文章ID') 'article_id'" json:"article_id" form:"article_id" xml:"article_id"`
	// UserId defined 用户ID
	UserId null.Int `xorm:"int(11) notnull comment('用户ID') 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// Title defined 标题
	Title null.String `xorm:"varchar(80) notnull comment('标题') 'title'" json:"title" form:"title" xml:"title"`
	// ContentMarkdown defined 原始的正文内容
	ContentMarkdown null.String `xorm:"text(0) comment('原始的正文内容') 'content_markdown'" json:"content_markdown" form:"content_markdown" xml:"content_markdown"`
	// ContentRendered defined 过滤渲染后的正文内容
	ContentRendered null.String `xorm:"text(0) comment('过滤渲染后的正文内容') 'content_rendered'" json:"content_rendered" form:"content_rendered" xml:"content_rendered"`
	// CommentCount defined 评论数量
	CommentCount null.Int `xorm:"int(11) notnull default(0) comment('评论数量') 'comment_count'" json:"comment_count" form:"comment_count" xml:"comment_count"`
	// FollowerCount defined 关注者数量
	FollowerCount null.Int `xorm:"int(11) notnull default(0) comment('关注者数量') 'follower_count'" json:"follower_count" form:"follower_count" xml:"follower_count"`
	// VoteCount defined 投票数，赞成票-反对票，可以为负数
	VoteCount null.Int `xorm:"int(11) notnull default(0) comment('投票数，赞成票-反对票，可以为负数') 'vote_count'" json:"vote_count" form:"vote_count" xml:"vote_count"`
	// VoteUpCount defined 赞成票总数
	VoteUpCount null.Int `xorm:"int(11) notnull default(0) comment('赞成票总数') 'vote_up_count'" json:"vote_up_count" form:"vote_up_count" xml:"vote_up_count"`
	// VoteDownCount defined 反对票总数
	VoteDownCount null.Int `xorm:"int(11) notnull default(0) comment('反对票总数') 'vote_down_count'" json:"vote_down_count" form:"vote_down_count" xml:"vote_down_count"`
	// CreateTime defined 创建时间
	CreateTime null.Int `xorm:"int(10) notnull default(0) comment('创建时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
	// UpdateTime defined 更新时间
	UpdateTime null.Int `xorm:"int(10) notnull default(0) comment('更新时间') 'update_time'" json:"update_time" form:"update_time" xml:"update_time"`
	// DeleteTime defined 删除时间
	DeleteTime null.Int `xorm:"int(10) notnull default(0) comment('删除时间') 'delete_time'" json:"delete_time" form:"delete_time" xml:"delete_time"`
}

// With defined
func (m *McArticle) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McArticle) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McArticle) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McArticle) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McArticle) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McArticle) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McArticle) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McArticle
func (m *McArticle) TableName() string {
	return "mc_article"
}
