// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McReport defined 举报
type McReport struct {
	// ReportId defined
	ReportId null.Int `xorm:"int(11) pk notnull autoincr 'report_id'" json:"report_id" form:"report_id" xml:"report_id"`
	// ReportableId defined 举报目标ID
	ReportableId null.Int `xorm:"int(11) notnull comment('举报目标ID') 'reportable_id'" json:"reportable_id" form:"reportable_id" xml:"reportable_id"`
	// ReportableType defined 举报目标类型：question、article、answer、comment、user
	ReportableType null.String `xorm:" notnull comment('举报目标类型：question、article、answer、comment、user') 'reportable_type'" json:"reportable_type" form:"reportable_type" xml:"reportable_type"`
	// UserId defined 用户ID
	UserId null.Int `xorm:"int(11) notnull comment('用户ID') 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
	// Reason defined 举报原因
	Reason null.String `xorm:"varchar(200) notnull comment('举报原因') 'reason'" json:"reason" form:"reason" xml:"reason"`
	// CreateTime defined 举报时间
	CreateTime null.Int `xorm:"int(11) notnull comment('举报时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
}

// With defined
func (m *McReport) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McReport) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McReport) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McReport) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McReport) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McReport) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McReport) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McReport
func (m *McReport) TableName() string {
	return "mc_report"
}
