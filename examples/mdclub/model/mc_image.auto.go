// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McImage defined
type McImage struct {
	// Key defined 图片键名
	Key null.String `xorm:"varchar(50) pk notnull comment('图片键名') 'key'" json:"key" form:"key" xml:"key"`
	// Filename defined 原始文件名
	Filename null.String `xorm:"varchar(255) notnull comment('原始文件名') 'filename'" json:"filename" form:"filename" xml:"filename"`
	// Width defined 原始图片宽度
	Width null.Int `xorm:"int(5) notnull default(0) comment('原始图片宽度') 'width'" json:"width" form:"width" xml:"width"`
	// Height defined 原始图片高度
	Height null.Int `xorm:"int(5) notnull default(0) comment('原始图片高度') 'height'" json:"height" form:"height" xml:"height"`
	// CreateTime defined 上传时间
	CreateTime null.Int `xorm:"int(10) notnull default(0) comment('上传时间') 'create_time'" json:"create_time" form:"create_time" xml:"create_time"`
	// ItemType defined 关联类型：question、answer、article
	ItemType null.String `xorm:"comment('关联类型：question、answer、article') 'item_type'" json:"item_type" form:"item_type" xml:"item_type"`
	// ItemId defined 关联ID
	ItemId null.Int `xorm:"int(11) notnull default(0) comment('关联ID') 'item_id'" json:"item_id" form:"item_id" xml:"item_id"`
	// UserId defined 用户ID
	UserId null.Int `xorm:"int(11) notnull comment('用户ID') 'user_id'" json:"user_id" form:"user_id" xml:"user_id"`
}

// With defined
func (m *McImage) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McImage) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McImage) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McImage) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McImage) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McImage) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McImage) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McImage
func (m *McImage) TableName() string {
	return "mc_image"
}
