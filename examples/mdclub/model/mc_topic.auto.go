// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package model

import (
	"encoding/json"
	"errors"
	"reflect"

	"github.com/2637309949/dolphin/packages/null"
	"github.com/2637309949/dolphin/packages/xormplus/xorm"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/caches"
	"github.com/2637309949/dolphin/packages/xormplus/xorm/tags"
)

// McTopic defined 话题表
type McTopic struct {
	// TopicId defined 话题ID
	TopicId null.Int `xorm:"int(11) pk notnull autoincr comment('话题ID') 'topic_id'" json:"topic_id" form:"topic_id" xml:"topic_id"`
	// Name defined 话题名称
	Name null.String `xorm:"varchar(20) notnull default('') comment('话题名称') 'name'" json:"name" form:"name" xml:"name"`
	// Cover defined 封面图片token
	Cover null.String `xorm:"varchar(50) comment('封面图片token') 'cover'" json:"cover" form:"cover" xml:"cover"`
	// Description defined 话题描述
	Description null.String `xorm:"varchar(1000) notnull default('') comment('话题描述') 'description'" json:"description" form:"description" xml:"description"`
	// ArticleCount defined 文章数量
	ArticleCount null.Int `xorm:"int(11) notnull default(0) comment('文章数量') 'article_count'" json:"article_count" form:"article_count" xml:"article_count"`
	// QuestionCount defined 问题数量
	QuestionCount null.Int `xorm:"int(11) notnull default(0) comment('问题数量') 'question_count'" json:"question_count" form:"question_count" xml:"question_count"`
	// FollowerCount defined 关注者数量
	FollowerCount null.Int `xorm:"int(11) notnull default(0) comment('关注者数量') 'follower_count'" json:"follower_count" form:"follower_count" xml:"follower_count"`
	// DeleteTime defined 删除时间
	DeleteTime null.Int `xorm:"int(10) notnull default(0) comment('删除时间') 'delete_time'" json:"delete_time" form:"delete_time" xml:"delete_time"`
}

// With defined
func (m *McTopic) With(s interface{}) (interface{}, error) {
	if reflect.ValueOf(s).Kind() != reflect.Ptr {
		return nil, errors.New("ptr required")
	}
	mbt, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(mbt, s); err != nil {
		return nil, err
	}
	return s, err
}

// Marshal defined
func (m *McTopic) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal defined
func (m *McTopic) Unmarshal(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToMap defined
func (m *McTopic) ToMap() (map[string]interface{}, error) {
	byt, err := m.Marshal()
	if err != nil {
		return nil, err
	}
	itf := map[string]interface{}{}
	err = json.Unmarshal(byt, &itf)
	return itf, err
}

// FromMap defined
func (m *McTopic) FromMap(fm map[string]interface{}) error {
	byt, err := json.Marshal(fm)
	if err != nil {
		return err
	}
	err = m.Unmarshal(byt)
	return err
}

// Parser defined
func (m *McTopic) Parser(db *xorm.Engine) *tags.Parser {
	dialect, mapper, cache := db.Dialect(), db.DB().Mapper, caches.NewManager()
	return tags.NewParser("xorm", dialect, mapper, mapper, cache)
}

// PrimaryKeys defined
func (m *McTopic) PrimaryKeys(db *xorm.Engine) ([]string, error) {
	v := reflect.Indirect(reflect.ValueOf(m))
	table, err := m.Parser(db).Parse(v)
	return table.PrimaryKeys, err
}

// TableName table name of defined McTopic
func (m *McTopic) TableName() string {
	return "mc_topic"
}
