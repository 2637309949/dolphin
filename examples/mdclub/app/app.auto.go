// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package app

import (
	"mdclub/model"

	"github.com/spf13/viper"
)

// Name project
var Name = "mdclub"
var NopInterceptor = func(ctx *Context) { ctx.Next() }

// Controller defined
type Controller struct {
	Method       string
	RelativePath string
	Interceptor  HandlerFunc
	Handler      HandlerFunc
}

// Article defined
type Article struct {
	Name string
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get Controller
}

// NewArticle defined
func NewArticle() *Article {
	ctr := &Article{Name: "article"}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/article/add"
	ctr.Add.Interceptor = NopInterceptor
	ctr.Add.Handler = ArticleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/article/batch_add"
	ctr.BatchAdd.Interceptor = NopInterceptor
	ctr.BatchAdd.Handler = ArticleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/article/del"
	ctr.Del.Interceptor = NopInterceptor
	ctr.Del.Handler = ArticleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/article/batch_del"
	ctr.BatchDel.Interceptor = NopInterceptor
	ctr.BatchDel.Handler = ArticleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/article/update"
	ctr.Update.Interceptor = NopInterceptor
	ctr.Update.Handler = ArticleUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/article/batch_update"
	ctr.BatchUpdate.Interceptor = NopInterceptor
	ctr.BatchUpdate.Handler = ArticleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/article/page"
	ctr.Page.Interceptor = NopInterceptor
	ctr.Page.Handler = ArticlePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/article/get"
	ctr.Get.Interceptor = NopInterceptor
	ctr.Get.Handler = ArticleGet
	return ctr
}

// ArticleRoutes defined
func ArticleRoutes(dol *Dolphin) {
	group, instance := dol.Group(viper.GetString("http.prefix")), ArticleInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, Auth("token"), instance.Add.Interceptor, instance.Add.Handler)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, Auth("token"), instance.BatchAdd.Interceptor, instance.BatchAdd.Handler)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, Auth("token"), instance.Del.Interceptor, instance.Del.Handler)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, Auth("token"), instance.BatchDel.Interceptor, instance.BatchDel.Handler)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, Auth("token"), instance.Update.Interceptor, instance.Update.Handler)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, Auth("token"), instance.BatchUpdate.Interceptor, instance.BatchUpdate.Handler)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, Auth("token"), instance.Page.Interceptor, instance.Page.Handler)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, Auth("token"), instance.Get.Interceptor, instance.Get.Handler)
}

// ArticleInstance defined
var ArticleInstance = NewArticle()

// SyncModel defined
func (dol *Dolphin) SyncModel() error {
	mseti := dol.Manager.ModelSet()
	mseti.Add(new(model.McAnswer))
	mseti.Add(new(model.McArticle))
	mseti.Add(new(model.McCache))
	mseti.Add(new(model.McComment))
	mseti.Add(new(model.McFollow))
	mseti.Add(new(model.McImage))
	mseti.Add(new(model.McInbox))
	mseti.Add(new(model.McNotification))
	mseti.Add(new(model.McOption))
	mseti.Add(new(model.McQuestion))
	mseti.Add(new(model.McReport))
	mseti.Add(new(model.McToken))
	mseti.Add(new(model.McTopic))
	mseti.Add(new(model.McTopicable))
	mseti.Add(new(model.McUser))
	mseti.Add(new(model.McVote))
	return nil
}

// SyncController defined
func (dol *Dolphin) SyncController() error {
	ArticleRoutes(dol)
	return nil
}

// SyncService defined
func (dol *Dolphin) SyncService() error {
	return nil
}
