// Code generated by protoc-gen-go. DO NOT EDIT.
// source: article.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ArticleCond defined
type ArticleCond struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleCond) Reset()         { *m = ArticleCond{} }
func (m *ArticleCond) String() string { return proto.CompactTextString(m) }
func (*ArticleCond) ProtoMessage()    {}
func (*ArticleCond) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{0}
}

func (m *ArticleCond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleCond.Unmarshal(m, b)
}
func (m *ArticleCond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleCond.Marshal(b, m, deterministic)
}
func (m *ArticleCond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleCond.Merge(m, src)
}
func (m *ArticleCond) XXX_Size() int {
	return xxx_messageInfo_ArticleCond.Size(m)
}
func (m *ArticleCond) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleCond.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleCond proto.InternalMessageInfo

// ArticleReply defined
type ArticleReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleReply) Reset()         { *m = ArticleReply{} }
func (m *ArticleReply) String() string { return proto.CompactTextString(m) }
func (*ArticleReply) ProtoMessage()    {}
func (*ArticleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{1}
}

func (m *ArticleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleReply.Unmarshal(m, b)
}
func (m *ArticleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleReply.Marshal(b, m, deterministic)
}
func (m *ArticleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReply.Merge(m, src)
}
func (m *ArticleReply) XXX_Size() int {
	return xxx_messageInfo_ArticleReply.Size(m)
}
func (m *ArticleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ArticleCond)(nil), "proto.ArticleCond")
	proto.RegisterType((*ArticleReply)(nil), "proto.ArticleReply")
}

func init() { proto.RegisterFile("article.proto", fileDescriptor_5c593d380f9840a2) }

var fileDescriptor_5c593d380f9840a2 = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0x2a, 0xc9,
	0x4c, 0xce, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xbc, 0x5c,
	0xdc, 0x8e, 0x10, 0x71, 0xe7, 0xfc, 0xbc, 0x14, 0x25, 0x3e, 0x2e, 0x1e, 0x28, 0x37, 0x28, 0xb5,
	0x20, 0xa7, 0xd2, 0xc8, 0x9e, 0x8b, 0x0b, 0xca, 0x0f, 0x2e, 0x2a, 0x13, 0x32, 0xe4, 0x62, 0xf1,
	0xc9, 0x2c, 0x2e, 0x11, 0x12, 0x82, 0x98, 0xa1, 0x87, 0xa4, 0x53, 0x4a, 0x18, 0x55, 0x0c, 0xac,
	0x5d, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x50, 0xd7, 0xba,
	0x0d, 0x7e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleSrvClient is the client API for ArticleSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleSrvClient interface {
	List(ctx context.Context, in *ArticleCond, opts ...grpc.CallOption) (*ArticleReply, error)
}

type articleSrvClient struct {
	cc *grpc.ClientConn
}

func NewArticleSrvClient(cc *grpc.ClientConn) ArticleSrvClient {
	return &articleSrvClient{cc}
}

func (c *articleSrvClient) List(ctx context.Context, in *ArticleCond, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, "/proto.ArticleSrv/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleSrvServer is the server API for ArticleSrv service.
type ArticleSrvServer interface {
	List(context.Context, *ArticleCond) (*ArticleReply, error)
}

// UnimplementedArticleSrvServer can be embedded to have forward compatible implementations.
type UnimplementedArticleSrvServer struct {
}

func (*UnimplementedArticleSrvServer) List(ctx context.Context, req *ArticleCond) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterArticleSrvServer(s *grpc.Server, srv ArticleSrvServer) {
	s.RegisterService(&_ArticleSrv_serviceDesc, srv)
}

func _ArticleSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleCond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSrvServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ArticleSrv/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSrvServer).List(ctx, req.(*ArticleCond))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticleSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ArticleSrv",
	HandlerType: (*ArticleSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ArticleSrv_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
