// Code generated by dol build. Only Generate by tools if not existed.
// source: x_test_test.go

package main

import (
	"encoding/json"

	// "github.com/mattn/go-sqlite3"
	_ "github.com/mattn/go-sqlite3"
)

// XTestSysUserLogin defined TODO
var XTestSysUserLogin, XTestSysUserLoginRequest = func(ctx *Context) {
	ret := struct {
		Code int `json:"code"`
		Data struct {
			AccessToken  string `json:"access_token"`
			RefreshToken string `json:"refresh_token"`
		} `json:"data"`
	}{}
	json.Unmarshal(ctx.Body.Bytes(), &ret)
	SetToken(ret.Data.AccessToken)
}, Payload{"domain": "localhost", "name": "admin", "password": "admin"}

// XTestArticleAdd, XTestArticleAddRequest defined TODO
var XTestArticleAdd, XTestArticleAddRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleAdd = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleAdd = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleBatchAdd, XTestArticleBatchAddRequest defined TODO
var XTestArticleBatchAdd, XTestArticleBatchAddRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchAdd = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchAdd = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleDel, XTestArticleDelRequest defined TODO
var XTestArticleDel, XTestArticleDelRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleDel = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleDel = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleBatchDel, XTestArticleBatchDelRequest defined TODO
var XTestArticleBatchDel, XTestArticleBatchDelRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchDel = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchDel = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleUpdate, XTestArticleUpdateRequest defined TODO
var XTestArticleUpdate, XTestArticleUpdateRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleUpdate = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleUpdate = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleBatchUpdate, XTestArticleBatchUpdateRequest defined TODO
var XTestArticleBatchUpdate, XTestArticleBatchUpdateRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchUpdate = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleBatchUpdate = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticlePage, XTestArticlePageRequest defined TODO
var XTestArticlePage, XTestArticlePageRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticlePage = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticlePage = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleGet, XTestArticleGetRequest defined TODO
var XTestArticleGet, XTestArticleGetRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleGet = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleGet = %v want %v", ret.Code, 200)
	}
}, Payload{}

// XTestArticleTodo, XTestArticleTodoRequest defined TODO
var XTestArticleTodo, XTestArticleTodoRequest = func(ctx *Context) {
	ret := Response{}
	if ctx.Code != 200 {
		ctx.testingT.Errorf("XTestArticleTodo = %v want %v", ctx.Code, 200)
	}
	err := ctx.ParseBody(&ret)
	if err != nil {
		ctx.testingT.Error(err)
	}
	if ret.Code != 200 {
		ctx.testingT.Errorf("XTestArticleTodo = %v want %v", ret.Code, 200)
	}
}, Payload{}
