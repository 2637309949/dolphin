// Code generated by dol build. DO NOT EDIT.
// source: auto.go

package api

import (
	"test/srv"
	"test/svc"
	"test/types"

	"github.com/spf13/viper"
)

// Name project
var Name = "test"
var NopHandlerFunc = func(ctx *Context) { ctx.Next() }

// Controller defined
type Controller struct {
	Method       string
	RelativePath string
	Auth,
	Roles,
	Cache,
	Interceptor,
	Handler HandlerFunc
}

// Article defined
type Article struct {
	Name string
	Srv  *srv.Article
	Add,
	BatchAdd,
	Del,
	BatchDel,
	Update,
	BatchUpdate,
	Page,
	Get,
	Todo Controller
}

// NewArticle defined
func NewArticle() *Article {
	ctr := &Article{Name: "article", Srv: srv.NewArticle()}
	ctr.Add.Method = "POST"
	ctr.Add.RelativePath = "/article/add"
	ctr.Add.Auth = Auth("token")
	ctr.Add.Roles = NopHandlerFunc
	ctr.Add.Cache = NopHandlerFunc
	ctr.Add.Interceptor = NopHandlerFunc
	ctr.Add.Handler = ctr.ArticleAdd
	ctr.BatchAdd.Method = "POST"
	ctr.BatchAdd.RelativePath = "/article/batch_add"
	ctr.BatchAdd.Auth = Auth("token")
	ctr.BatchAdd.Roles = NopHandlerFunc
	ctr.BatchAdd.Cache = NopHandlerFunc
	ctr.BatchAdd.Interceptor = NopHandlerFunc
	ctr.BatchAdd.Handler = ctr.ArticleBatchAdd
	ctr.Del.Method = "DELETE"
	ctr.Del.RelativePath = "/article/del"
	ctr.Del.Auth = Auth("token")
	ctr.Del.Roles = NopHandlerFunc
	ctr.Del.Cache = NopHandlerFunc
	ctr.Del.Interceptor = NopHandlerFunc
	ctr.Del.Handler = ctr.ArticleDel
	ctr.BatchDel.Method = "DELETE"
	ctr.BatchDel.RelativePath = "/article/batch_del"
	ctr.BatchDel.Auth = Auth("token")
	ctr.BatchDel.Roles = NopHandlerFunc
	ctr.BatchDel.Cache = NopHandlerFunc
	ctr.BatchDel.Interceptor = NopHandlerFunc
	ctr.BatchDel.Handler = ctr.ArticleBatchDel
	ctr.Update.Method = "PUT"
	ctr.Update.RelativePath = "/article/update"
	ctr.Update.Auth = Auth("token")
	ctr.Update.Roles = NopHandlerFunc
	ctr.Update.Cache = NopHandlerFunc
	ctr.Update.Interceptor = NopHandlerFunc
	ctr.Update.Handler = ctr.ArticleUpdate
	ctr.BatchUpdate.Method = "PUT"
	ctr.BatchUpdate.RelativePath = "/article/batch_update"
	ctr.BatchUpdate.Auth = Auth("token")
	ctr.BatchUpdate.Roles = NopHandlerFunc
	ctr.BatchUpdate.Cache = NopHandlerFunc
	ctr.BatchUpdate.Interceptor = NopHandlerFunc
	ctr.BatchUpdate.Handler = ctr.ArticleBatchUpdate
	ctr.Page.Method = "GET"
	ctr.Page.RelativePath = "/article/page"
	ctr.Page.Auth = Auth("token")
	ctr.Page.Roles = NopHandlerFunc
	ctr.Page.Cache = NopHandlerFunc
	ctr.Page.Interceptor = NopHandlerFunc
	ctr.Page.Handler = ctr.ArticlePage
	ctr.Get.Method = "GET"
	ctr.Get.RelativePath = "/article/get"
	ctr.Get.Auth = Auth("token")
	ctr.Get.Roles = NopHandlerFunc
	ctr.Get.Cache = NopHandlerFunc
	ctr.Get.Interceptor = NopHandlerFunc
	ctr.Get.Handler = ctr.ArticleGet
	ctr.Todo.Method = "GET"
	ctr.Todo.RelativePath = "/article/todo"
	ctr.Todo.Auth = Auth("token")
	ctr.Todo.Roles = NopHandlerFunc
	ctr.Todo.Cache = NopHandlerFunc
	ctr.Todo.Interceptor = NopHandlerFunc
	ctr.Todo.Handler = ctr.ArticleTodo
	return ctr
}

// ArticleRoutes defined
func ArticleRoutes(rg *RouterGroup) {
	group, instance := rg.Group(viper.GetString("http.prefix")), ArticleInstance
	group.Handle(instance.Add.Method, instance.Add.RelativePath, instance.Add.Auth, instance.Add.Roles, instance.Add.Cache, instance.Add.Interceptor, instance.Add.Handler)
	group.Handle(instance.BatchAdd.Method, instance.BatchAdd.RelativePath, instance.BatchAdd.Auth, instance.BatchAdd.Roles, instance.BatchAdd.Cache, instance.BatchAdd.Interceptor, instance.BatchAdd.Handler)
	group.Handle(instance.Del.Method, instance.Del.RelativePath, instance.Del.Auth, instance.Del.Roles, instance.Del.Cache, instance.Del.Interceptor, instance.Del.Handler)
	group.Handle(instance.BatchDel.Method, instance.BatchDel.RelativePath, instance.BatchDel.Auth, instance.BatchDel.Roles, instance.BatchDel.Cache, instance.BatchDel.Interceptor, instance.BatchDel.Handler)
	group.Handle(instance.Update.Method, instance.Update.RelativePath, instance.Update.Auth, instance.Update.Roles, instance.Update.Cache, instance.Update.Interceptor, instance.Update.Handler)
	group.Handle(instance.BatchUpdate.Method, instance.BatchUpdate.RelativePath, instance.BatchUpdate.Auth, instance.BatchUpdate.Roles, instance.BatchUpdate.Cache, instance.BatchUpdate.Interceptor, instance.BatchUpdate.Handler)
	group.Handle(instance.Page.Method, instance.Page.RelativePath, instance.Page.Auth, instance.Page.Roles, instance.Page.Cache, instance.Page.Interceptor, instance.Page.Handler)
	group.Handle(instance.Get.Method, instance.Get.RelativePath, instance.Get.Auth, instance.Get.Roles, instance.Get.Cache, instance.Get.Interceptor, instance.Get.Handler)
	group.Handle(instance.Todo.Method, instance.Todo.RelativePath, instance.Todo.Auth, instance.Todo.Roles, instance.Todo.Cache, instance.Todo.Interceptor, instance.Todo.Handler)
}

// ArticleInstance defined
var ArticleInstance = NewArticle()

// SyncModel defined
func (dol *Dolphin) SyncModel() error {
	mseti := dol.Manager.ModelSet()
	mseti.Add(new(types.Article))
	return nil
}

// SyncController defined
func (dol *Dolphin) SyncController() error {
	ArticleRoutes(&dol.RouterGroup)
	return nil
}

// SyncSrv defined
func (dol *Dolphin) SyncSrv(svc *svc.ServiceContext) error {
	ArticleInstance.Srv.SetServiceContext(svc)
	return nil
}
