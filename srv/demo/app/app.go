// Code generated by dol build. Only Generate by tools if not existed, your can rewrite platform.App default action
// source: app.go

package app

import (
	platformApp "github.com/2637309949/dolphin/cli/platform/app"
	"github.com/gin-gonic/gin"
	"github.com/thoas/go-funk"
)

type (
	// Engine defined parse app engine
	Engine struct {
		*platformApp.Engine
	}
	// Context defined http handle hook context
	Context struct {
		*platformApp.Context
	}
	// RouterGroup defines struct that extend from gin.RouterGroup
	RouterGroup struct {
		*platformApp.RouterGroup
	}
	// HandlerFunc defines the handler used by gin middleware as return value.
	HandlerFunc func(*Context)
)

// HandlerFunc convert to platformApp.HandlerFunc
func (hf HandlerFunc) HandlerFunc(e *platformApp.Engine) (phf platformApp.HandlerFunc) {
	phf = platformApp.HandlerFunc(func(base *platformApp.Context) {
		ctx := &Context{Context: base}
		hf(ctx)
	})
	phf.HandlerFunc(e)
	return
}

// BuildEngine build engine
func BuildEngine(build func(*Engine)) func(*platformApp.Engine) {
	return func(base *platformApp.Engine) {
		engine.Engine = base
		build(engine)
	}
}

// Group handlers
func (e *Engine) Group(relativePath string, handlers ...gin.HandlerFunc) *RouterGroup {
	return &RouterGroup{RouterGroup: e.Engine.Group(relativePath, handlers...)}
}

// Handle overwrite RouterGroup.Handle
func (rg *RouterGroup) Handle(httpMethod, relativePath string, handlers ...HandlerFunc) gin.IRoutes {
	return rg.RouterGroup.Handle(
		httpMethod, relativePath,
		funk.Map(handlers, func(h HandlerFunc) platformApp.HandlerFunc {
			return h.HandlerFunc(rg.Engine)
		}).([]platformApp.HandlerFunc)...,
	)
}

// Engine instance
var engine = &Engine{}
