// Code generated by dol build. Only Generate by tools if not existed.
// source: wetchat_activity.go

package app

import (
	"example/model"
	"example/srv"

	"github.com/2637309949/dolphin/cli/packages/gin/binding"
	"github.com/2637309949/dolphin/cli/packages/null"
)

// WetchatActivityBatchAdd api implementation
// @Summary 添加活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body []model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/batch_add [post]
func WetchatActivityBatchAdd(ctx *Context) {
	var form []model.Activity
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	for _, f := range form {
		f.ID = null.StringFromUUID()
	}
	ret, err := ctx.DB.Insert(&form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityAdd api implementation
// @Summary 添加活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/add [post]
func WetchatActivityAdd(ctx *Context) {
	var form model.Activity
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	form.ID = null.StringFromUUID()
	ret, err := ctx.DB.Insert(&form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityBatchDel api implementation
// @Summary 删除活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body []model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/batch_del [post]
func WetchatActivityBatchDel(ctx *Context) {
	var form []model.Activity
	var err error
	var ret []int64
	var r int64
	if err = ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	s := ctx.DB.NewSession()
	for _, f := range form {
		r, err = s.ID(f.ID).Delete(&f)
		ret = append(ret, r)
	}
	if err != nil {
		s.Rollback()
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityDel api implementation
// @Summary 删除活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/del [post]
func WetchatActivityDel(ctx *Context) {
	var form model.Activity
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := ctx.DB.ID(form.ID).Delete(&form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityBatchUpdate api implementation
// @Summary 更新活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body []model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/batch_update [post]
func WetchatActivityBatchUpdate(ctx *Context) {
	var form []model.Activity
	var err error
	var ret []int64
	var r int64
	if err = ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	s := ctx.DB.NewSession()
	for _, f := range form {
		r, err = s.ID(f.ID).Update(&f)
		ret = append(ret, r)
	}
	if err != nil {
		s.Rollback()
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityUpdate api implementation
// @Summary 更新活动
// @Tags 活动
// @Accept application/json
// @Param Authorization header string false "认证令牌"
// @Param activity body model.Activity false "活动对象"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/update [post]
func WetchatActivityUpdate(ctx *Context) {
	var form model.Activity
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := ctx.DB.ID(form.ID).Update(&form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityList api implementation
// @Summary 活动分页查询
// @Tags 活动
// @Param Authorization header string false "认证令牌"
// @Param page query int false "页码"
// @Param size query int false "单页数"
// @Param title query string false "标题筛选"
// @Param hidden query int false "是否隐藏筛选"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/list [get]
func WetchatActivityList(ctx *Context) {
	q := ctx.TypeQuery()
	q.SetInt("page", 1)
	q.SetInt("size", 20)
	q.SetString("title", "nn")
	q.SetInt("hidden")
	ret, err := ctx.PageSearch(ctx.DB, "wetchat_activity", "list", "activity", q.Value())
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityOne api implementation
// @Summary 获取活动
// @Tags 活动
// @Param Authorization header string false "认证令牌"
// @Param id query string false "活动id"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/wetchat/activity/one [get]
func WetchatActivityOne(ctx *Context) {
	var entity model.Activity
	id := ctx.Query("id")
	ret, err := ctx.DB.Id(id).Get(&entity)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityIncrease api implementation
// @Summary 增加次数
// @Tags 活动
// @version 1.0
// @Accept application/json
// @Param id body string false "记录id"
// @Param action body string false "点赞（like）,分享（share）和收藏(collect) 收藏和点赞第一次调用次数增一，调第二次减一，分享每一次都加一"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/v1/wetchat/activity/increase [post]
func WetchatActivityIncrease(ctx *Context) {
	var form string
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := srv.WetchatActivityAction(form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// WetchatActivityIncreaseV2 api implementation
// @Summary 增加次数
// @Tags 活动
// @version 2.0
// @Accept application/json
// @Param id body string false "记录id"
// @Failure 403 {object} model.Response
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/v2/wetchat/activity/increase_v2 [post]
func WetchatActivityIncreaseV2(ctx *Context) {
	var form string
	if err := ctx.ShouldBindBodyWith(&form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := srv.WetchatActivityAction(form)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
