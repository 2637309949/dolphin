// Copyright (c) 2018-2020 Double All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

package tempalte

// TmplCtr defined template
var TmplCtr = `// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Controller.Name}}.go

package app

import (
	"{{.PackageName}}/model"
	"{{.PackageName}}/util"
	"net/http"

	platformApp "github.com/2637309949/dolphin/cli/platform/app"
	"github.com/gin-gonic/gin/binding"
)

// {{.Controller.ToUpperCase .Controller.Name}} struct
type {{.Controller.ToUpperCase .Controller.Name}} struct {
	*Engine
}

// Build{{.Controller.ToUpperCase .Controller.Name}} return {{.Controller.ToUpperCase .Controller.Name}}
func Build{{.Controller.ToUpperCase .Controller.Name}}(build func(*{{.Controller.ToUpperCase .Controller.Name}})) func(engine *platformApp.Engine) {
	return func(engine *platformApp.Engine) {
		build(&{{.Controller.ToUpperCase .Controller.Name}}{Engine: &Engine{Engine: engine}})
	}
}

{{range .Controller.APIS}}
// {{.ToUpperCase .Name}} {{.ToUpperCase .Desc}}
// @Title {{.ToUpperCase .Name}}
// @Description {{.ToUpperCase .Desc}}
{{- range .Params}}
// @Param	{{.Name}}      {{.Type}}  {{.Desc}}
{{- end}}
// @Success 200 {object} Account
// @Failure 403 :id is empty
// @Router /api{{.Version}}/{{$.Controller.Name}}/{{.Name}} [{{.Method}}]
func (ctr *{{$.Controller.ToUpperCase $.Controller.Name}}) {{.ToUpperCase .Name}}(ctx *Context) {
	{{- if eq .Function "page"}}
	q := ctr.Query(ctx)
	q.SetInt("page", 1)
	q.SetInt("size", 20)
	q.SetInt("del_flag")
	q.SetString("title")
	q.SetString("campus")
	q.SetString("city")
	q.SetString("hidden")

	ret, err := ctr.PageSearch(ctx.DB, "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	{{- else if eq .Function "add"}}
	var bean model.{{.ToUpperCase .Table}}
	if err := ctx.ShouldBindBodyWith(&bean, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := ctx.DB.Insert(&bean)
	{{- else}}
	var form = &struct{}{}
	if err := ctx.ShouldBindBodyWith(form, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := util.AppAction(form)
	{{end}}
	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}
{{end}}
`
