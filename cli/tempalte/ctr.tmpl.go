// Copyright (c) 2018-2020 Double All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

package tempalte

// TmplCtr defined template
var TmplCtr = `// Code generated by dol build. Only Generate by tools if not existed.
// source: {{.Controller.Name}}.go

package app

import (
	"{{.PackageName}}/model"
	
	pApp "github.com/2637309949/dolphin/cli/platform/app"
	pUtil "github.com/2637309949/dolphin/cli/platform/util"
	"github.com/gin-gonic/gin/binding"
)

// {{.Controller.ToUpperCase .Controller.Name}} struct
type {{.Controller.ToUpperCase .Controller.Name}} struct {
	*Engine
}

// Build{{.Controller.ToUpperCase .Controller.Name}} return {{.Controller.ToUpperCase .Controller.Name}}
func Build{{.Controller.ToUpperCase .Controller.Name}}(build func(*{{.Controller.ToUpperCase .Controller.Name}})) func(engine *pApp.Engine) {
	return BuildEngine(func(engine *Engine) {
		build(&{{.Controller.ToUpperCase .Controller.Name}}{Engine: engine})
	})
}
{{range .Controller.APIS}}
// {{.ToUpperCase .Name}} api implementation
// @Summary {{.Desc}} 
// @Tags {{$.Controller.Desc}}
{{- if ne .Version "" }}
// @version {{.Version}}
{{- end}}
{{- if ne .Method "get"}}
// @Accept application/json
{{- end}}
{{- $api := .}}
{{- if .Auth}}
// @Param token header query string true "认证令牌"
{{- end}}
{{- range .Params}}
// @Param {{.Name}} {{- if eq $api.Method "get"}} query {{- else }} body {{- end}} {{.Ref .Type}} false "{{.Desc}}"
{{- end}}
// @Failure 403 {object} model.Response
{{- if ne .Return.Success.Type ""}}
// @Success 200 {object} model.Response
{{- end}}
{{- if ne .Return.Failure.Type ""}}
// @Failure 500 {object} model.Response
{{- end}}
// @Router /api{{.VPath .Version}}/{{$.Controller.Name}}/{{.Name}} [{{.Method}}]
func (ctr *{{$.Controller.ToUpperCase $.Controller.Name}}) {{.ToUpperCase .Name}}(ctx *Context) {
	{{- if eq .Function "page"}}
	q := ctr.Query(ctx)
	{{- range .Params}}
	{{- $tv := .ToTypeValue .Type .Value}}
	q.Set{{.ToTitle .Type}}("{{.Name}}"{{- if ne "" $tv}}, {{$tv}}{{- end}})
	{{- end}}
	ret, err := ctr.PageSearch(ctx.DB, "{{$.Controller.Name}}", "{{.Name}}", "{{.Table}}", q.Value())
	{{- else if eq .Function "add"}}
	var bean model.{{.ToUpperCase .Table}}
	if err := ctx.ShouldBindBodyWith(&bean, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := ctx.DB.Insert(&bean)
	{{- else}}
	var form = &struct{}{}
	if err := ctx.ShouldBindBodyWith(form, binding.JSON); err != nil {
		ctx.Fail(err)
		return
	}
	ret, err := pUtil.AppAction(form)
	{{- end}}
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}
{{end}}
`
