// Code generated by dol build. Only Generate by tools if not existed.
// source: oauth2.go

package app

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-session/session"
	"github.com/spf13/viper"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/clientcredentials"
	oaErrors "gopkg.in/oauth2.v3/errors"
)

var (
	authServerURL = viper.GetString("oauth.server")
)

var (
	oa2cfg = oauth2.Config{
		ClientID:     viper.GetString("oauth.id"),
		ClientSecret: viper.GetString("oauth.login"),
		Scopes:       []string{"all"},
		RedirectURL:  fmt.Sprintf("%v/api/oauth2/oauth2", viper.GetString("oauth.cli")),
		Endpoint: oauth2.Endpoint{
			AuthURL:  authServerURL + "/api/oauth2/authorize",
			TokenURL: authServerURL + "/api/oauth2/token",
		},
	}
)

// Oauth2 struct
type Oauth2 struct {
	*Engine
}

// BuildOauth2 return Oauth2
func BuildOauth2(build func(*Oauth2)) func(engine *Engine) {
	return BuildEngine(func(engine *Engine) {
		build(&Oauth2{Engine: engine})
	})
}

// Login api implementation
// @Summary 登录信息
// @Tags OAuth授权
// @Accept application/json
// @Param token header query string true "认证令牌"
// @Param user body model.User false "用户信息"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/login [post]
func (ctr *Oauth2) Login(ctx *Context) {
	store, err := session.Start(nil, ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Request.ParseForm()
	f := ctx.Request.Form
	username := f.Get("username")
	password := f.Get("password")
	userID, err := ctr.OAuth2.PasswordAuthorizationHandler(username, password)
	if err != nil {
		ctx.Fail(err)
		return
	} else if strings.TrimSpace(userID) == "" {
		ctx.Fail(oaErrors.ErrInvalidGrant)
		return
	}
	store.Set("LoggedInUserID", userID)
	store.Save()
	ctx.Redirect(http.StatusFound, viper.GetString("oauth.auth"))
}

// Affirm api implementation
// @Summary 用户授权
// @Tags OAuth授权
// @Accept application/json
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/affirm [post]
func (ctr *Oauth2) Affirm(ctx *Context) {
	store, err := session.Start(nil, ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}

	var form url.Values
	if v, ok := store.Get("ReturnUri"); ok {
		form = v.(url.Values)
	}
	ctx.Request.Form = form
	store.Delete("ReturnUri")
	store.Save()

	err = ctr.OAuth2.HandleAuthorizeRequest(ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}
}

// Authorize api implementation
// @Summary 用户授权
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/authorize [get]
func (ctr *Oauth2) Authorize(ctx *Context) {
	store, err := session.Start(nil, ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}
	var form url.Values
	if v, ok := store.Get("ReturnUri"); ok {
		form = v.(url.Values)
	}
	ctx.Request.Form = form
	store.Delete("ReturnUri")
	store.Save()
	err = ctr.OAuth2.HandleAuthorizeRequest(ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}
}

// Token api implementation
// @Summary 获取令牌
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/token [post]
func (ctr *Oauth2) Token(ctx *Context) {
	err := ctr.OAuth2.HandleTokenRequest(ctx.Writer, ctx.Request)
	if err != nil {
		ctx.Fail(err)
	}
}

// Oauth2 api implementation
// @Summary 授权回调
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/oauth2 [get]
func (ctr *Oauth2) Oauth2(ctx *Context) {
	ctx.Request.ParseForm()
	f := ctx.Request.Form
	_ = f.Get("state")
	code := f.Get("code")
	if code == "" {
		ctx.Fail(errors.New("Code not found"))
		return
	}
	ret, err := oa2cfg.Exchange(context.Background(), code)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// URL api implementation
// @Summary 授权地址
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/url [get]
func (ctr *Oauth2) URL(ctx *Context) {
	ctx.Request.ParseForm()
	f := ctx.Request.Form
	state := f.Get("state")
	ret := oa2cfg.AuthCodeURL(state)
	ctx.Success(ret)
}

// Refresh api implementation
// @Summary 刷新令牌
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/refresh [get]
func (ctr *Oauth2) Refresh(ctx *Context) {
	refreshtoken, ok := ctr.OAuth2.BearerAuth(ctx.Request)
	if !ok {
		ctx.Fail(oaErrors.ErrInvalidAccessToken)
		return
	}
	token := oauth2.Token{}
	token.Expiry = time.Now()
	token.RefreshToken = refreshtoken
	ret, err := oa2cfg.TokenSource(context.Background(), &token).Token()
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// Info api implementation
// @Summary 客户端信息
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/info [get]
func (ctr *Oauth2) Info(ctx *Context) {
	cfg := clientcredentials.Config{
		ClientID:     oa2cfg.ClientID,
		ClientSecret: oa2cfg.ClientSecret,
		TokenURL:     oa2cfg.Endpoint.TokenURL,
	}
	ret, err := cfg.Token(context.Background())
	if err != nil {
		ctx.Fail(err)
		return
	}
	ctx.Success(ret)
}

// Test api implementation
// @Summary 测试接口
// @Tags OAuth授权
// @Param token header query string true "认证令牌"
// @Failure 403 {object} model.Response
// @Router /api/oauth2/test [get]
func (ctr *Oauth2) Test(ctx *Context) {
	ctx.Request.ParseForm()
	token, err := ctr.OAuth2.ValidationBearerToken(ctx.Request)
	if err != nil {
		ctx.Fail(err)
		return
	}
	ret := map[string]interface{}{
		"expires_in": int64(token.GetAccessCreateAt().Add(token.GetAccessExpiresIn()).Sub(time.Now()).Seconds()),
		"client_id":  token.GetClientID(),
		"user_id":    token.GetUserID(),
	}
	ctx.Success(ret)
}
