// Code generated by dol build. Only Generate by tools if not existed.
// source: user.go

package app

import (
	"net/http"

	"github.com/2637309949/dolphin/cli/platform/model"
	"github.com/2637309949/dolphin/cli/platform/util"

	"github.com/gin-gonic/gin/binding"
)

// User struct
type User struct {
	*Engine
}

// BuildUser return User
func BuildUser(build func(*User)) func(engine *Engine) {
	return BuildEngine(func(engine *Engine) {
		build(&User{Engine: engine})
	})
}

// Add api implementation
// @Summary 添加用户信息
// @Tags 用户
// @Accept application/json
// @Param user body model.User false "用户信息"
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/user/add [post]
func (ctr *User) Add(ctx *Context) {
	var bean model.User
	if err := ctx.ShouldBindBodyWith(&bean, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := ctx.DB.Insert(&bean)
	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}

// Update api implementation
// @Summary 更新用户信息
// @Tags 用户
// @Accept application/json
// @Param user body model.User false "用户信息"
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/user/update [post]
func (ctr *User) Update(ctx *Context) {
	var form = &struct{}{}
	if err := ctx.ShouldBindBodyWith(form, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := util.AppAction(form)

	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}

// Delete api implementation
// @Summary 删除用户信息
// @Tags 用户
// @Accept application/json
// @Param ids body []string false "用户信息id对象数组"
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/user/delete [post]
func (ctr *User) Delete(ctx *Context) {
	var form = &struct{}{}
	if err := ctx.ShouldBindBodyWith(form, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := util.AppAction(form)

	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}

// Page api implementation
// @Summary 用户信息分页查询
// @Tags 用户
// @Param page query int false "页码"
// @Param rows query int false "单页数"
// @Param title query string false "标题筛选"
// @Param hidden query int false "是否隐藏筛选"
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/user/page [get]
func (ctr *User) Page(ctx *Context) {
	q := ctr.Query(ctx)
	q.SetInt("page", 1)
	q.SetInt("size", 20)
	q.SetInt("del_flag")
	q.SetString("title")
	q.SetString("campus")
	q.SetString("city")
	q.SetString("hidden")

	ret, err := ctr.PageSearch(ctx.DB, "user", "page", "user", q.Value())
	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}

// Get api implementation
// @Summary 获取用户信息
// @Tags 用户
// @Param id query string false "用户信息id"
// @Success 200 {object} model.Response
// @Failure 500 {object} model.Response
// @Router /api/user/get [get]
func (ctr *User) Get(ctx *Context) {
	var form = &struct{}{}
	if err := ctx.ShouldBindBodyWith(form, binding.JSON); err != nil {
		ctx.JSON(http.StatusInternalServerError, util.M{"code": 500, "message": err.Error()})
		return
	}
	ret, err := util.AppAction(form)

	if err != nil {
		code := 500
		if err, ok := err.(util.Error); ok {
			code = err.Code
		}
		ctx.JSON(http.StatusInternalServerError, util.M{"code": code, "message": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, ret)
}
