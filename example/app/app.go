// Code generated by dol build. Only Generate by tools if not existed.
// source: app.go

package app

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"path"

	"github.com/2637309949/dolphin/dol"
	"github.com/2637309949/dolphin/dol/cli"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"github.com/xormplus/xorm"
)

// Engine struct
type Engine struct {
	Geng *gin.Engine
	Xorm *xorm.Engine
}

// Group handlers
func (e *Engine) Group(relativePath string, handlers ...gin.HandlerFunc) *RouterGroup {
	gp := e.Geng.Group(relativePath, handlers...)
	rg := &RouterGroup{gp}
	return rg
}

// Sync2 handlers
func (e *Engine) Sync2(beans ...interface{}) error {
	return e.Xorm.Sync2(beans...)
}

// Context struct
type Context struct {
	*gin.Context
}

// HandlerFunc defines the handler used by gin middleware as return value.
type HandlerFunc func(*Context)

// HandlerFunc convert to gin.HandlerFunc
func (h HandlerFunc) HandlerFunc() gin.HandlerFunc {
	return gin.HandlerFunc(func(ctx *gin.Context) {
		c := &Context{Context: ctx}
		h(c)
	})
}

// RouterGroup struct
type RouterGroup struct {
	*gin.RouterGroup
}

// Handle overwrite RouterGroup.Handle
func (rg *RouterGroup) Handle(httpMethod, relativePath string, handlers ...HandlerFunc) gin.IRoutes {
	var newHandlers []gin.HandlerFunc
	for _, h := range handlers {
		newHandlers = append(newHandlers, h.HandlerFunc())
	}
	return rg.RouterGroup.Handle(httpMethod, relativePath, newHandlers...)
}

func init() {
	cli.Provider(func(lc dol.Lifecycle) *Engine {
		Xorm, err := xorm.NewEngine("mysql", "root:111111@/dolphin?charset=utf8&parseTime=True&loc=Local")
		if err != nil {
			logrus.Fatal(err)
		}
		if err = Xorm.Ping(); err != nil {
			logrus.Fatal(err)
		}
		if err = os.MkdirAll(path.Join(".", "sql"), os.ModePerm); err != nil {
			logrus.Fatal(err)
		}
		err = Xorm.RegisterSqlMap(xorm.Xml(path.Join(".", "sql"), ".xml"))
		if err != nil {
			logrus.Fatal(err)
		}
		engine := &Engine{}
		engine.Geng = gin.New()
		engine.Xorm = Xorm
		http := &http.Server{Addr: fmt.Sprintf(":%v", "8091"), Handler: engine.Geng}
		lc.Append(dol.Hook{
			OnStart: func(context.Context) error {
				go func() {
					if err = http.ListenAndServe(); err != nil {
						logrus.Fatal(err)
					}
				}()
				return nil
			},
			OnStop: func(ctx context.Context) error {
				if err = http.Shutdown(ctx); err != nil {
					logrus.Fatal(err)
					return err
				}
				return nil
			},
		})
		return engine
	})
}
